/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ConvexOracleV2 } from "./ConvexOracleV2";

export class ConvexOracleV2Factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _curve_oracle: string,
    overrides?: Overrides
  ): Promise<ConvexOracleV2> {
    return super.deploy(
      _curve_oracle,
      overrides || {}
    ) as Promise<ConvexOracleV2>;
  }
  getDeployTransaction(
    _curve_oracle: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_curve_oracle, overrides || {});
  }
  attach(address: string): ConvexOracleV2 {
    return super.attach(address) as ConvexOracleV2;
  }
  connect(signer: Signer): ConvexOracleV2Factory {
    return super.connect(signer) as ConvexOracleV2Factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexOracleV2 {
    return new Contract(address, _abi, signerOrProvider) as ConvexOracleV2;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract CurveOracleV2",
        name: "_curve_oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "curve_pool",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "prices",
        type: "uint256[]",
      },
      {
        internalType: "uint16",
        name: "pid",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "convex_lp",
        type: "address",
      },
      {
        internalType: "address",
        name: "curve_lp",
        type: "address",
      },
    ],
    name: "get_convex_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161036838038061036883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6102d7806100916000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632a417cc714610030575b600080fd5b61004361003e366004610115565b610059565b6040516100509190610282565b60405180910390f35b600080546040516336e5b51960e11b815282916001600160a01b031690636dcb6a329061008c908a908a9060040161022c565b60206040518083038186803b1580156100a457600080fd5b505afa1580156100b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dc9190610214565b979650505050505050565b80356001600160a01b03811681146100fe57600080fd5b919050565b803561ffff811681146100fe57600080fd5b600080600080600060a0868803121561012c578081fd5b610135866100e7565b945060208087013567ffffffffffffffff80821115610152578384fd5b818901915089601f830112610165578384fd5b8135818111156101775761017761028b565b838102604051858282010181811085821117156101965761019661028b565b604052828152858101935084860182860187018e10156101b4578788fd5b8795505b838610156101d65780358552600195909501949386019386016101b8565b508099505050505050506101ec60408701610103565b92506101fa606087016100e7565b9150610208608087016100e7565b90509295509295909350565b600060208284031215610225578081fd5b5051919050565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b8181101561027557845183529383019391830191600101610259565b5090979650505050505050565b90815260200190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212201c8a80e3365586da54d394081490d667221bf333e059dbe5de93b7504d3d1ca764736f6c63430008000033";
