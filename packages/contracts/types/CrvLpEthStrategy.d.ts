/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CrvLpEthStrategyInterface extends ethers.utils.Interface {
  functions: {
    "LEFTOVER()": FunctionFragment;
    "MAX_BPS()": FunctionFragment;
    "__BaseStrategy_init(address,address,uint64)": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "autoCompoundRatio()": FunctionFragment;
    "averageR(uint8)": FunctionFragment;
    "balanceOf()": FunctionFragment;
    "balanceOfPool()": FunctionFragment;
    "balanceOfRewards()": FunctionFragment;
    "balanceOfWant()": FunctionFragment;
    "baseRewardsPool()": FunctionFragment;
    "baseStrategyVersion()": FunctionFragment;
    "booster()": FunctionFragment;
    "calculateAverageRate()": FunctionFragment;
    "crvToken()": FunctionFragment;
    "curvePool()": FunctionFragment;
    "curvePoolTokens(uint256)": FunctionFragment;
    "curveTokenBalances(uint256)": FunctionFragment;
    "cvxToken()": FunctionFragment;
    "emitNonProtectedToken(address)": FunctionFragment;
    "ethNative()": FunctionFragment;
    "extraRewardsTended(address)": FunctionFragment;
    "extraTokens(uint256)": FunctionFragment;
    "getName()": FunctionFragment;
    "getProtectedTokens()": FunctionFragment;
    "governance()": FunctionFragment;
    "harvest()": FunctionFragment;
    "initialize(address,address,uint64,uint256,uint8,address)": FunctionFragment;
    "isProtectedToken(address)": FunctionFragment;
    "isTendable()": FunctionFragment;
    "lastHarvestTime()": FunctionFragment;
    "lendingPool()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pid()": FunctionFragment;
    "poolSize()": FunctionFragment;
    "pull()": FunctionFragment;
    "setWithdrawalMaxDeviationThreshold(uint256)": FunctionFragment;
    "tend()": FunctionFragment;
    "tranche()": FunctionFragment;
    "treasury()": FunctionFragment;
    "underlying()": FunctionFragment;
    "unpause()": FunctionFragment;
    "vToken()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawOther(address)": FunctionFragment;
    "withdrawalMaxDeviationThreshold()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LEFTOVER", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAX_BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__BaseStrategy_init",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoCompoundRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "averageR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfWant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseRewardsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseStrategyVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "booster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateAverageRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crvToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "curvePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "curvePoolTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "curveTokenBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cvxToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emitNonProtectedToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ethNative", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extraRewardsTended",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "extraTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProtectedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isProtectedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTendable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastHarvestTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "pull", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalMaxDeviationThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tend", values?: undefined): string;
  encodeFunctionData(functionFragment: "tranche", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOther",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalMaxDeviationThreshold",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "LEFTOVER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_BPS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__BaseStrategy_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoCompoundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "averageR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRewardsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseStrategyVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "booster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAverageRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curvePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "curvePoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cvxToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitNonProtectedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethNative", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extraRewardsTended",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProtectedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProtectedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTendable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvestTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalMaxDeviationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tranche", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalMaxDeviationThreshold",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "SetWithdrawalMaxDeviationThreshold(uint256)": EventFragment;
    "StrategyPullFromLendingPool(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetWithdrawalMaxDeviationThreshold"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyPullFromLendingPool"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class CrvLpEthStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CrvLpEthStrategyInterface;

  functions: {
    LEFTOVER(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "LEFTOVER()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    MAX_BPS(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    __BaseStrategy_init(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__BaseStrategy_init(address,address,uint64)"(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "addressProvider()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    autoCompoundRatio(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "autoCompoundRatio()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    averageR(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "averageR(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOf(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "balanceOf()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceOfPool(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    balanceOfRewards(overrides?: CallOverrides): Promise<{
      rewards: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    "balanceOfRewards()"(overrides?: CallOverrides): Promise<{
      rewards: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { token: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    balanceOfWant(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    baseRewardsPool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "baseRewardsPool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "baseStrategyVersion()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    booster(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "booster()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    calculateAverageRate(overrides?: CallOverrides): Promise<{
      r: BigNumber;
      0: BigNumber;
    }>;

    "calculateAverageRate()"(overrides?: CallOverrides): Promise<{
      r: BigNumber;
      0: BigNumber;
    }>;

    crvToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "crvToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    curvePool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "curvePool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    curvePoolTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "curvePoolTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    curveTokenBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "curveTokenBalances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cvxToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "cvxToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    emitNonProtectedToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emitNonProtectedToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ethNative(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ethNative()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    extraRewardsTended(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "extraRewardsTended(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    extraTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "extraTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getName(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getName()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getProtectedTokens(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "getProtectedTokens()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    governance(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governance()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    harvest(overrides?: Overrides): Promise<ContractTransaction>;

    "harvest()"(overrides?: Overrides): Promise<ContractTransaction>;

    initialize(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      _pid: BigNumberish,
      _poolSize: BigNumberish,
      _curvePool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint64,uint256,uint8,address)"(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      _pid: BigNumberish,
      _poolSize: BigNumberish,
      _curvePool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isProtectedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isProtectedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isTendable(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isTendable()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    lastHarvestTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastHarvestTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lendingPool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lendingPool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    pid(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "pid()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    poolSize(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "poolSize()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    pull(overrides?: Overrides): Promise<ContractTransaction>;

    "pull()"(overrides?: Overrides): Promise<ContractTransaction>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWithdrawalMaxDeviationThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tend(overrides?: Overrides): Promise<ContractTransaction>;

    "tend()"(overrides?: Overrides): Promise<ContractTransaction>;

    tranche(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "tranche()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    treasury(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "treasury()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    underlying(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "underlying()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    vToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "vToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawOther(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawOther(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "withdrawalMaxDeviationThreshold()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  LEFTOVER(overrides?: CallOverrides): Promise<BigNumber>;

  "LEFTOVER()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

  __BaseStrategy_init(
    _addressProvider: string,
    _underlying: string,
    _tranche: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__BaseStrategy_init(address,address,uint64)"(
    _addressProvider: string,
    _underlying: string,
    _tranche: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  "addressProvider()"(overrides?: CallOverrides): Promise<string>;

  autoCompoundRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "autoCompoundRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  averageR(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "averageR(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfRewards(
    overrides?: CallOverrides
  ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

  "balanceOfRewards()"(
    overrides?: CallOverrides
  ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

  balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

  baseRewardsPool(overrides?: CallOverrides): Promise<string>;

  "baseRewardsPool()"(overrides?: CallOverrides): Promise<string>;

  baseStrategyVersion(overrides?: CallOverrides): Promise<string>;

  "baseStrategyVersion()"(overrides?: CallOverrides): Promise<string>;

  booster(overrides?: CallOverrides): Promise<string>;

  "booster()"(overrides?: CallOverrides): Promise<string>;

  calculateAverageRate(overrides?: CallOverrides): Promise<BigNumber>;

  "calculateAverageRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  crvToken(overrides?: CallOverrides): Promise<string>;

  "crvToken()"(overrides?: CallOverrides): Promise<string>;

  curvePool(overrides?: CallOverrides): Promise<string>;

  "curvePool()"(overrides?: CallOverrides): Promise<string>;

  curvePoolTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "curvePoolTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  curveTokenBalances(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "curveTokenBalances(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cvxToken(overrides?: CallOverrides): Promise<string>;

  "cvxToken()"(overrides?: CallOverrides): Promise<string>;

  emitNonProtectedToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emitNonProtectedToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ethNative(overrides?: CallOverrides): Promise<string>;

  "ethNative()"(overrides?: CallOverrides): Promise<string>;

  extraRewardsTended(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "extraRewardsTended(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  extraTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "extraTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  getProtectedTokens(overrides?: CallOverrides): Promise<string[]>;

  "getProtectedTokens()"(overrides?: CallOverrides): Promise<string[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  harvest(overrides?: Overrides): Promise<ContractTransaction>;

  "harvest()"(overrides?: Overrides): Promise<ContractTransaction>;

  initialize(
    _addressProvider: string,
    _underlying: string,
    _tranche: BigNumberish,
    _pid: BigNumberish,
    _poolSize: BigNumberish,
    _curvePool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint64,uint256,uint8,address)"(
    _addressProvider: string,
    _underlying: string,
    _tranche: BigNumberish,
    _pid: BigNumberish,
    _poolSize: BigNumberish,
    _curvePool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isProtectedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

  "isProtectedToken(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTendable(overrides?: CallOverrides): Promise<boolean>;

  "isTendable()"(overrides?: CallOverrides): Promise<boolean>;

  lastHarvestTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastHarvestTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  lendingPool(overrides?: CallOverrides): Promise<string>;

  "lendingPool()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolSize(overrides?: CallOverrides): Promise<number>;

  "poolSize()"(overrides?: CallOverrides): Promise<number>;

  pull(overrides?: Overrides): Promise<ContractTransaction>;

  "pull()"(overrides?: Overrides): Promise<ContractTransaction>;

  setWithdrawalMaxDeviationThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWithdrawalMaxDeviationThreshold(uint256)"(
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tend(overrides?: Overrides): Promise<ContractTransaction>;

  "tend()"(overrides?: Overrides): Promise<ContractTransaction>;

  tranche(overrides?: CallOverrides): Promise<BigNumber>;

  "tranche()"(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  vToken(overrides?: CallOverrides): Promise<string>;

  "vToken()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawOther(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawOther(address)"(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawalMaxDeviationThreshold(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "withdrawalMaxDeviationThreshold()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    LEFTOVER(overrides?: CallOverrides): Promise<BigNumber>;

    "LEFTOVER()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    __BaseStrategy_init(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__BaseStrategy_init(address,address,uint64)"(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    "addressProvider()"(overrides?: CallOverrides): Promise<string>;

    autoCompoundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "autoCompoundRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    averageR(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "averageR(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfRewards(
      overrides?: CallOverrides
    ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    "balanceOfRewards()"(
      overrides?: CallOverrides
    ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseRewardsPool(overrides?: CallOverrides): Promise<string>;

    "baseRewardsPool()"(overrides?: CallOverrides): Promise<string>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<string>;

    "baseStrategyVersion()"(overrides?: CallOverrides): Promise<string>;

    booster(overrides?: CallOverrides): Promise<string>;

    "booster()"(overrides?: CallOverrides): Promise<string>;

    calculateAverageRate(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateAverageRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    crvToken(overrides?: CallOverrides): Promise<string>;

    "crvToken()"(overrides?: CallOverrides): Promise<string>;

    curvePool(overrides?: CallOverrides): Promise<string>;

    "curvePool()"(overrides?: CallOverrides): Promise<string>;

    curvePoolTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "curvePoolTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    curveTokenBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "curveTokenBalances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cvxToken(overrides?: CallOverrides): Promise<string>;

    "cvxToken()"(overrides?: CallOverrides): Promise<string>;

    emitNonProtectedToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitNonProtectedToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ethNative(overrides?: CallOverrides): Promise<string>;

    "ethNative()"(overrides?: CallOverrides): Promise<string>;

    extraRewardsTended(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extraRewardsTended(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "extraTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    getProtectedTokens(overrides?: CallOverrides): Promise<string[]>;

    "getProtectedTokens()"(overrides?: CallOverrides): Promise<string[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    harvest(
      overrides?: CallOverrides
    ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    "harvest()"(
      overrides?: CallOverrides
    ): Promise<{ token: string; amount: BigNumber; 0: string; 1: BigNumber }[]>;

    initialize(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      _pid: BigNumberish,
      _poolSize: BigNumberish,
      _curvePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint64,uint256,uint8,address)"(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      _pid: BigNumberish,
      _poolSize: BigNumberish,
      _curvePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isProtectedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isProtectedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTendable(overrides?: CallOverrides): Promise<boolean>;

    "isTendable()"(overrides?: CallOverrides): Promise<boolean>;

    lastHarvestTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastHarvestTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lendingPool(overrides?: CallOverrides): Promise<string>;

    "lendingPool()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolSize(overrides?: CallOverrides): Promise<number>;

    "poolSize()"(overrides?: CallOverrides): Promise<number>;

    pull(overrides?: CallOverrides): Promise<BigNumber>;

    "pull()"(overrides?: CallOverrides): Promise<BigNumber>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalMaxDeviationThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tend(
      overrides?: CallOverrides
    ): Promise<{
      crvTended: BigNumber;
      cvxTended: BigNumber;
      cvxCrvTended: BigNumber;
      extraRewardsTended: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "tend()"(
      overrides?: CallOverrides
    ): Promise<{
      crvTended: BigNumber;
      cvxTended: BigNumber;
      cvxCrvTended: BigNumber;
      extraRewardsTended: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    tranche(overrides?: CallOverrides): Promise<BigNumber>;

    "tranche()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    vToken(overrides?: CallOverrides): Promise<string>;

    "vToken()"(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<void>;

    withdrawOther(_asset: string, overrides?: CallOverrides): Promise<void>;

    "withdrawOther(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalMaxDeviationThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawalMaxDeviationThreshold()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Initialized(version: null): EventFilter;

    Paused(account: null): EventFilter;

    SetWithdrawalMaxDeviationThreshold(
      newMaxDeviationThreshold: null
    ): EventFilter;

    StrategyPullFromLendingPool(lendingPool: null, amount: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    LEFTOVER(overrides?: CallOverrides): Promise<BigNumber>;

    "LEFTOVER()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    __BaseStrategy_init(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__BaseStrategy_init(address,address,uint64)"(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "addressProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    autoCompoundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "autoCompoundRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    averageR(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "averageR(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseRewardsPool(overrides?: CallOverrides): Promise<BigNumber>;

    "baseRewardsPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "baseStrategyVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    booster(overrides?: CallOverrides): Promise<BigNumber>;

    "booster()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAverageRate(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateAverageRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    crvToken(overrides?: CallOverrides): Promise<BigNumber>;

    "crvToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    curvePool(overrides?: CallOverrides): Promise<BigNumber>;

    "curvePool()"(overrides?: CallOverrides): Promise<BigNumber>;

    curvePoolTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "curvePoolTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curveTokenBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "curveTokenBalances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cvxToken(overrides?: CallOverrides): Promise<BigNumber>;

    "cvxToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    emitNonProtectedToken(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emitNonProtectedToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ethNative(overrides?: CallOverrides): Promise<BigNumber>;

    "ethNative()"(overrides?: CallOverrides): Promise<BigNumber>;

    extraRewardsTended(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extraRewardsTended(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extraTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProtectedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getProtectedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: Overrides): Promise<BigNumber>;

    "harvest()"(overrides?: Overrides): Promise<BigNumber>;

    initialize(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      _pid: BigNumberish,
      _poolSize: BigNumberish,
      _curvePool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint64,uint256,uint8,address)"(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      _pid: BigNumberish,
      _poolSize: BigNumberish,
      _curvePool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isProtectedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isProtectedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTendable(overrides?: CallOverrides): Promise<BigNumber>;

    "isTendable()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastHarvestTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    "lendingPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolSize(overrides?: CallOverrides): Promise<BigNumber>;

    "poolSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    pull(overrides?: Overrides): Promise<BigNumber>;

    "pull()"(overrides?: Overrides): Promise<BigNumber>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWithdrawalMaxDeviationThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tend(overrides?: Overrides): Promise<BigNumber>;

    "tend()"(overrides?: Overrides): Promise<BigNumber>;

    tranche(overrides?: CallOverrides): Promise<BigNumber>;

    "tranche()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    vToken(overrides?: CallOverrides): Promise<BigNumber>;

    "vToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides): Promise<BigNumber>;

    "withdrawAll()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawOther(_asset: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawOther(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawalMaxDeviationThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawalMaxDeviationThreshold()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LEFTOVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LEFTOVER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __BaseStrategy_init(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__BaseStrategy_init(address,address,uint64)"(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autoCompoundRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "autoCompoundRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    averageR(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "averageR(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOf()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfWant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRewardsPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseRewardsPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseStrategyVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseStrategyVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    booster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "booster()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateAverageRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateAverageRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crvToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crvToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curvePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curvePool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curvePoolTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curvePoolTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curveTokenBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curveTokenBalances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cvxToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cvxToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emitNonProtectedToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emitNonProtectedToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ethNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethNative()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraRewardsTended(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extraRewardsTended(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extraTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtectedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProtectedTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "harvest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initialize(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      _pid: BigNumberish,
      _poolSize: BigNumberish,
      _curvePool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint64,uint256,uint8,address)"(
      _addressProvider: string,
      _underlying: string,
      _tranche: BigNumberish,
      _pid: BigNumberish,
      _poolSize: BigNumberish,
      _curvePool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isProtectedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isProtectedToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTendable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isTendable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastHarvestTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastHarvestTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendingPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pull(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pull()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWithdrawalMaxDeviationThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tend(overrides?: Overrides): Promise<PopulatedTransaction>;

    "tend()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    tranche(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tranche()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    vToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawOther(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawOther(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawalMaxDeviationThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalMaxDeviationThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
