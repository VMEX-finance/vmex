/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UniV2OracleInterface extends ethers.utils.Interface {
  functions: {
    "calculate_lp_token_price(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "get_lp_price(address,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculate_lp_token_price",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_lp_price",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculate_lp_token_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_lp_price",
    data: BytesLike
  ): Result;

  events: {};
}

export class UniV2Oracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UniV2OracleInterface;

  functions: {
    calculate_lp_token_price(
      total_supply: BigNumberish,
      price0: BigNumberish,
      price1: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calculate_lp_token_price(uint256,uint256,uint256,uint256,uint256)"(
      total_supply: BigNumberish,
      price0: BigNumberish,
      price1: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    get_lp_price(
      lp_token: string,
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "get_lp_price(address,uint256[])"(
      lp_token: string,
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  calculate_lp_token_price(
    total_supply: BigNumberish,
    price0: BigNumberish,
    price1: BigNumberish,
    reserve0: BigNumberish,
    reserve1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculate_lp_token_price(uint256,uint256,uint256,uint256,uint256)"(
    total_supply: BigNumberish,
    price0: BigNumberish,
    price1: BigNumberish,
    reserve0: BigNumberish,
    reserve1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_lp_price(
    lp_token: string,
    prices: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "get_lp_price(address,uint256[])"(
    lp_token: string,
    prices: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calculate_lp_token_price(
      total_supply: BigNumberish,
      price0: BigNumberish,
      price1: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculate_lp_token_price(uint256,uint256,uint256,uint256,uint256)"(
      total_supply: BigNumberish,
      price0: BigNumberish,
      price1: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_lp_price(
      lp_token: string,
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_lp_price(address,uint256[])"(
      lp_token: string,
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calculate_lp_token_price(
      total_supply: BigNumberish,
      price0: BigNumberish,
      price1: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculate_lp_token_price(uint256,uint256,uint256,uint256,uint256)"(
      total_supply: BigNumberish,
      price0: BigNumberish,
      price1: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_lp_price(
      lp_token: string,
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_lp_price(address,uint256[])"(
      lp_token: string,
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculate_lp_token_price(
      total_supply: BigNumberish,
      price0: BigNumberish,
      price1: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculate_lp_token_price(uint256,uint256,uint256,uint256,uint256)"(
      total_supply: BigNumberish,
      price0: BigNumberish,
      price1: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_lp_price(
      lp_token: string,
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get_lp_price(address,uint256[])"(
      lp_token: string,
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
