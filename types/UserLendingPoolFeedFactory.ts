/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { UserLendingPoolFeed } from "./UserLendingPoolFeed";

export class UserLendingPoolFeedFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    user: string,
    pool: string,
    overrides?: Overrides
  ): Promise<UserLendingPoolFeed> {
    return super.deploy(
      user,
      pool,
      overrides || {}
    ) as Promise<UserLendingPoolFeed>;
  }
  getDeployTransaction(
    user: string,
    pool: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(user, pool, overrides || {});
  }
  attach(address: string): UserLendingPoolFeed {
    return super.attach(address) as UserLendingPoolFeed;
  }
  connect(signer: Signer): UserLendingPoolFeedFactory {
    return super.connect(signer) as UserLendingPoolFeedFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserLendingPoolFeed {
    return new Contract(address, _abi, signerOrProvider) as UserLendingPoolFeed;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161030d38038061030d83398101604081905261002f916101e1565b60408051600380825260808201909252600091816020015b61004f6101a7565b81526020019060019003908161004757905050905060005b60038160ff16101561017a57600080600080600080886001600160a01b03166360e963898b896040518363ffffffff1660e01b81526004016100aa92919061025c565b60c06040518083038186803b1580156100c257600080fd5b505afa1580156100d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fa9190610213565b9550955095509550955095506040518060c0016040528087815260200186815260200185815260200184815260200183815260200182815250888860ff168151811061015657634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050505050508080610172906102e0565b915050610067565b5060008160405160200161018e9190610278565b6040516020818303038152906040529050805181602001f35b6040518060c001604052806006906020820280368337509192915050565b80516001600160a01b03811681146101dc57600080fd5b919050565b600080604083850312156101f3578182fd5b6101fc836101c5565b915061020a602084016101c5565b90509250929050565b60008060008060008060c0878903121561022b578182fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6001600160a01b0392909216825260ff16602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156102d457835183875b60068110156102be578251825291870191908701906001016102a1565b5050509284019260c09290920191600101610294565b50909695505050505050565b600060ff821660ff81141561030357634e487b7160e01b82526011600452602482fd5b6001019291505056fe";
