{"id":"3cb46b291ffbaa8cf63a71b730c861f4","_format":"hh-sol-build-info-1","solcVersion":"0.8.0","solcLongVersion":"0.8.0+commit.c7dfd78e","input":{"language":"Solidity","sources":{"contracts/oracles/CurveOracleV2.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport {ICurvePool} from \"./interfaces/ICurvePoolV1.sol\";\nimport {ICurveOracle} from \"./interfaces/ICurveOracle.sol\";\nimport {vMath} from \"./libs/vMath.sol\";\n\ncontract CurveOracleV2 is ICurveOracle {\n    function get_price(address curve_pool, uint256[] memory prices)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        uint256 virtual_price = ICurvePool(curve_pool).get_virtual_price();\n\n        uint256 lp_price = calculate_v2_token_price(\n            uint8(prices.length),\n            virtual_price,\n            prices\n        );\n\n        return lp_price;\n    }\n\n    //returns n_token * vp * (p1 * p2 * p3) ^1/n\n    //n should only ever be 2, 3, or 4\n    //returns the lp_price scaled by 1e36, so scale down by 1e36\n    function calculate_v2_token_price(\n        uint8 n,\n        uint256 virtual_price,\n        uint256[] memory prices\n    ) internal pure returns (uint256) {\n        uint256 product = vMath.product(prices);\n        uint256 geo_mean = vMath.geometric_mean(n, product);\n        return (n * virtual_price * geo_mean) / 10**18; //since virtual price has 18 decimals\n    }\n}\n"},"contracts/oracles/interfaces/ICurvePoolV1.sol":{"content":"pragma solidity >=0.8.0;\n\ninterface ICurvePool {\n    function get_virtual_price() external view returns (uint256);\n}\n"},"contracts/oracles/interfaces/ICurveOracle.sol":{"content":"pragma solidity >=0.8.0;\n\ninterface ICurveOracle {\n    function get_price(address curve_pool, uint256[] memory prices)\n        external\n        view\n        returns (uint256);\n}\n"},"contracts/oracles/libs/vMath.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {FixedPointMathLib} from \"./FixedPointMathLib.sol\";\nimport {IntegralMath} from \"./IntegralMath.sol\";\n\nlibrary vMath {\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function min(uint256[] calldata array) external pure returns (uint256) {\n        uint256 min = array[0];\n        for (uint8 i = 1; i < array.length; i++) {\n            if (min > array[i]) {\n                min = array[i];\n            }\n        }\n        return min;\n    }\n\n    function product(uint256[] calldata nums) external pure returns (uint256) {\n        uint256 product = nums[0];\n        for (uint256 i = 1; i < nums.length; i++) {\n            product *= nums[i];\n        }\n        return product;\n    }\n\n    //limited to curve pools only, either 2 or 3 assets (mostly 2)\n    function geometric_mean(uint8 n, uint256 product)\n        external\n        pure\n        returns (uint256)\n    {\n        if (n == 2) {\n            return FixedPointMathLib.sqrt(product);\n        } else {\n            //n == 3\n            return IntegralMath.floorCbrt(product);\n        }\n    }\n}\n"},"contracts/oracles/libs/FixedPointMathLib.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(\n                and(\n                    iszero(iszero(denominator)),\n                    or(iszero(x), eq(div(z, x), y))\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            // Divide z by the denominator.\n            z := div(z, denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(\n                and(\n                    iszero(iszero(denominator)),\n                    or(iszero(x), eq(div(z, x), y))\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            // First, divide z - 1 by the denominator and add 1.\n            // We allow z - 1 to underflow if z is 0, because we multiply the\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z) // Like multiplying by 2 ** 64.\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z) // Like multiplying by 2 ** 32.\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z) // Like multiplying by 2 ** 16.\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z) // Like multiplying by 2 ** 8.\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z) // Like multiplying by 2 ** 4.\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z) // Like multiplying by 2 ** 2.\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n}\n"},"contracts/oracles/libs/IntegralMath.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity >=0.8.0;\n\nimport \"./Uint.sol\";\n\nlibrary IntegralMath {\n    /**\n     * @dev Compute the largest integer smaller than or equal to the binary logarithm of `n`\n     */\n    function floorLog2(uint256 n) internal pure returns (uint8) {\n        unchecked {\n            uint8 res = 0;\n\n            if (n < 256) {\n                // at most 8 iterations\n                while (n > 1) {\n                    n >>= 1;\n                    res += 1;\n                }\n            } else {\n                // exactly 8 iterations\n                for (uint8 s = 128; s > 0; s >>= 1) {\n                    if (n >= 1 << s) {\n                        n >>= s;\n                        res |= s;\n                    }\n                }\n            }\n\n            return res;\n        }\n    }\n\n    /**\n     * @dev Compute the largest integer smaller than or equal to the square root of `n`\n     */\n    function floorSqrt(uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n > 0) {\n                uint256 x = n / 2 + 1;\n                uint256 y = (x + n / x) / 2;\n                while (x > y) {\n                    x = y;\n                    y = (x + n / x) / 2;\n                }\n                return x;\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * @dev Compute the smallest integer larger than or equal to the square root of `n`\n     */\n    function ceilSqrt(uint256 n) internal pure returns (uint256) {\n        unchecked {\n            uint256 x = floorSqrt(n);\n            return x**2 == n ? x : x + 1;\n        }\n    }\n\n    /**\n     * @dev Compute the largest integer smaller than or equal to the cubic root of `n`\n     */\n    function floorCbrt(uint256 n) internal pure returns (uint256) {\n        unchecked {\n            uint256 x = 0;\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\n                x <<= 1;\n                uint256 z = 3 * x * (x + 1) + 1;\n                if (n / y >= z) {\n                    n -= y * z;\n                    x += 1;\n                }\n            }\n            return x;\n        }\n    }\n\n    /**\n     * @dev Compute the smallest integer larger than or equal to the cubic root of `n`\n     */\n    function ceilCbrt(uint256 n) internal pure returns (uint256) {\n        unchecked {\n            uint256 x = floorCbrt(n);\n            return x**3 == n ? x : x + 1;\n        }\n    }\n\n    /**\n     * @dev Compute the nearest integer to the quotient of `n` and `d` (or `n / d`)\n     */\n    function roundDiv(uint256 n, uint256 d) internal pure returns (uint256) {\n        unchecked {\n            return n / d + (n % d) / (d - d / 2);\n        }\n    }\n\n    /**\n     * @dev Compute the largest integer smaller than or equal to `x * y / z`\n     */\n    function mulDivF(\n        uint256 x,\n        uint256 y,\n        uint256 z\n    ) internal pure returns (uint256) {\n        unchecked {\n            (uint256 xyh, uint256 xyl) = mul512(x, y);\n            if (xyh == 0) {\n                // `x * y < 2 ^ 256`\n                return xyl / z;\n            }\n            if (xyh < z) {\n                // `x * y / z < 2 ^ 256`\n                uint256 m = mulMod(x, y, z); // `m = x * y % z`\n                (uint256 nh, uint256 nl) = sub512(xyh, xyl, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\n                if (nh == 0) {\n                    // `n < 2 ^ 256`\n                    return nl / z;\n                }\n                uint256 p = unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\n                uint256 q = div512(nh, nl, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\n                uint256 r = inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\n                return unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\n            }\n            revert(); // `x * y / z >= 2 ^ 256`\n        }\n    }\n\n    /**\n     * @dev Compute the smallest integer larger than or equal to `x * y / z`\n     */\n    function mulDivC(\n        uint256 x,\n        uint256 y,\n        uint256 z\n    ) internal pure returns (uint256) {\n        unchecked {\n            uint256 w = mulDivF(x, y, z);\n            if (mulMod(x, y, z) > 0) return safeAdd(w, 1);\n            return w;\n        }\n    }\n\n    /**\n     * @dev Compute the value of `x * y`\n     */\n    function mul512(uint256 x, uint256 y)\n        private\n        pure\n        returns (uint256, uint256)\n    {\n        unchecked {\n            uint256 p = mulModMax(x, y);\n            uint256 q = unsafeMul(x, y);\n            if (p >= q) return (p - q, q);\n            return (unsafeSub(p, q) - 1, q);\n        }\n    }\n\n    /**\n     * @dev Compute the value of `2 ^ 256 * xh + xl - y`, where `2 ^ 256 * xh + xl >= y`\n     */\n    function sub512(\n        uint256 xh,\n        uint256 xl,\n        uint256 y\n    ) private pure returns (uint256, uint256) {\n        unchecked {\n            if (xl >= y) return (xh, xl - y);\n            return (xh - 1, unsafeSub(xl, y));\n        }\n    }\n\n    /**\n     * @dev Compute the value of `(2 ^ 256 * xh + xl) / pow2n`, where `xl` is divisible by `pow2n`\n     */\n    function div512(\n        uint256 xh,\n        uint256 xl,\n        uint256 pow2n\n    ) private pure returns (uint256) {\n        unchecked {\n            uint256 pow2nInv = unsafeAdd(unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\n            return unsafeMul(xh, pow2nInv) | (xl / pow2n); // `(xh << (256 - n)) | (xl >> n)`\n        }\n    }\n\n    /**\n     * @dev Compute the inverse of `d` modulo `2 ^ 256`, where `d` is congruent to `1` modulo `2`\n     */\n    function inv256(uint256 d) private pure returns (uint256) {\n        unchecked {\n            // approximate the root of `f(x) = 1 / x - d` using the newton–raphson convergence method\n            uint256 x = 1;\n            for (uint256 i = 0; i < 8; ++i)\n                x = unsafeMul(x, unsafeSub(2, unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\n            return x;\n        }\n    }\n}\n"},"contracts/oracles/libs/Uint.sol":{"content":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity >=0.8.0;\n\nuint256 constant MAX_VAL = type(uint256).max;\n\n// reverts on overflow\nfunction safeAdd(uint256 x, uint256 y) pure returns (uint256) {\n    return x + y;\n}\n\n// does not revert on overflow\nfunction unsafeAdd(uint256 x, uint256 y) pure returns (uint256) {\n    unchecked {\n        return x + y;\n    }\n}\n\n// does not revert on overflow\nfunction unsafeSub(uint256 x, uint256 y) pure returns (uint256) {\n    unchecked {\n        return x - y;\n    }\n}\n\n// does not revert on overflow\nfunction unsafeMul(uint256 x, uint256 y) pure returns (uint256) {\n    unchecked {\n        return x * y;\n    }\n}\n\n// does not overflow\nfunction mulModMax(uint256 x, uint256 y) pure returns (uint256) {\n    unchecked {\n        return mulmod(x, y, MAX_VAL);\n    }\n}\n\n// does not overflow\nfunction mulMod(\n    uint256 x,\n    uint256 y,\n    uint256 z\n) pure returns (uint256) {\n    unchecked {\n        return mulmod(x, y, z);\n    }\n}\n"},"contracts/oracles/ConvexOracleV2.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n//import {IBooster} from \"../utils/interfaces/IBooster.sol\";\nimport {CurveOracleV2} from \"./CurveOracleV2.sol\";\nimport {FixedPointMathLib} from \"./libs/FixedPointMathLib.sol\";\nimport {IERC20} from \"./interfaces/IERC20.sol\";\n\n//assuming we can price Convex pools like UniV2 pools more than like Curve pools\ncontract ConvexOracleV2 {\n    //address private constant BOOSTER = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31; //convex deposit contract\n    CurveOracleV2 private curve_oracle;\n\n    //get total underlying in USD and divide by num of tokens\n    //use external script to get pid by curve lp token\n    constructor(CurveOracleV2 _curve_oracle) {\n        curve_oracle = _curve_oracle;\n    }\n\n    //get curve lp tokens price, get convex lp token \"depositToken\", divide\n    function get_convex_price(\n        address curve_pool,\n        uint256[] memory prices,\n        uint16 pid,\n        address convex_lp,\n        address curve_lp\n    ) external view returns (uint256) {\n        uint256 curve_lp_price = curve_oracle.get_price(curve_pool, prices); //returns 1e36 scaled uint\n        //\tuint256 curve_supply = IERC20(curve_lp).totalSupply();\n        //\tuint256 convex_supply = IERC20(convex_lp).totalSupply();\n\n        //\tuint256 convex_price = calculate_convex_price(\n        //\t\tcurve_lp_price,\n        //\t\tcurve_supply,\n        //\t\tconvex_supply\n        //\t);\n\n        return curve_lp_price;\n    }\n\n    //not sure how vulnerable this is, check back later\n    function calculate_convex_price(\n        uint256 curve_lp_price,\n        uint256 curve_supply,\n        uint256 convex_supply\n    ) internal pure returns (uint256) {\n        return (curve_lp_price * curve_supply) / convex_supply;\n    }\n}\n"},"contracts/oracles/interfaces/IERC20.sol":{"content":"pragma solidity >=0.8.0;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"},"contracts/oracles/ConvexOracle.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n//import {IBooster} from \"../utils/interfaces/IBooster.sol\";\nimport {CurveOracleV1} from \"./CurveOracle.sol\";\nimport {IERC20} from \"./interfaces/IERC20.sol\";\n\ncontract ConvexOracle {\n    //address private constant BOOSTER = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31; //convex deposit contract\n\n    CurveOracleV1 private curve_oracle;\n\n    //get curve lp tokens price, get convex lp token \"depositToken\", divide\n    function get_convex_price(\n        address curve_pool,\n        uint256[] memory prices,\n        uint16 pid,\n        address convex_lp,\n        address curve_lp\n    ) external view returns (uint256) {\n        uint256 curve_lp_price = curve_oracle.get_price(curve_pool, prices); //returns 1e36 scaled uint\n        uint256 curve_supply = IERC20(curve_lp).totalSupply();\n        uint256 convex_supply = IERC20(convex_lp).totalSupply();\n\n        uint256 convex_price = calculate_convex_price(\n            curve_lp_price,\n            curve_supply,\n            convex_supply\n        );\n\n        return convex_price;\n    }\n\n    function calculate_convex_price(\n        uint256 curve_lp_price,\n        uint256 curve_supply,\n        uint256 convex_supply\n    ) internal pure returns (uint256) {\n        return (curve_lp_price * curve_supply) / convex_supply;\n    }\n}\n"},"contracts/oracles/CurveOracle.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport {ICurvePool} from \"./interfaces/ICurvePoolV1.sol\";\nimport {ICurveOracle} from \"./interfaces/ICurveOracle.sol\";\nimport {vMath} from \"./libs/vMath.sol\";\n\n//used for all curveV1 tokens, no need to redeploy\ncontract CurveOracleV1 is ICurveOracle {\n    //where total supply is the total supply of the LP token in the pools calculated using the virtual price\n    function get_price(address curve_pool, uint256[] memory prices)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        uint256 virtual_price = ICurvePool(curve_pool).get_virtual_price();\n\n        uint256 lp_price = calculate_v1_token_price(virtual_price, prices);\n\n        return lp_price;\n    }\n\n    //where virtual price is the price of the pool in USD\n    //returns lp_value = virtual price x min(prices);\n    function calculate_v1_token_price(\n        uint256 virtual_price,\n        uint256[] memory prices\n    ) public pure returns (uint256) {\n        uint256 min = vMath.min(prices);\n        return virtual_price * min;\n    }\n}\n"},"contracts/mocks/tokens/CurvePoolMocked.sol":{"content":"// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.8.0;\n\nimport {ICurvePool} from \"../../oracles/interfaces/ICurvePoolV1.sol\";\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract CurvePoolMocked is ICurvePool {\n    uint256 virtual_price;\n\n    constructor(\n        uint256 _virtual_price\n    ) public {\n        if(_virtual_price==0){\n            _virtual_price = 1020000000000000000; //1.02 with 18 decimals\n        }\n        virtual_price = _virtual_price;\n    }\n\n    function get_virtual_price() override external view returns (uint256){\n        return virtual_price; \n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"istanbul","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/oracles/interfaces/ICurveOracle.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/oracles/interfaces/ICurveOracle.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/oracles/interfaces/ICurvePoolV1.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/oracles/interfaces/ICurvePoolV1.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/oracles/interfaces/IERC20.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/oracles/interfaces/IERC20.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/oracles/libs/vMath.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/oracles/libs/vMath.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"8760","formattedMessage":"Warning: This declaration has the same name as another declaration.\n  --> contracts/oracles/libs/vMath.sol:10:9:\n   |\n10 |         uint256 min = array[0];\n   |         ^^^^^^^^^^^\nNote: The other declaration is here:\n --> contracts/oracles/libs/vMath.sol:9:5:\n  |\n9 |     function min(uint256[] calldata array) external pure returns (uint256) {\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This declaration has the same name as another declaration.","secondarySourceLocations":[{"end":507,"file":"contracts/oracles/libs/vMath.sol","message":"The other declaration is here:","start":236}],"severity":"warning","sourceLocation":{"end":328,"file":"contracts/oracles/libs/vMath.sol","start":317},"type":"Warning"},{"component":"general","errorCode":"8760","formattedMessage":"Warning: This declaration has the same name as another declaration.\n  --> contracts/oracles/libs/vMath.sol:20:9:\n   |\n20 |         uint256 product = nums[0];\n   |         ^^^^^^^^^^^^^^^\nNote: The other declaration is here:\n  --> contracts/oracles/libs/vMath.sol:19:5:\n   |\n19 |     function product(uint256[] calldata nums) external pure returns (uint256) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This declaration has the same name as another declaration.","secondarySourceLocations":[{"end":747,"file":"contracts/oracles/libs/vMath.sol","message":"The other declaration is here:","start":513}],"severity":"warning","sourceLocation":{"end":612,"file":"contracts/oracles/libs/vMath.sol","start":597},"type":"Warning"},{"component":"general","errorCode":"8760","formattedMessage":"Warning: This declaration has the same name as another declaration.\n  --> contracts/oracles/libs/vMath.sol:28:38:\n   |\n28 |     function geometric_mean(uint8 n, uint256 product)\n   |                                      ^^^^^^^^^^^^^^^\nNote: The other declaration is here:\n  --> contracts/oracles/libs/vMath.sol:19:5:\n   |\n19 |     function product(uint256[] calldata nums) external pure returns (uint256) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This declaration has the same name as another declaration.","secondarySourceLocations":[{"end":747,"file":"contracts/oracles/libs/vMath.sol","message":"The other declaration is here:","start":513}],"severity":"warning","sourceLocation":{"end":868,"file":"contracts/oracles/libs/vMath.sol","start":853},"type":"Warning"},{"component":"general","errorCode":"2462","formattedMessage":"Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n  --> contracts/mocks/tokens/CurvePoolMocked.sol:13:5:\n   |\n13 |     constructor(\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":486,"file":"contracts/mocks/tokens/CurvePoolMocked.sol","start":267},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/oracles/ConvexOracle.sol:17:9:\n   |\n17 |         uint16 pid,\n   |         ^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":587,"file":"contracts/oracles/ConvexOracle.sol","start":577},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/oracles/ConvexOracleV2.sol:24:9:\n   |\n24 |         uint16 pid,\n   |         ^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":944,"file":"contracts/oracles/ConvexOracleV2.sol","start":934},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/oracles/ConvexOracleV2.sol:25:9:\n   |\n25 |         address convex_lp,\n   |         ^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":971,"file":"contracts/oracles/ConvexOracleV2.sol","start":954},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/oracles/ConvexOracleV2.sol:26:9:\n   |\n26 |         address curve_lp\n   |         ^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":997,"file":"contracts/oracles/ConvexOracleV2.sol","start":981},"type":"Warning"}],"sources":{"contracts/mocks/tokens/CurvePoolMocked.sol":{"ast":{"absolutePath":"contracts/mocks/tokens/CurvePoolMocked.sol","exportedSymbols":{"CurvePoolMocked":[37],"ICurvePool":[353]},"id":38,"license":"agpl-3.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"37:24:0"},{"absolutePath":"contracts/oracles/interfaces/ICurvePoolV1.sol","file":"../../oracles/interfaces/ICurvePoolV1.sol","id":3,"nodeType":"ImportDirective","scope":38,"sourceUnit":354,"src":"63:69:0","symbolAliases":[{"foreign":{"id":2,"name":"ICurvePool","nodeType":"Identifier","overloadedDeclarations":[],"src":"71:10:0","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5,"name":"ICurvePool","nodeType":"IdentifierPath","referencedDeclaration":353,"src":"222:10:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"222:10:0"}],"contractDependencies":[353],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"134:59:0","text":" @title ERC20Mintable\n @dev ERC20 minting logic"},"fullyImplemented":true,"id":37,"linearizedBaseContracts":[37,353],"name":"CurvePoolMocked","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"virtual_price","nodeType":"VariableDeclaration","scope":37,"src":"239:21:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"body":{"id":26,"nodeType":"Block","src":"324:162:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":15,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":13,"name":"_virtual_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"337:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":14,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"353:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"337:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":21,"nodeType":"IfStatement","src":"334:106:0","trueBody":{"id":20,"nodeType":"Block","src":"355:85:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"_virtual_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"369:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31303230303030303030303030303030303030","id":17,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"386:19:0","typeDescriptions":{"typeIdentifier":"t_rational_1020000000000000000_by_1","typeString":"int_const 1020000000000000000"},"value":"1020000000000000000"},"src":"369:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":19,"nodeType":"ExpressionStatement","src":"369:36:0"}]}},{"expression":{"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":22,"name":"virtual_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"449:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":23,"name":"_virtual_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"465:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"449:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":25,"nodeType":"ExpressionStatement","src":"449:30:0"}]},"id":27,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":11,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"mutability":"mutable","name":"_virtual_price","nodeType":"VariableDeclaration","scope":27,"src":"288:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9,"name":"uint256","nodeType":"ElementaryTypeName","src":"288:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"278:38:0"},"returnParameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"324:0:0"},"scope":37,"src":"267:219:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[352],"body":{"id":35,"nodeType":"Block","src":"561:38:0","statements":[{"expression":{"id":33,"name":"virtual_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"578:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":32,"id":34,"nodeType":"Return","src":"571:20:0"}]},"functionSelector":"bb7b8b80","id":36,"implemented":true,"kind":"function","modifiers":[],"name":"get_virtual_price","nodeType":"FunctionDefinition","overrides":{"id":29,"nodeType":"OverrideSpecifier","overrides":[],"src":"521:8:0"},"parameters":{"id":28,"nodeType":"ParameterList","parameters":[],"src":"518:2:0"},"returnParameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":36,"src":"553:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":30,"name":"uint256","nodeType":"ElementaryTypeName","src":"553:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"552:9:0"},"scope":37,"src":"492:107:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":38,"src":"194:407:0"}],"src":"37:565:0"},"id":0},"contracts/oracles/ConvexOracle.sol":{"ast":{"absolutePath":"contracts/oracles/ConvexOracle.sol","exportedSymbols":{"ConvexOracle":[117],"CurveOracleV1":[248],"IERC20":[454]},"id":118,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":39,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"39:24:1"},{"absolutePath":"contracts/oracles/CurveOracle.sol","file":"./CurveOracle.sol","id":41,"nodeType":"ImportDirective","scope":118,"sourceUnit":249,"src":"126:48:1","symbolAliases":[{"foreign":{"id":40,"name":"CurveOracleV1","nodeType":"Identifier","overloadedDeclarations":[],"src":"134:13:1","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/oracles/interfaces/IERC20.sol","file":"./interfaces/IERC20.sol","id":43,"nodeType":"ImportDirective","scope":118,"sourceUnit":455,"src":"175:47:1","symbolAliases":[{"foreign":{"id":42,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"src":"183:6:1","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":117,"linearizedBaseContracts":[117],"name":"ConvexOracle","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":46,"mutability":"mutable","name":"curve_oracle","nodeType":"VariableDeclaration","scope":117,"src":"364:34:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV1_$248","typeString":"contract CurveOracleV1"},"typeName":{"id":45,"nodeType":"UserDefinedTypeName","pathNode":{"id":44,"name":"CurveOracleV1","nodeType":"IdentifierPath","referencedDeclaration":248,"src":"364:13:1"},"referencedDeclaration":248,"src":"364:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV1_$248","typeString":"contract CurveOracleV1"}},"visibility":"private"},{"body":{"id":96,"nodeType":"Block","src":"679:416:1","statements":[{"assignments":[63],"declarations":[{"constant":false,"id":63,"mutability":"mutable","name":"curve_lp_price","nodeType":"VariableDeclaration","scope":96,"src":"689:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":62,"name":"uint256","nodeType":"ElementaryTypeName","src":"689:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":69,"initialValue":{"arguments":[{"id":66,"name":"curve_pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"737:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"749:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":64,"name":"curve_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"714:12:1","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV1_$248","typeString":"contract CurveOracleV1"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"get_price","nodeType":"MemberAccess","referencedDeclaration":225,"src":"714:22:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,uint256[] memory) view external returns (uint256)"}},"id":68,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"714:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"689:67:1"},{"assignments":[71],"declarations":[{"constant":false,"id":71,"mutability":"mutable","name":"curve_supply","nodeType":"VariableDeclaration","scope":96,"src":"793:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":70,"name":"uint256","nodeType":"ElementaryTypeName","src":"793:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":77,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":73,"name":"curve_lp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"823:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":72,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"816:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$454_$","typeString":"type(contract IERC20)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"816:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$454","typeString":"contract IERC20"}},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":361,"src":"816:28:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"816:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"793:53:1"},{"assignments":[79],"declarations":[{"constant":false,"id":79,"mutability":"mutable","name":"convex_supply","nodeType":"VariableDeclaration","scope":96,"src":"856:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":78,"name":"uint256","nodeType":"ElementaryTypeName","src":"856:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":85,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":81,"name":"convex_lp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"887:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":80,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"880:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$454_$","typeString":"type(contract IERC20)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"880:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$454","typeString":"contract IERC20"}},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":361,"src":"880:29:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"880:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"856:55:1"},{"assignments":[87],"declarations":[{"constant":false,"id":87,"mutability":"mutable","name":"convex_price","nodeType":"VariableDeclaration","scope":96,"src":"922:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":86,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":93,"initialValue":{"arguments":[{"id":89,"name":"curve_lp_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"981:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":90,"name":"curve_supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"1009:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":91,"name":"convex_supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"1035:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":88,"name":"calculate_convex_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"945:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"945:113:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"922:136:1"},{"expression":{"id":94,"name":"convex_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1076:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":61,"id":95,"nodeType":"Return","src":"1069:19:1"}]},"functionSelector":"2a417cc7","id":97,"implemented":true,"kind":"function","modifiers":[],"name":"get_convex_price","nodeType":"FunctionDefinition","parameters":{"id":58,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"curve_pool","nodeType":"VariableDeclaration","scope":97,"src":"516:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":47,"name":"address","nodeType":"ElementaryTypeName","src":"516:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51,"mutability":"mutable","name":"prices","nodeType":"VariableDeclaration","scope":97,"src":"544:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":49,"name":"uint256","nodeType":"ElementaryTypeName","src":"544:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":50,"nodeType":"ArrayTypeName","src":"544:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":53,"mutability":"mutable","name":"pid","nodeType":"VariableDeclaration","scope":97,"src":"577:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":52,"name":"uint16","nodeType":"ElementaryTypeName","src":"577:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":55,"mutability":"mutable","name":"convex_lp","nodeType":"VariableDeclaration","scope":97,"src":"597:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":54,"name":"address","nodeType":"ElementaryTypeName","src":"597:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":57,"mutability":"mutable","name":"curve_lp","nodeType":"VariableDeclaration","scope":97,"src":"624:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"506:140:1"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":97,"src":"670:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":59,"name":"uint256","nodeType":"ElementaryTypeName","src":"670:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"669:9:1"},"scope":117,"src":"481:614:1","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":115,"nodeType":"Block","src":"1264:71:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":108,"name":"curve_lp_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"1282:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":109,"name":"curve_supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"1299:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1282:29:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":111,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1281:31:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":112,"name":"convex_supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":103,"src":"1315:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1281:47:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":107,"id":114,"nodeType":"Return","src":"1274:54:1"}]},"id":116,"implemented":true,"kind":"function","modifiers":[],"name":"calculate_convex_price","nodeType":"FunctionDefinition","parameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99,"mutability":"mutable","name":"curve_lp_price","nodeType":"VariableDeclaration","scope":116,"src":"1142:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":98,"name":"uint256","nodeType":"ElementaryTypeName","src":"1142:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":101,"mutability":"mutable","name":"curve_supply","nodeType":"VariableDeclaration","scope":116,"src":"1174:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":103,"mutability":"mutable","name":"convex_supply","nodeType":"VariableDeclaration","scope":116,"src":"1204:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"1204:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1132:99:1"},"returnParameters":{"id":107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":116,"src":"1255:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":105,"name":"uint256","nodeType":"ElementaryTypeName","src":"1255:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1254:9:1"},"scope":117,"src":"1101:234:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":118,"src":"224:1113:1"}],"src":"39:1299:1"},"id":1},"contracts/oracles/ConvexOracleV2.sol":{"ast":{"absolutePath":"contracts/oracles/ConvexOracleV2.sol","exportedSymbols":{"ConvexOracleV2":[186],"CurveOracleV2":[332],"FixedPointMathLib":[573],"IERC20":[454]},"id":187,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":119,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"39:24:2"},{"absolutePath":"contracts/oracles/CurveOracleV2.sol","file":"./CurveOracleV2.sol","id":121,"nodeType":"ImportDirective","scope":187,"sourceUnit":333,"src":"126:50:2","symbolAliases":[{"foreign":{"id":120,"name":"CurveOracleV2","nodeType":"Identifier","overloadedDeclarations":[],"src":"134:13:2","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/oracles/libs/FixedPointMathLib.sol","file":"./libs/FixedPointMathLib.sol","id":123,"nodeType":"ImportDirective","scope":187,"sourceUnit":574,"src":"177:63:2","symbolAliases":[{"foreign":{"id":122,"name":"FixedPointMathLib","nodeType":"Identifier","overloadedDeclarations":[],"src":"185:17:2","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/oracles/interfaces/IERC20.sol","file":"./interfaces/IERC20.sol","id":125,"nodeType":"ImportDirective","scope":187,"sourceUnit":455,"src":"241:47:2","symbolAliases":[{"foreign":{"id":124,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"src":"249:6:2","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":186,"linearizedBaseContracts":[186],"name":"ConvexOracleV2","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":128,"mutability":"mutable","name":"curve_oracle","nodeType":"VariableDeclaration","scope":186,"src":"512:34:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV2_$332","typeString":"contract CurveOracleV2"},"typeName":{"id":127,"nodeType":"UserDefinedTypeName","pathNode":{"id":126,"name":"CurveOracleV2","nodeType":"IdentifierPath","referencedDeclaration":332,"src":"512:13:2"},"referencedDeclaration":332,"src":"512:13:2","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV2_$332","typeString":"contract CurveOracleV2"}},"visibility":"private"},{"body":{"id":138,"nodeType":"Block","src":"711:45:2","statements":[{"expression":{"id":136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":134,"name":"curve_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"721:12:2","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV2_$332","typeString":"contract CurveOracleV2"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":135,"name":"_curve_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"736:13:2","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV2_$332","typeString":"contract CurveOracleV2"}},"src":"721:28:2","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV2_$332","typeString":"contract CurveOracleV2"}},"id":137,"nodeType":"ExpressionStatement","src":"721:28:2"}]},"id":139,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"_curve_oracle","nodeType":"VariableDeclaration","scope":139,"src":"682:27:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV2_$332","typeString":"contract CurveOracleV2"},"typeName":{"id":130,"nodeType":"UserDefinedTypeName","pathNode":{"id":129,"name":"CurveOracleV2","nodeType":"IdentifierPath","referencedDeclaration":332,"src":"682:13:2"},"referencedDeclaration":332,"src":"682:13:2","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV2_$332","typeString":"contract CurveOracleV2"}},"visibility":"internal"}],"src":"681:29:2"},"returnParameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"711:0:2"},"scope":186,"src":"670:86:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":165,"nodeType":"Block","src":"1036:430:2","statements":[{"assignments":[156],"declarations":[{"constant":false,"id":156,"mutability":"mutable","name":"curve_lp_price","nodeType":"VariableDeclaration","scope":165,"src":"1046:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":155,"name":"uint256","nodeType":"ElementaryTypeName","src":"1046:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":162,"initialValue":{"arguments":[{"id":159,"name":"curve_pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"1094:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":160,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"1106:6:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":157,"name":"curve_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"1071:12:2","typeDescriptions":{"typeIdentifier":"t_contract$_CurveOracleV2_$332","typeString":"contract CurveOracleV2"}},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"get_price","nodeType":"MemberAccess","referencedDeclaration":292,"src":"1071:22:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,uint256[] memory) view external returns (uint256)"}},"id":161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1071:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1046:67:2"},{"expression":{"id":163,"name":"curve_lp_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1445:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":154,"id":164,"nodeType":"Return","src":"1438:21:2"}]},"functionSelector":"2a417cc7","id":166,"implemented":true,"kind":"function","modifiers":[],"name":"get_convex_price","nodeType":"FunctionDefinition","parameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"curve_pool","nodeType":"VariableDeclaration","scope":166,"src":"873:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":140,"name":"address","nodeType":"ElementaryTypeName","src":"873:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":144,"mutability":"mutable","name":"prices","nodeType":"VariableDeclaration","scope":166,"src":"901:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":142,"name":"uint256","nodeType":"ElementaryTypeName","src":"901:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":143,"nodeType":"ArrayTypeName","src":"901:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":146,"mutability":"mutable","name":"pid","nodeType":"VariableDeclaration","scope":166,"src":"934:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":145,"name":"uint16","nodeType":"ElementaryTypeName","src":"934:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"convex_lp","nodeType":"VariableDeclaration","scope":166,"src":"954:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":147,"name":"address","nodeType":"ElementaryTypeName","src":"954:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":150,"mutability":"mutable","name":"curve_lp","nodeType":"VariableDeclaration","scope":166,"src":"981:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":149,"name":"address","nodeType":"ElementaryTypeName","src":"981:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"863:140:2"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":166,"src":"1027:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":152,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:9:2"},"scope":186,"src":"838:628:2","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":184,"nodeType":"Block","src":"1691:71:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":177,"name":"curve_lp_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"1709:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":178,"name":"curve_supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"1726:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1709:29:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":180,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1708:31:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":181,"name":"convex_supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"1742:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1708:47:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":176,"id":183,"nodeType":"Return","src":"1701:54:2"}]},"id":185,"implemented":true,"kind":"function","modifiers":[],"name":"calculate_convex_price","nodeType":"FunctionDefinition","parameters":{"id":173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":168,"mutability":"mutable","name":"curve_lp_price","nodeType":"VariableDeclaration","scope":185,"src":"1569:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"1569:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"curve_supply","nodeType":"VariableDeclaration","scope":185,"src":"1601:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"1601:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":172,"mutability":"mutable","name":"convex_supply","nodeType":"VariableDeclaration","scope":185,"src":"1631:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":171,"name":"uint256","nodeType":"ElementaryTypeName","src":"1631:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1559:99:2"},"returnParameters":{"id":176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":185,"src":"1682:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1682:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1681:9:2"},"scope":186,"src":"1528:234:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":187,"src":"371:1393:2"}],"src":"39:1726:2"},"id":2},"contracts/oracles/CurveOracle.sol":{"ast":{"absolutePath":"contracts/oracles/CurveOracle.sol","exportedSymbols":{"CurveOracleV1":[248],"ICurveOracle":[345],"ICurvePool":[353],"vMath":[1356]},"id":249,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":188,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"39:24:3"},{"absolutePath":"contracts/oracles/interfaces/ICurvePoolV1.sol","file":"./interfaces/ICurvePoolV1.sol","id":190,"nodeType":"ImportDirective","scope":249,"sourceUnit":354,"src":"65:57:3","symbolAliases":[{"foreign":{"id":189,"name":"ICurvePool","nodeType":"Identifier","overloadedDeclarations":[],"src":"73:10:3","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/oracles/interfaces/ICurveOracle.sol","file":"./interfaces/ICurveOracle.sol","id":192,"nodeType":"ImportDirective","scope":249,"sourceUnit":346,"src":"123:59:3","symbolAliases":[{"foreign":{"id":191,"name":"ICurveOracle","nodeType":"Identifier","overloadedDeclarations":[],"src":"131:12:3","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/oracles/libs/vMath.sol","file":"./libs/vMath.sol","id":194,"nodeType":"ImportDirective","scope":249,"sourceUnit":1357,"src":"183:39:3","symbolAliases":[{"foreign":{"id":193,"name":"vMath","nodeType":"Identifier","overloadedDeclarations":[],"src":"191:5:3","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":195,"name":"ICurveOracle","nodeType":"IdentifierPath","referencedDeclaration":345,"src":"301:12:3"},"id":196,"nodeType":"InheritanceSpecifier","src":"301:12:3"}],"contractDependencies":[345],"contractKind":"contract","fullyImplemented":true,"id":248,"linearizedBaseContracts":[248,345],"name":"CurveOracleV1","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[344],"body":{"id":224,"nodeType":"Block","src":"570:186:3","statements":[{"assignments":[208],"declarations":[{"constant":false,"id":208,"mutability":"mutable","name":"virtual_price","nodeType":"VariableDeclaration","scope":224,"src":"580:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":207,"name":"uint256","nodeType":"ElementaryTypeName","src":"580:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":214,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":210,"name":"curve_pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"615:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":209,"name":"ICurvePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"604:10:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ICurvePool_$353_$","typeString":"type(contract ICurvePool)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"604:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ICurvePool_$353","typeString":"contract ICurvePool"}},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"get_virtual_price","nodeType":"MemberAccess","referencedDeclaration":352,"src":"604:40:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"604:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"580:66:3"},{"assignments":[216],"declarations":[{"constant":false,"id":216,"mutability":"mutable","name":"lp_price","nodeType":"VariableDeclaration","scope":224,"src":"657:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":215,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":221,"initialValue":{"arguments":[{"id":218,"name":"virtual_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"701:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":219,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"716:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":217,"name":"calculate_v1_token_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"676:24:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256[] memory) pure returns (uint256)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"676:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"657:66:3"},{"expression":{"id":222,"name":"lp_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"741:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":206,"id":223,"nodeType":"Return","src":"734:15:3"}]},"functionSelector":"6dcb6a32","id":225,"implemented":true,"kind":"function","modifiers":[],"name":"get_price","nodeType":"FunctionDefinition","overrides":{"id":203,"nodeType":"OverrideSpecifier","overrides":[],"src":"531:8:3"},"parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"curve_pool","nodeType":"VariableDeclaration","scope":225,"src":"448:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":197,"name":"address","nodeType":"ElementaryTypeName","src":"448:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"prices","nodeType":"VariableDeclaration","scope":225,"src":"468:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":199,"name":"uint256","nodeType":"ElementaryTypeName","src":"468:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":200,"nodeType":"ArrayTypeName","src":"468:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"447:45:3"},"returnParameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":225,"src":"557:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":204,"name":"uint256","nodeType":"ElementaryTypeName","src":"557:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"556:9:3"},"scope":248,"src":"429:327:3","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":246,"nodeType":"Block","src":"1008:84:3","statements":[{"assignments":[236],"declarations":[{"constant":false,"id":236,"mutability":"mutable","name":"min","nodeType":"VariableDeclaration","scope":246,"src":"1018:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":235,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":241,"initialValue":{"arguments":[{"id":239,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"1042:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":237,"name":"vMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"1032:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_vMath_$1356_$","typeString":"type(library vMath)"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"min","nodeType":"MemberAccess","referencedDeclaration":1293,"src":"1032:9:3","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[] memory) pure returns (uint256)"}},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1032:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1018:31:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":242,"name":"virtual_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"1066:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":243,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"1082:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1066:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":234,"id":245,"nodeType":"Return","src":"1059:26:3"}]},"functionSelector":"81651c17","id":247,"implemented":true,"kind":"function","modifiers":[],"name":"calculate_v1_token_price","nodeType":"FunctionDefinition","parameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"virtual_price","nodeType":"VariableDeclaration","scope":247,"src":"917:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":226,"name":"uint256","nodeType":"ElementaryTypeName","src":"917:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":230,"mutability":"mutable","name":"prices","nodeType":"VariableDeclaration","scope":247,"src":"948:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":228,"name":"uint256","nodeType":"ElementaryTypeName","src":"948:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":229,"nodeType":"ArrayTypeName","src":"948:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"907:70:3"},"returnParameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":247,"src":"999:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"999:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"998:9:3"},"scope":248,"src":"874:218:3","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":249,"src":"275:819:3"}],"src":"39:1056:3"},"id":3},"contracts/oracles/CurveOracleV2.sol":{"ast":{"absolutePath":"contracts/oracles/CurveOracleV2.sol","exportedSymbols":{"CurveOracleV2":[332],"ICurveOracle":[345],"ICurvePool":[353],"vMath":[1356]},"id":333,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":250,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"39:24:4"},{"absolutePath":"contracts/oracles/interfaces/ICurvePoolV1.sol","file":"./interfaces/ICurvePoolV1.sol","id":252,"nodeType":"ImportDirective","scope":333,"sourceUnit":354,"src":"65:57:4","symbolAliases":[{"foreign":{"id":251,"name":"ICurvePool","nodeType":"Identifier","overloadedDeclarations":[],"src":"73:10:4","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/oracles/interfaces/ICurveOracle.sol","file":"./interfaces/ICurveOracle.sol","id":254,"nodeType":"ImportDirective","scope":333,"sourceUnit":346,"src":"123:59:4","symbolAliases":[{"foreign":{"id":253,"name":"ICurveOracle","nodeType":"Identifier","overloadedDeclarations":[],"src":"131:12:4","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/oracles/libs/vMath.sol","file":"./libs/vMath.sol","id":256,"nodeType":"ImportDirective","scope":333,"sourceUnit":1357,"src":"183:39:4","symbolAliases":[{"foreign":{"id":255,"name":"vMath","nodeType":"Identifier","overloadedDeclarations":[],"src":"191:5:4","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":257,"name":"ICurveOracle","nodeType":"IdentifierPath","referencedDeclaration":345,"src":"250:12:4"},"id":258,"nodeType":"InheritanceSpecifier","src":"250:12:4"}],"contractDependencies":[345],"contractKind":"contract","fullyImplemented":true,"id":332,"linearizedBaseContracts":[332,345],"name":"CurveOracleV2","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[344],"body":{"id":291,"nodeType":"Block","src":"410:254:4","statements":[{"assignments":[270],"declarations":[{"constant":false,"id":270,"mutability":"mutable","name":"virtual_price","nodeType":"VariableDeclaration","scope":291,"src":"420:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":269,"name":"uint256","nodeType":"ElementaryTypeName","src":"420:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":276,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":272,"name":"curve_pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"455:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":271,"name":"ICurvePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"444:10:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ICurvePool_$353_$","typeString":"type(contract ICurvePool)"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"444:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ICurvePool_$353","typeString":"contract ICurvePool"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"get_virtual_price","nodeType":"MemberAccess","referencedDeclaration":352,"src":"444:40:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"444:42:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"420:66:4"},{"assignments":[278],"declarations":[{"constant":false,"id":278,"mutability":"mutable","name":"lp_price","nodeType":"VariableDeclaration","scope":291,"src":"497:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"497:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":288,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":282,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"560:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"560:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"554:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":280,"name":"uint8","nodeType":"ElementaryTypeName","src":"554:5:4","typeDescriptions":{}}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"554:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":285,"name":"virtual_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"588:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":286,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"615:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":279,"name":"calculate_v2_token_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"516:24:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint8_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint8,uint256,uint256[] memory) pure returns (uint256)"}},"id":287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"516:115:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"497:134:4"},{"expression":{"id":289,"name":"lp_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"649:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":268,"id":290,"nodeType":"Return","src":"642:15:4"}]},"functionSelector":"6dcb6a32","id":292,"implemented":true,"kind":"function","modifiers":[],"name":"get_price","nodeType":"FunctionDefinition","overrides":{"id":265,"nodeType":"OverrideSpecifier","overrides":[],"src":"371:8:4"},"parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":260,"mutability":"mutable","name":"curve_pool","nodeType":"VariableDeclaration","scope":292,"src":"288:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":259,"name":"address","nodeType":"ElementaryTypeName","src":"288:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":263,"mutability":"mutable","name":"prices","nodeType":"VariableDeclaration","scope":292,"src":"308:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":261,"name":"uint256","nodeType":"ElementaryTypeName","src":"308:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":262,"nodeType":"ArrayTypeName","src":"308:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"287:45:4"},"returnParameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":292,"src":"397:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":266,"name":"uint256","nodeType":"ElementaryTypeName","src":"397:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"396:9:4"},"scope":332,"src":"269:395:4","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":330,"nodeType":"Block","src":"976:211:4","statements":[{"assignments":[305],"declarations":[{"constant":false,"id":305,"mutability":"mutable","name":"product","nodeType":"VariableDeclaration","scope":330,"src":"986:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":304,"name":"uint256","nodeType":"ElementaryTypeName","src":"986:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":310,"initialValue":{"arguments":[{"id":308,"name":"prices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"1018:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":306,"name":"vMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"1004:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_vMath_$1356_$","typeString":"type(library vMath)"}},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"product","nodeType":"MemberAccess","referencedDeclaration":1329,"src":"1004:13:4","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[] memory) pure returns (uint256)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1004:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"986:39:4"},{"assignments":[312],"declarations":[{"constant":false,"id":312,"mutability":"mutable","name":"geo_mean","nodeType":"VariableDeclaration","scope":330,"src":"1035:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":311,"name":"uint256","nodeType":"ElementaryTypeName","src":"1035:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":318,"initialValue":{"arguments":[{"id":315,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"1075:1:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":316,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"1078:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":313,"name":"vMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"1054:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_vMath_$1356_$","typeString":"type(library vMath)"}},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"geometric_mean","nodeType":"MemberAccess","referencedDeclaration":1355,"src":"1054:20:4","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_uint8_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint8,uint256) pure returns (uint256)"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1054:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1035:51:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":319,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"1104:1:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":320,"name":"virtual_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"1108:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1104:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":322,"name":"geo_mean","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"1124:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1104:28:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":324,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1103:30:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"id":327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1136:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3138","id":326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1140:2:4","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"1136:6:4","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"}},"src":"1103:39:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":303,"id":329,"nodeType":"Return","src":"1096:46:4"}]},"id":331,"implemented":true,"kind":"function","modifiers":[],"name":"calculate_v2_token_price","nodeType":"FunctionDefinition","parameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"n","nodeType":"VariableDeclaration","scope":331,"src":"866:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":293,"name":"uint8","nodeType":"ElementaryTypeName","src":"866:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":296,"mutability":"mutable","name":"virtual_price","nodeType":"VariableDeclaration","scope":331,"src":"883:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"883:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":299,"mutability":"mutable","name":"prices","nodeType":"VariableDeclaration","scope":331,"src":"914:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":297,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":298,"nodeType":"ArrayTypeName","src":"914:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"856:87:4"},"returnParameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":331,"src":"967:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":301,"name":"uint256","nodeType":"ElementaryTypeName","src":"967:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"966:9:4"},"scope":332,"src":"823:364:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":333,"src":"224:965:4"}],"src":"39:1151:4"},"id":4},"contracts/oracles/interfaces/ICurveOracle.sol":{"ast":{"absolutePath":"contracts/oracles/interfaces/ICurveOracle.sol","exportedSymbols":{"ICurveOracle":[345]},"id":346,"nodeType":"SourceUnit","nodes":[{"id":334,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"0:24:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":345,"linearizedBaseContracts":[345],"name":"ICurveOracle","nodeType":"ContractDefinition","nodes":[{"functionSelector":"6dcb6a32","id":344,"implemented":false,"kind":"function","modifiers":[],"name":"get_price","nodeType":"FunctionDefinition","parameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"curve_pool","nodeType":"VariableDeclaration","scope":344,"src":"74:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"74:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":339,"mutability":"mutable","name":"prices","nodeType":"VariableDeclaration","scope":344,"src":"94:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":337,"name":"uint256","nodeType":"ElementaryTypeName","src":"94:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":338,"nodeType":"ArrayTypeName","src":"94:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"73:45:5"},"returnParameters":{"id":343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":342,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":344,"src":"166:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":341,"name":"uint256","nodeType":"ElementaryTypeName","src":"166:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"165:9:5"},"scope":345,"src":"55:120:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":346,"src":"26:151:5"}],"src":"0:178:5"},"id":5},"contracts/oracles/interfaces/ICurvePoolV1.sol":{"ast":{"absolutePath":"contracts/oracles/interfaces/ICurvePoolV1.sol","exportedSymbols":{"ICurvePool":[353]},"id":354,"nodeType":"SourceUnit","nodes":[{"id":347,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"0:24:6"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":353,"linearizedBaseContracts":[353],"name":"ICurvePool","nodeType":"ContractDefinition","nodes":[{"functionSelector":"bb7b8b80","id":352,"implemented":false,"kind":"function","modifiers":[],"name":"get_virtual_price","nodeType":"FunctionDefinition","parameters":{"id":348,"nodeType":"ParameterList","parameters":[],"src":"79:2:6"},"returnParameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":352,"src":"105:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":349,"name":"uint256","nodeType":"ElementaryTypeName","src":"105:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"104:9:6"},"scope":353,"src":"53:61:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":354,"src":"26:90:6"}],"src":"0:117:6"},"id":6},"contracts/oracles/interfaces/IERC20.sol":{"ast":{"absolutePath":"contracts/oracles/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[454]},"id":455,"nodeType":"SourceUnit","nodes":[{"id":355,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"0:24:7"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":454,"linearizedBaseContracts":[454],"name":"IERC20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"49:66:7","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":361,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[],"src":"140:2:7"},"returnParameters":{"id":360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":361,"src":"166:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":358,"name":"uint256","nodeType":"ElementaryTypeName","src":"166:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"165:9:7"},"scope":454,"src":"120:55:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"181:51:7","text":" @dev Returns the token decimals."},"functionSelector":"313ce567","id":367,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nodeType":"FunctionDefinition","parameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"254:2:7"},"returnParameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":367,"src":"280:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":364,"name":"uint8","nodeType":"ElementaryTypeName","src":"280:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"279:7:7"},"scope":454,"src":"237:50:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":368,"nodeType":"StructuredDocumentation","src":"293:49:7","text":" @dev Returns the token symbol."},"functionSelector":"95d89b41","id":373,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nodeType":"FunctionDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[],"src":"362:2:7"},"returnParameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":373,"src":"388:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":370,"name":"string","nodeType":"ElementaryTypeName","src":"388:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"387:15:7"},"scope":454,"src":"347:56:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":374,"nodeType":"StructuredDocumentation","src":"409:47:7","text":" @dev Returns the token name."},"functionSelector":"06fdde03","id":379,"implemented":false,"kind":"function","modifiers":[],"name":"name","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[],"src":"474:2:7"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":379,"src":"500:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":376,"name":"string","nodeType":"ElementaryTypeName","src":"500:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"499:15:7"},"scope":454,"src":"461:54:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"521:52:7","text":" @dev Returns the bep token owner."},"functionSelector":"893d20e8","id":385,"implemented":false,"kind":"function","modifiers":[],"name":"getOwner","nodeType":"FunctionDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[],"src":"595:2:7"},"returnParameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":385,"src":"621:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"621:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"620:9:7"},"scope":454,"src":"578:52:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":386,"nodeType":"StructuredDocumentation","src":"636:72:7","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":393,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":393,"src":"732:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"732:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"731:17:7"},"returnParameters":{"id":392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":393,"src":"772:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":390,"name":"uint256","nodeType":"ElementaryTypeName","src":"772:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"771:9:7"},"scope":454,"src":"713:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":394,"nodeType":"StructuredDocumentation","src":"787:209:7","text":" @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":403,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nodeType":"FunctionDefinition","parameters":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":396,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":403,"src":"1019:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"1019:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":398,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":403,"src":"1038:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":397,"name":"uint256","nodeType":"ElementaryTypeName","src":"1038:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1018:35:7"},"returnParameters":{"id":402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":403,"src":"1088:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":400,"name":"bool","nodeType":"ElementaryTypeName","src":"1088:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1087:6:7"},"scope":454,"src":"1001:93:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":404,"nodeType":"StructuredDocumentation","src":"1100:264:7","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":413,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nodeType":"FunctionDefinition","parameters":{"id":409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"_owner","nodeType":"VariableDeclaration","scope":413,"src":"1388:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":405,"name":"address","nodeType":"ElementaryTypeName","src":"1388:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":408,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":413,"src":"1404:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"1404:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1387:33:7"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":413,"src":"1468:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":410,"name":"uint256","nodeType":"ElementaryTypeName","src":"1468:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1467:9:7"},"scope":454,"src":"1369:108:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":414,"nodeType":"StructuredDocumentation","src":"1483:642:7","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":423,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","parameters":{"id":419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":423,"src":"2147:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":423,"src":"2164:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":417,"name":"uint256","nodeType":"ElementaryTypeName","src":"2164:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2146:33:7"},"returnParameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":423,"src":"2198:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":420,"name":"bool","nodeType":"ElementaryTypeName","src":"2198:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2197:6:7"},"scope":454,"src":"2130:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"2210:296:7","text":" @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":435,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nodeType":"FunctionDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":435,"src":"2542:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":425,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":428,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":435,"src":"2566:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":427,"name":"address","nodeType":"ElementaryTypeName","src":"2566:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":430,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":435,"src":"2593:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint256","nodeType":"ElementaryTypeName","src":"2593:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2532:81:7"},"returnParameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":435,"src":"2632:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":432,"name":"bool","nodeType":"ElementaryTypeName","src":"2632:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2631:6:7"},"scope":454,"src":"2511:127:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":436,"nodeType":"StructuredDocumentation","src":"2644:158:7","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":444,"name":"Transfer","nodeType":"EventDefinition","parameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":444,"src":"2822:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":437,"name":"address","nodeType":"ElementaryTypeName","src":"2822:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":440,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":444,"src":"2844:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":439,"name":"address","nodeType":"ElementaryTypeName","src":"2844:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":442,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":444,"src":"2864:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":441,"name":"uint256","nodeType":"ElementaryTypeName","src":"2864:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2821:57:7"},"src":"2807:72:7"},{"anonymous":false,"documentation":{"id":445,"nodeType":"StructuredDocumentation","src":"2885:148:7","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":453,"name":"Approval","nodeType":"EventDefinition","parameters":{"id":452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":453,"src":"3062:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":446,"name":"address","nodeType":"ElementaryTypeName","src":"3062:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":449,"indexed":true,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":453,"src":"3093:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":448,"name":"address","nodeType":"ElementaryTypeName","src":"3093:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":451,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":453,"src":"3126:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":450,"name":"uint256","nodeType":"ElementaryTypeName","src":"3126:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3052:93:7"},"src":"3038:108:7"}],"scope":455,"src":"26:3122:7"}],"src":"0:3149:7"},"id":7},"contracts/oracles/libs/FixedPointMathLib.sol":{"ast":{"absolutePath":"contracts/oracles/libs/FixedPointMathLib.sol","exportedSymbols":{"FixedPointMathLib":[573]},"id":574,"license":"AGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":456,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"42:24:8"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":457,"nodeType":"StructuredDocumentation","src":"68:270:8","text":"@notice Arithmetic library with operations for fixed-point numbers.\n @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)"},"fullyImplemented":true,"id":573,"linearizedBaseContracts":[573],"name":"FixedPointMathLib","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":460,"mutability":"constant","name":"WAD","nodeType":"VariableDeclaration","scope":573,"src":"563:36:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":458,"name":"uint256","nodeType":"ElementaryTypeName","src":"563:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653138","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"595:4:8","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"internal"},{"body":{"id":475,"nodeType":"Block","src":"718:90:8","statements":[{"expression":{"arguments":[{"id":470,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"746:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":471,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"749:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":472,"name":"WAD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"752:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":469,"name":"mulDivDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"735:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"735:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":468,"id":474,"nodeType":"Return","src":"728:28:8"}]},"id":476,"implemented":true,"kind":"function","modifiers":[],"name":"mulWadDown","nodeType":"FunctionDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":476,"src":"664:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":461,"name":"uint256","nodeType":"ElementaryTypeName","src":"664:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":476,"src":"675:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":463,"name":"uint256","nodeType":"ElementaryTypeName","src":"675:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"663:22:8"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":476,"src":"709:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":466,"name":"uint256","nodeType":"ElementaryTypeName","src":"709:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"708:9:8"},"scope":573,"src":"644:164:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":491,"nodeType":"Block","src":"886:86:8","statements":[{"expression":{"arguments":[{"id":486,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"912:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":487,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"915:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":488,"name":"WAD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"918:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":485,"name":"mulDivUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"903:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"903:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":484,"id":490,"nodeType":"Return","src":"896:26:8"}]},"id":492,"implemented":true,"kind":"function","modifiers":[],"name":"mulWadUp","nodeType":"FunctionDefinition","parameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":492,"src":"832:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":477,"name":"uint256","nodeType":"ElementaryTypeName","src":"832:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":480,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":492,"src":"843:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"831:22:8"},"returnParameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":483,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":492,"src":"877:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"877:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"876:9:8"},"scope":573,"src":"814:158:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":507,"nodeType":"Block","src":"1052:90:8","statements":[{"expression":{"arguments":[{"id":502,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"1080:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":503,"name":"WAD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"1083:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":504,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"1088:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":501,"name":"mulDivDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1069:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1069:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":500,"id":506,"nodeType":"Return","src":"1062:28:8"}]},"id":508,"implemented":true,"kind":"function","modifiers":[],"name":"divWadDown","nodeType":"FunctionDefinition","parameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":508,"src":"998:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":493,"name":"uint256","nodeType":"ElementaryTypeName","src":"998:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":496,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":508,"src":"1009:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":495,"name":"uint256","nodeType":"ElementaryTypeName","src":"1009:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"997:22:8"},"returnParameters":{"id":500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":508,"src":"1043:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":498,"name":"uint256","nodeType":"ElementaryTypeName","src":"1043:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:9:8"},"scope":573,"src":"978:164:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":523,"nodeType":"Block","src":"1220:86:8","statements":[{"expression":{"arguments":[{"id":518,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"1246:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":519,"name":"WAD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"1249:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":520,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"1254:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":517,"name":"mulDivUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"1237:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1237:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":516,"id":522,"nodeType":"Return","src":"1230:26:8"}]},"id":524,"implemented":true,"kind":"function","modifiers":[],"name":"divWadUp","nodeType":"FunctionDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":510,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":524,"src":"1166:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":509,"name":"uint256","nodeType":"ElementaryTypeName","src":"1166:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":512,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":524,"src":"1177:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":511,"name":"uint256","nodeType":"ElementaryTypeName","src":"1177:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1165:22:8"},"returnParameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":524,"src":"1211:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1211:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:9:8"},"scope":573,"src":"1148:158:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":536,"nodeType":"Block","src":"1631:496:8","statements":[{"AST":{"nodeType":"YulBlock","src":"1650:471:8","statements":[{"nodeType":"YulAssignment","src":"1705:14:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1714:1:8"},{"name":"y","nodeType":"YulIdentifier","src":"1717:1:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1710:3:8"},"nodeType":"YulFunctionCall","src":"1710:9:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"1705:1:8"}]},{"body":{"nodeType":"YulBlock","src":"1985:44:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2010:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2013:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2003:6:8"},"nodeType":"YulFunctionCall","src":"2003:12:8"},"nodeType":"YulExpressionStatement","src":"2003:12:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"1886:11:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1879:6:8"},"nodeType":"YulFunctionCall","src":"1879:19:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1872:6:8"},"nodeType":"YulFunctionCall","src":"1872:27:8"},{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1931:1:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1924:6:8"},"nodeType":"YulFunctionCall","src":"1924:9:8"},{"arguments":[{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"1942:1:8"},{"name":"x","nodeType":"YulIdentifier","src":"1945:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1938:3:8"},"nodeType":"YulFunctionCall","src":"1938:9:8"},{"name":"y","nodeType":"YulIdentifier","src":"1949:1:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1935:2:8"},"nodeType":"YulFunctionCall","src":"1935:16:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1921:2:8"},"nodeType":"YulFunctionCall","src":"1921:31:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1847:3:8"},"nodeType":"YulFunctionCall","src":"1847:123:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1823:6:8"},"nodeType":"YulFunctionCall","src":"1823:161:8"},"nodeType":"YulIf","src":"1820:2:8"},{"nodeType":"YulAssignment","src":"2087:24:8","value":{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"2096:1:8"},{"name":"denominator","nodeType":"YulIdentifier","src":"2099:11:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2092:3:8"},"nodeType":"YulFunctionCall","src":"2092:19:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"2087:1:8"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":530,"isOffset":false,"isSlot":false,"src":"1886:11:8","valueSize":1},{"declaration":530,"isOffset":false,"isSlot":false,"src":"2099:11:8","valueSize":1},{"declaration":526,"isOffset":false,"isSlot":false,"src":"1714:1:8","valueSize":1},{"declaration":526,"isOffset":false,"isSlot":false,"src":"1931:1:8","valueSize":1},{"declaration":526,"isOffset":false,"isSlot":false,"src":"1945:1:8","valueSize":1},{"declaration":528,"isOffset":false,"isSlot":false,"src":"1717:1:8","valueSize":1},{"declaration":528,"isOffset":false,"isSlot":false,"src":"1949:1:8","valueSize":1},{"declaration":533,"isOffset":false,"isSlot":false,"src":"1705:1:8","valueSize":1},{"declaration":533,"isOffset":false,"isSlot":false,"src":"1942:1:8","valueSize":1},{"declaration":533,"isOffset":false,"isSlot":false,"src":"2087:1:8","valueSize":1},{"declaration":533,"isOffset":false,"isSlot":false,"src":"2096:1:8","valueSize":1}],"id":535,"nodeType":"InlineAssembly","src":"1641:480:8"}]},"id":537,"implemented":true,"kind":"function","modifiers":[],"name":"mulDivDown","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":526,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":537,"src":"1533:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"1533:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":537,"src":"1552:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":527,"name":"uint256","nodeType":"ElementaryTypeName","src":"1552:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":537,"src":"1571:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"1571:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1523:73:8"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":537,"src":"1620:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":532,"name":"uint256","nodeType":"ElementaryTypeName","src":"1620:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1619:11:8"},"scope":573,"src":"1504:623:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":549,"nodeType":"Block","src":"2258:715:8","statements":[{"AST":{"nodeType":"YulBlock","src":"2277:690:8","statements":[{"nodeType":"YulAssignment","src":"2332:14:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2341:1:8"},{"name":"y","nodeType":"YulIdentifier","src":"2344:1:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2337:3:8"},"nodeType":"YulFunctionCall","src":"2337:9:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"2332:1:8"}]},{"body":{"nodeType":"YulBlock","src":"2612:44:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2637:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2640:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2630:6:8"},"nodeType":"YulFunctionCall","src":"2630:12:8"},"nodeType":"YulExpressionStatement","src":"2630:12:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"2513:11:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2506:6:8"},"nodeType":"YulFunctionCall","src":"2506:19:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2499:6:8"},"nodeType":"YulFunctionCall","src":"2499:27:8"},{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2558:1:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2551:6:8"},"nodeType":"YulFunctionCall","src":"2551:9:8"},{"arguments":[{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"2569:1:8"},{"name":"x","nodeType":"YulIdentifier","src":"2572:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2565:3:8"},"nodeType":"YulFunctionCall","src":"2565:9:8"},{"name":"y","nodeType":"YulIdentifier","src":"2576:1:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2562:2:8"},"nodeType":"YulFunctionCall","src":"2562:16:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2548:2:8"},"nodeType":"YulFunctionCall","src":"2548:31:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2474:3:8"},"nodeType":"YulFunctionCall","src":"2474:123:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2450:6:8"},"nodeType":"YulFunctionCall","src":"2450:161:8"},"nodeType":"YulIf","src":"2447:2:8"},{"nodeType":"YulAssignment","src":"2893:64:8","value":{"arguments":[{"arguments":[{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"2916:1:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2909:6:8"},"nodeType":"YulFunctionCall","src":"2909:9:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2902:6:8"},"nodeType":"YulFunctionCall","src":"2902:17:8"},{"arguments":[{"arguments":[{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"2933:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"2936:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2929:3:8"},"nodeType":"YulFunctionCall","src":"2929:9:8"},{"name":"denominator","nodeType":"YulIdentifier","src":"2940:11:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2925:3:8"},"nodeType":"YulFunctionCall","src":"2925:27:8"},{"kind":"number","nodeType":"YulLiteral","src":"2954:1:8","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2921:3:8"},"nodeType":"YulFunctionCall","src":"2921:35:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2898:3:8"},"nodeType":"YulFunctionCall","src":"2898:59:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"2893:1:8"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":543,"isOffset":false,"isSlot":false,"src":"2513:11:8","valueSize":1},{"declaration":543,"isOffset":false,"isSlot":false,"src":"2940:11:8","valueSize":1},{"declaration":539,"isOffset":false,"isSlot":false,"src":"2341:1:8","valueSize":1},{"declaration":539,"isOffset":false,"isSlot":false,"src":"2558:1:8","valueSize":1},{"declaration":539,"isOffset":false,"isSlot":false,"src":"2572:1:8","valueSize":1},{"declaration":541,"isOffset":false,"isSlot":false,"src":"2344:1:8","valueSize":1},{"declaration":541,"isOffset":false,"isSlot":false,"src":"2576:1:8","valueSize":1},{"declaration":546,"isOffset":false,"isSlot":false,"src":"2332:1:8","valueSize":1},{"declaration":546,"isOffset":false,"isSlot":false,"src":"2569:1:8","valueSize":1},{"declaration":546,"isOffset":false,"isSlot":false,"src":"2893:1:8","valueSize":1},{"declaration":546,"isOffset":false,"isSlot":false,"src":"2916:1:8","valueSize":1},{"declaration":546,"isOffset":false,"isSlot":false,"src":"2933:1:8","valueSize":1}],"id":548,"nodeType":"InlineAssembly","src":"2268:699:8"}]},"id":550,"implemented":true,"kind":"function","modifiers":[],"name":"mulDivUp","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":539,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":550,"src":"2160:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint256","nodeType":"ElementaryTypeName","src":"2160:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":541,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":550,"src":"2179:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":540,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":543,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":550,"src":"2198:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2150:73:8"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":550,"src":"2247:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":545,"name":"uint256","nodeType":"ElementaryTypeName","src":"2247:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2246:11:8"},"scope":573,"src":"2133:840:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":562,"nodeType":"Block","src":"3095:2619:8","statements":[{"AST":{"nodeType":"YulBlock","src":"3114:2594:8","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"3156:254:8","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"3206:85:8","statements":[{"nodeType":"YulAssignment","src":"3262:11:8","value":{"name":"scalar","nodeType":"YulIdentifier","src":"3267:6:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"3262:1:8"}]}]},"nodeType":"YulCase","src":"3199:92:8","value":{"kind":"number","nodeType":"YulLiteral","src":"3204:1:8","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"3316:80:8","statements":[{"nodeType":"YulAssignment","src":"3372:6:8","value":{"kind":"number","nodeType":"YulLiteral","src":"3377:1:8","type":"","value":"0"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"3372:1:8"}]}]},"nodeType":"YulCase","src":"3308:88:8","value":"default"}],"expression":{"name":"n","nodeType":"YulIdentifier","src":"3181:1:8"},"nodeType":"YulSwitch","src":"3174:222:8"}]},"nodeType":"YulCase","src":"3149:261:8","value":{"kind":"number","nodeType":"YulLiteral","src":"3154:1:8","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"3431:2267:8","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"3489:115:8","statements":[{"nodeType":"YulAssignment","src":"3575:11:8","value":{"name":"scalar","nodeType":"YulIdentifier","src":"3580:6:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"3575:1:8"}]}]},"nodeType":"YulCase","src":"3482:122:8","value":{"kind":"number","nodeType":"YulLiteral","src":"3487:1:8","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"3629:104:8","statements":[{"nodeType":"YulAssignment","src":"3709:6:8","value":{"name":"x","nodeType":"YulIdentifier","src":"3714:1:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"3709:1:8"}]}]},"nodeType":"YulCase","src":"3621:112:8","value":"default"}],"expression":{"arguments":[{"name":"n","nodeType":"YulIdentifier","src":"3460:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"3463:1:8","type":"","value":"2"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"3456:3:8"},"nodeType":"YulFunctionCall","src":"3456:9:8"},"nodeType":"YulSwitch","src":"3449:284:8"},{"nodeType":"YulVariableDeclaration","src":"3813:26:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3829:1:8","type":"","value":"1"},{"name":"scalar","nodeType":"YulIdentifier","src":"3832:6:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3825:3:8"},"nodeType":"YulFunctionCall","src":"3825:14:8"},"variables":[{"name":"half","nodeType":"YulTypedName","src":"3817:4:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"4113:1571:8","statements":[{"body":{"nodeType":"YulBlock","src":"4287:60:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4320:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4323:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4313:6:8"},"nodeType":"YulFunctionCall","src":"4313:12:8"},"nodeType":"YulExpressionStatement","src":"4313:12:8"}]},"condition":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4279:3:8","type":"","value":"128"},{"name":"x","nodeType":"YulIdentifier","src":"4284:1:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4275:3:8"},"nodeType":"YulFunctionCall","src":"4275:11:8"},"nodeType":"YulIf","src":"4272:2:8"},{"nodeType":"YulVariableDeclaration","src":"4409:19:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4423:1:8"},{"name":"x","nodeType":"YulIdentifier","src":"4426:1:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4419:3:8"},"nodeType":"YulFunctionCall","src":"4419:9:8"},"variables":[{"name":"xx","nodeType":"YulTypedName","src":"4413:2:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4502:28:8","value":{"arguments":[{"name":"xx","nodeType":"YulIdentifier","src":"4521:2:8"},{"name":"half","nodeType":"YulIdentifier","src":"4525:4:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4517:3:8"},"nodeType":"YulFunctionCall","src":"4517:13:8"},"variables":[{"name":"xxRound","nodeType":"YulTypedName","src":"4506:7:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"4626:60:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4659:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4662:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4652:6:8"},"nodeType":"YulFunctionCall","src":"4652:12:8"},"nodeType":"YulExpressionStatement","src":"4652:12:8"}]},"condition":{"arguments":[{"name":"xxRound","nodeType":"YulIdentifier","src":"4613:7:8"},{"name":"xx","nodeType":"YulIdentifier","src":"4622:2:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4610:2:8"},"nodeType":"YulFunctionCall","src":"4610:15:8"},"nodeType":"YulIf","src":"4607:2:8"},{"nodeType":"YulAssignment","src":"4756:25:8","value":{"arguments":[{"name":"xxRound","nodeType":"YulIdentifier","src":"4765:7:8"},{"name":"scalar","nodeType":"YulIdentifier","src":"4774:6:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4761:3:8"},"nodeType":"YulFunctionCall","src":"4761:20:8"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"4756:1:8"}]},{"body":{"nodeType":"YulBlock","src":"4853:813:8","statements":[{"nodeType":"YulVariableDeclaration","src":"4921:19:8","value":{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"4935:1:8"},{"name":"x","nodeType":"YulIdentifier","src":"4938:1:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4931:3:8"},"nodeType":"YulFunctionCall","src":"4931:9:8"},"variables":[{"name":"zx","nodeType":"YulTypedName","src":"4925:2:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"5043:209:8","statements":[{"body":{"nodeType":"YulBlock","src":"5150:76:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5191:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5194:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5184:6:8"},"nodeType":"YulFunctionCall","src":"5184:12:8"},"nodeType":"YulExpressionStatement","src":"5184:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5146:1:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5139:6:8"},"nodeType":"YulFunctionCall","src":"5139:9:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5132:6:8"},"nodeType":"YulFunctionCall","src":"5132:17:8"},"nodeType":"YulIf","src":"5129:2:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"zx","nodeType":"YulIdentifier","src":"5031:2:8"},{"name":"x","nodeType":"YulIdentifier","src":"5035:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5027:3:8"},"nodeType":"YulFunctionCall","src":"5027:10:8"},{"name":"z","nodeType":"YulIdentifier","src":"5039:1:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5024:2:8"},"nodeType":"YulFunctionCall","src":"5024:17:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5017:6:8"},"nodeType":"YulFunctionCall","src":"5017:25:8"},"nodeType":"YulIf","src":"5014:2:8"},{"nodeType":"YulVariableDeclaration","src":"5334:28:8","value":{"arguments":[{"name":"zx","nodeType":"YulIdentifier","src":"5353:2:8"},{"name":"half","nodeType":"YulIdentifier","src":"5357:4:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5349:3:8"},"nodeType":"YulFunctionCall","src":"5349:13:8"},"variables":[{"name":"zxRound","nodeType":"YulTypedName","src":"5338:7:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"5466:68:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5503:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5506:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5496:6:8"},"nodeType":"YulFunctionCall","src":"5496:12:8"},"nodeType":"YulExpressionStatement","src":"5496:12:8"}]},"condition":{"arguments":[{"name":"zxRound","nodeType":"YulIdentifier","src":"5453:7:8"},{"name":"zx","nodeType":"YulIdentifier","src":"5462:2:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5450:2:8"},"nodeType":"YulFunctionCall","src":"5450:15:8"},"nodeType":"YulIf","src":"5447:2:8"},{"nodeType":"YulAssignment","src":"5619:25:8","value":{"arguments":[{"name":"zxRound","nodeType":"YulIdentifier","src":"5628:7:8"},{"name":"scalar","nodeType":"YulIdentifier","src":"5637:6:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5624:3:8"},"nodeType":"YulFunctionCall","src":"5624:20:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"5619:1:8"}]}]},"condition":{"arguments":[{"name":"n","nodeType":"YulIdentifier","src":"4847:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"4850:1:8","type":"","value":"2"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"4843:3:8"},"nodeType":"YulFunctionCall","src":"4843:9:8"},"nodeType":"YulIf","src":"4840:2:8"}]},"condition":{"name":"n","nodeType":"YulIdentifier","src":"3986:1:8"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3988:124:8","statements":[{"nodeType":"YulAssignment","src":"4080:14:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4089:1:8","type":"","value":"1"},{"name":"n","nodeType":"YulIdentifier","src":"4092:1:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4085:3:8"},"nodeType":"YulFunctionCall","src":"4085:9:8"},"variableNames":[{"name":"n","nodeType":"YulIdentifier","src":"4080:1:8"}]}]},"pre":{"nodeType":"YulBlock","src":"3861:124:8","statements":[{"nodeType":"YulAssignment","src":"3953:14:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3962:1:8","type":"","value":"1"},{"name":"n","nodeType":"YulIdentifier","src":"3965:1:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3958:3:8"},"nodeType":"YulFunctionCall","src":"3958:9:8"},"variableNames":[{"name":"n","nodeType":"YulIdentifier","src":"3953:1:8"}]}]},"src":"3857:1827:8"}]},"nodeType":"YulCase","src":"3423:2275:8","value":"default"}],"expression":{"name":"x","nodeType":"YulIdentifier","src":"3135:1:8"},"nodeType":"YulSwitch","src":"3128:2570:8"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":554,"isOffset":false,"isSlot":false,"src":"3181:1:8","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"3460:1:8","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"3953:1:8","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"3965:1:8","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"3986:1:8","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"4080:1:8","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"4092:1:8","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"4847:1:8","valueSize":1},{"declaration":556,"isOffset":false,"isSlot":false,"src":"3267:6:8","valueSize":1},{"declaration":556,"isOffset":false,"isSlot":false,"src":"3580:6:8","valueSize":1},{"declaration":556,"isOffset":false,"isSlot":false,"src":"3832:6:8","valueSize":1},{"declaration":556,"isOffset":false,"isSlot":false,"src":"4774:6:8","valueSize":1},{"declaration":556,"isOffset":false,"isSlot":false,"src":"5637:6:8","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"3135:1:8","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"3714:1:8","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"4284:1:8","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"4423:1:8","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"4426:1:8","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"4756:1:8","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"4938:1:8","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"5035:1:8","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"5146:1:8","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"3262:1:8","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"3372:1:8","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"3575:1:8","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"3709:1:8","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"4935:1:8","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"5039:1:8","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"5619:1:8","valueSize":1}],"id":561,"nodeType":"InlineAssembly","src":"3105:2603:8"}]},"id":563,"implemented":true,"kind":"function","modifiers":[],"name":"rpow","nodeType":"FunctionDefinition","parameters":{"id":557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":552,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":563,"src":"3002:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":551,"name":"uint256","nodeType":"ElementaryTypeName","src":"3002:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":554,"mutability":"mutable","name":"n","nodeType":"VariableDeclaration","scope":563,"src":"3021:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":553,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"scalar","nodeType":"VariableDeclaration","scope":563,"src":"3040:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":555,"name":"uint256","nodeType":"ElementaryTypeName","src":"3040:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2992:68:8"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":563,"src":"3084:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":558,"name":"uint256","nodeType":"ElementaryTypeName","src":"3084:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:11:8"},"scope":573,"src":"2979:2735:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":571,"nodeType":"Block","src":"5967:2057:8","statements":[{"AST":{"nodeType":"YulBlock","src":"5986:2032:8","statements":[{"nodeType":"YulAssignment","src":"6038:6:8","value":{"kind":"number","nodeType":"YulLiteral","src":"6043:1:8","type":"","value":"1"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"6038:1:8"}]},{"nodeType":"YulVariableDeclaration","src":"6118:10:8","value":{"name":"x","nodeType":"YulIdentifier","src":"6127:1:8"},"variables":[{"name":"y","nodeType":"YulTypedName","src":"6122:1:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"6264:142:8","statements":[{"nodeType":"YulAssignment","src":"6282:16:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6291:3:8","type":"","value":"128"},{"name":"y","nodeType":"YulIdentifier","src":"6296:1:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6287:3:8"},"nodeType":"YulFunctionCall","src":"6287:11:8"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6282:1:8"}]},{"nodeType":"YulAssignment","src":"6345:15:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6354:2:8","type":"","value":"64"},{"name":"z","nodeType":"YulIdentifier","src":"6358:1:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6350:3:8"},"nodeType":"YulFunctionCall","src":"6350:10:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"6345:1:8"}]}]},"condition":{"arguments":[{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6223:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"6226:35:8","type":"","value":"0x100000000000000000000000000000000"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6220:2:8"},"nodeType":"YulFunctionCall","src":"6220:42:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6213:6:8"},"nodeType":"YulFunctionCall","src":"6213:50:8"},"nodeType":"YulIf","src":"6210:2:8"},{"body":{"nodeType":"YulBlock","src":"6457:140:8","statements":[{"nodeType":"YulAssignment","src":"6475:15:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6484:2:8","type":"","value":"64"},{"name":"y","nodeType":"YulIdentifier","src":"6488:1:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6480:3:8"},"nodeType":"YulFunctionCall","src":"6480:10:8"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6475:1:8"}]},{"nodeType":"YulAssignment","src":"6536:15:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6545:2:8","type":"","value":"32"},{"name":"z","nodeType":"YulIdentifier","src":"6549:1:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6541:3:8"},"nodeType":"YulFunctionCall","src":"6541:10:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"6536:1:8"}]}]},"condition":{"arguments":[{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6432:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"6435:19:8","type":"","value":"0x10000000000000000"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6429:2:8"},"nodeType":"YulFunctionCall","src":"6429:26:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6422:6:8"},"nodeType":"YulFunctionCall","src":"6422:34:8"},"nodeType":"YulIf","src":"6419:2:8"},{"body":{"nodeType":"YulBlock","src":"6640:140:8","statements":[{"nodeType":"YulAssignment","src":"6658:15:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6667:2:8","type":"","value":"32"},{"name":"y","nodeType":"YulIdentifier","src":"6671:1:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6663:3:8"},"nodeType":"YulFunctionCall","src":"6663:10:8"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6658:1:8"}]},{"nodeType":"YulAssignment","src":"6719:15:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6728:2:8","type":"","value":"16"},{"name":"z","nodeType":"YulIdentifier","src":"6732:1:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6724:3:8"},"nodeType":"YulFunctionCall","src":"6724:10:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"6719:1:8"}]}]},"condition":{"arguments":[{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6623:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"6626:11:8","type":"","value":"0x100000000"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6620:2:8"},"nodeType":"YulFunctionCall","src":"6620:18:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6613:6:8"},"nodeType":"YulFunctionCall","src":"6613:26:8"},"nodeType":"YulIf","src":"6610:2:8"},{"body":{"nodeType":"YulBlock","src":"6819:138:8","statements":[{"nodeType":"YulAssignment","src":"6837:15:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6846:2:8","type":"","value":"16"},{"name":"y","nodeType":"YulIdentifier","src":"6850:1:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6842:3:8"},"nodeType":"YulFunctionCall","src":"6842:10:8"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6837:1:8"}]},{"nodeType":"YulAssignment","src":"6898:14:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6907:1:8","type":"","value":"8"},{"name":"z","nodeType":"YulIdentifier","src":"6910:1:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6903:3:8"},"nodeType":"YulFunctionCall","src":"6903:9:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"6898:1:8"}]}]},"condition":{"arguments":[{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6806:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"6809:7:8","type":"","value":"0x10000"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6803:2:8"},"nodeType":"YulFunctionCall","src":"6803:14:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6796:6:8"},"nodeType":"YulFunctionCall","src":"6796:22:8"},"nodeType":"YulIf","src":"6793:2:8"},{"body":{"nodeType":"YulBlock","src":"6994:136:8","statements":[{"nodeType":"YulAssignment","src":"7012:14:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7021:1:8","type":"","value":"8"},{"name":"y","nodeType":"YulIdentifier","src":"7024:1:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7017:3:8"},"nodeType":"YulFunctionCall","src":"7017:9:8"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"7012:1:8"}]},{"nodeType":"YulAssignment","src":"7071:14:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7080:1:8","type":"","value":"4"},{"name":"z","nodeType":"YulIdentifier","src":"7083:1:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7076:3:8"},"nodeType":"YulFunctionCall","src":"7076:9:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7071:1:8"}]}]},"condition":{"arguments":[{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6983:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"6986:5:8","type":"","value":"0x100"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6980:2:8"},"nodeType":"YulFunctionCall","src":"6980:12:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6973:6:8"},"nodeType":"YulFunctionCall","src":"6973:20:8"},"nodeType":"YulIf","src":"6970:2:8"},{"body":{"nodeType":"YulBlock","src":"7166:136:8","statements":[{"nodeType":"YulAssignment","src":"7184:14:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7193:1:8","type":"","value":"4"},{"name":"y","nodeType":"YulIdentifier","src":"7196:1:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7189:3:8"},"nodeType":"YulFunctionCall","src":"7189:9:8"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"7184:1:8"}]},{"nodeType":"YulAssignment","src":"7243:14:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7252:1:8","type":"","value":"2"},{"name":"z","nodeType":"YulIdentifier","src":"7255:1:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7248:3:8"},"nodeType":"YulFunctionCall","src":"7248:9:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7243:1:8"}]}]},"condition":{"arguments":[{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7156:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"7159:4:8","type":"","value":"0x10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7153:2:8"},"nodeType":"YulFunctionCall","src":"7153:11:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7146:6:8"},"nodeType":"YulFunctionCall","src":"7146:19:8"},"nodeType":"YulIf","src":"7143:2:8"},{"body":{"nodeType":"YulBlock","src":"7337:87:8","statements":[{"nodeType":"YulAssignment","src":"7396:14:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7405:1:8","type":"","value":"1"},{"name":"z","nodeType":"YulIdentifier","src":"7408:1:8"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7401:3:8"},"nodeType":"YulFunctionCall","src":"7401:9:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7396:1:8"}]}]},"condition":{"arguments":[{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7328:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"7331:3:8","type":"","value":"0x8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7325:2:8"},"nodeType":"YulFunctionCall","src":"7325:10:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7318:6:8"},"nodeType":"YulFunctionCall","src":"7318:18:8"},"nodeType":"YulIf","src":"7315:2:8"},{"nodeType":"YulAssignment","src":"7496:30:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7505:1:8","type":"","value":"1"},{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"7512:1:8"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7519:1:8"},{"name":"z","nodeType":"YulIdentifier","src":"7522:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7515:3:8"},"nodeType":"YulFunctionCall","src":"7515:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7508:3:8"},"nodeType":"YulFunctionCall","src":"7508:17:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7501:3:8"},"nodeType":"YulFunctionCall","src":"7501:25:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7496:1:8"}]},{"nodeType":"YulAssignment","src":"7539:30:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7548:1:8","type":"","value":"1"},{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"7555:1:8"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7562:1:8"},{"name":"z","nodeType":"YulIdentifier","src":"7565:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7558:3:8"},"nodeType":"YulFunctionCall","src":"7558:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7551:3:8"},"nodeType":"YulFunctionCall","src":"7551:17:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7544:3:8"},"nodeType":"YulFunctionCall","src":"7544:25:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7539:1:8"}]},{"nodeType":"YulAssignment","src":"7582:30:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7591:1:8","type":"","value":"1"},{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"7598:1:8"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7605:1:8"},{"name":"z","nodeType":"YulIdentifier","src":"7608:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7601:3:8"},"nodeType":"YulFunctionCall","src":"7601:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7594:3:8"},"nodeType":"YulFunctionCall","src":"7594:17:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7587:3:8"},"nodeType":"YulFunctionCall","src":"7587:25:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7582:1:8"}]},{"nodeType":"YulAssignment","src":"7625:30:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7634:1:8","type":"","value":"1"},{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"7641:1:8"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7648:1:8"},{"name":"z","nodeType":"YulIdentifier","src":"7651:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7644:3:8"},"nodeType":"YulFunctionCall","src":"7644:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7637:3:8"},"nodeType":"YulFunctionCall","src":"7637:17:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7630:3:8"},"nodeType":"YulFunctionCall","src":"7630:25:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7625:1:8"}]},{"nodeType":"YulAssignment","src":"7668:30:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7677:1:8","type":"","value":"1"},{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"7684:1:8"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7691:1:8"},{"name":"z","nodeType":"YulIdentifier","src":"7694:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7687:3:8"},"nodeType":"YulFunctionCall","src":"7687:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7680:3:8"},"nodeType":"YulFunctionCall","src":"7680:17:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7673:3:8"},"nodeType":"YulFunctionCall","src":"7673:25:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7668:1:8"}]},{"nodeType":"YulAssignment","src":"7711:30:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7720:1:8","type":"","value":"1"},{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"7727:1:8"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7734:1:8"},{"name":"z","nodeType":"YulIdentifier","src":"7737:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7730:3:8"},"nodeType":"YulFunctionCall","src":"7730:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7723:3:8"},"nodeType":"YulFunctionCall","src":"7723:17:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7716:3:8"},"nodeType":"YulFunctionCall","src":"7716:25:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7711:1:8"}]},{"nodeType":"YulAssignment","src":"7754:30:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7763:1:8","type":"","value":"1"},{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"7770:1:8"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7777:1:8"},{"name":"z","nodeType":"YulIdentifier","src":"7780:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7773:3:8"},"nodeType":"YulFunctionCall","src":"7773:9:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7766:3:8"},"nodeType":"YulFunctionCall","src":"7766:17:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7759:3:8"},"nodeType":"YulFunctionCall","src":"7759:25:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7754:1:8"}]},{"nodeType":"YulVariableDeclaration","src":"7850:27:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7872:1:8"},{"name":"z","nodeType":"YulIdentifier","src":"7875:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7868:3:8"},"nodeType":"YulFunctionCall","src":"7868:9:8"},"variables":[{"name":"zRoundDown","nodeType":"YulTypedName","src":"7854:10:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"7961:47:8","statements":[{"nodeType":"YulAssignment","src":"7979:15:8","value":{"name":"zRoundDown","nodeType":"YulIdentifier","src":"7984:10:8"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"7979:1:8"}]}]},"condition":{"arguments":[{"name":"zRoundDown","nodeType":"YulIdentifier","src":"7946:10:8"},{"name":"z","nodeType":"YulIdentifier","src":"7958:1:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7943:2:8"},"nodeType":"YulFunctionCall","src":"7943:17:8"},"nodeType":"YulIf","src":"7940:2:8"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":565,"isOffset":false,"isSlot":false,"src":"6127:1:8","valueSize":1},{"declaration":565,"isOffset":false,"isSlot":false,"src":"7519:1:8","valueSize":1},{"declaration":565,"isOffset":false,"isSlot":false,"src":"7562:1:8","valueSize":1},{"declaration":565,"isOffset":false,"isSlot":false,"src":"7605:1:8","valueSize":1},{"declaration":565,"isOffset":false,"isSlot":false,"src":"7648:1:8","valueSize":1},{"declaration":565,"isOffset":false,"isSlot":false,"src":"7691:1:8","valueSize":1},{"declaration":565,"isOffset":false,"isSlot":false,"src":"7734:1:8","valueSize":1},{"declaration":565,"isOffset":false,"isSlot":false,"src":"7777:1:8","valueSize":1},{"declaration":565,"isOffset":false,"isSlot":false,"src":"7872:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"6038:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"6345:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"6358:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"6536:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"6549:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"6719:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"6732:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"6898:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"6910:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7071:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7083:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7243:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7255:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7396:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7408:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7496:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7512:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7522:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7539:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7555:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7565:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7582:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7598:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7608:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7625:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7641:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7651:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7668:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7684:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7694:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7711:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7727:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7737:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7754:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7770:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7780:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7875:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7958:1:8","valueSize":1},{"declaration":568,"isOffset":false,"isSlot":false,"src":"7979:1:8","valueSize":1}],"id":570,"nodeType":"InlineAssembly","src":"5977:2041:8"}]},"id":572,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":572,"src":"5922:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":564,"name":"uint256","nodeType":"ElementaryTypeName","src":"5922:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5921:11:8"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":572,"src":"5956:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":567,"name":"uint256","nodeType":"ElementaryTypeName","src":"5956:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5955:11:8"},"scope":573,"src":"5908:2116:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":574,"src":"338:7688:8"}],"src":"42:7985:8"},"id":8},"contracts/oracles/libs/IntegralMath.sol":{"ast":{"absolutePath":"contracts/oracles/libs/IntegralMath.sol","exportedSymbols":{"IntegralMath":[1137],"MAX_VAL":[1146],"mulMod":[1241],"mulModMax":[1222],"safeAdd":[1160],"unsafeAdd":[1175],"unsafeMul":[1205],"unsafeSub":[1190]},"id":1138,"license":"SEE LICENSE IN LICENSE","nodeType":"SourceUnit","nodes":[{"id":575,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"51:24:9"},{"absolutePath":"contracts/oracles/libs/Uint.sol","file":"./Uint.sol","id":576,"nodeType":"ImportDirective","scope":1138,"sourceUnit":1242,"src":"77:20:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1137,"linearizedBaseContracts":[1137],"name":"IntegralMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":638,"nodeType":"Block","src":"295:541:9","statements":[{"id":637,"nodeType":"UncheckedBlock","src":"305:525:9","statements":[{"assignments":[585],"declarations":[{"constant":false,"id":585,"mutability":"mutable","name":"res","nodeType":"VariableDeclaration","scope":637,"src":"329:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":584,"name":"uint8","nodeType":"ElementaryTypeName","src":"329:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":587,"initialValue":{"hexValue":"30","id":586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"341:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"329:13:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":588,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"361:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"323536","id":589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"365:3:9","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"src":"361:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":633,"nodeType":"Block","src":"540:255:9","statements":[{"body":{"id":631,"nodeType":"Block","src":"634:147:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":616,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"660:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"665:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":618,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"670:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"665:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"660:11:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":630,"nodeType":"IfStatement","src":"656:107:9","trueBody":{"id":629,"nodeType":"Block","src":"673:90:9","statements":[{"expression":{"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":621,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"699:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":622,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"705:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"699:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":624,"nodeType":"ExpressionStatement","src":"699:7:9"},{"expression":{"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":625,"name":"res","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"732:3:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"id":626,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"739:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"732:8:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":628,"nodeType":"ExpressionStatement","src":"732:8:9"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":609,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"618:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"622:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"618:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":632,"initializationExpression":{"assignments":[606],"declarations":[{"constant":false,"id":606,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","scope":632,"src":"603:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":605,"name":"uint8","nodeType":"ElementaryTypeName","src":"603:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":608,"initialValue":{"hexValue":"313238","id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"613:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"nodeType":"VariableDeclarationStatement","src":"603:13:9"},"loopExpression":{"expression":{"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":612,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"625:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"31","id":613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"631:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"625:7:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":615,"nodeType":"ExpressionStatement","src":"625:7:9"},"nodeType":"ForStatement","src":"598:183:9"}]},"id":634,"nodeType":"IfStatement","src":"357:438:9","trueBody":{"id":604,"nodeType":"Block","src":"370:164:9","statements":[{"body":{"id":602,"nodeType":"Block","src":"442:78:9","statements":[{"expression":{"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":594,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"464:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"31","id":595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"470:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"464:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":597,"nodeType":"ExpressionStatement","src":"464:7:9"},{"expression":{"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":598,"name":"res","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"493:3:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"493:8:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":601,"nodeType":"ExpressionStatement","src":"493:8:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":591,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"435:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"439:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"435:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":603,"nodeType":"WhileStatement","src":"428:92:9"}]}},{"expression":{"id":635,"name":"res","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"816:3:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":583,"id":636,"nodeType":"Return","src":"809:10:9"}]}]},"documentation":{"id":577,"nodeType":"StructuredDocumentation","src":"126:104:9","text":" @dev Compute the largest integer smaller than or equal to the binary logarithm of `n`"},"id":639,"implemented":true,"kind":"function","modifiers":[],"name":"floorLog2","nodeType":"FunctionDefinition","parameters":{"id":580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"n","nodeType":"VariableDeclaration","scope":639,"src":"254:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":578,"name":"uint256","nodeType":"ElementaryTypeName","src":"254:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"253:11:9"},"returnParameters":{"id":583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":582,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":639,"src":"288:5:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":581,"name":"uint8","nodeType":"ElementaryTypeName","src":"288:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"287:7:9"},"scope":1137,"src":"235:601:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":696,"nodeType":"Block","src":"1008:326:9","statements":[{"id":695,"nodeType":"UncheckedBlock","src":"1018:310:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":647,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"1046:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1046:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":692,"nodeType":"IfStatement","src":"1042:254:9","trueBody":{"id":691,"nodeType":"Block","src":"1053:243:9","statements":[{"assignments":[651],"declarations":[{"constant":false,"id":651,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":691,"src":"1071:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":650,"name":"uint256","nodeType":"ElementaryTypeName","src":"1071:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":657,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":652,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"1083:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1087:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1083:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1091:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1083:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1071:21:9"},{"assignments":[659],"declarations":[{"constant":false,"id":659,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":691,"src":"1110:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"1110:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":668,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":660,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"1123:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":661,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"1127:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":662,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"1131:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1127:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1123:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":665,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1122:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1136:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1122:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1110:27:9"},{"body":{"id":687,"nodeType":"Block","src":"1169:87:9","statements":[{"expression":{"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":672,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"1191:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":673,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"1195:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1191:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":675,"nodeType":"ExpressionStatement","src":"1191:5:9"},{"expression":{"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":676,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"1218:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":677,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"1223:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":678,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"1227:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":679,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"1231:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1227:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1223:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":682,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1222:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1222:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1218:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":686,"nodeType":"ExpressionStatement","src":"1218:19:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":669,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"1162:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":670,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"1166:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1162:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":688,"nodeType":"WhileStatement","src":"1155:101:9"},{"expression":{"id":689,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"1280:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":646,"id":690,"nodeType":"Return","src":"1273:8:9"}]}},{"expression":{"hexValue":"30","id":693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1316:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":646,"id":694,"nodeType":"Return","src":"1309:8:9"}]}]},"documentation":{"id":640,"nodeType":"StructuredDocumentation","src":"842:99:9","text":" @dev Compute the largest integer smaller than or equal to the square root of `n`"},"id":697,"implemented":true,"kind":"function","modifiers":[],"name":"floorSqrt","nodeType":"FunctionDefinition","parameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"n","nodeType":"VariableDeclaration","scope":697,"src":"965:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":641,"name":"uint256","nodeType":"ElementaryTypeName","src":"965:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"964:11:9"},"returnParameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":697,"src":"999:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":644,"name":"uint256","nodeType":"ElementaryTypeName","src":"999:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"998:9:9"},"scope":1137,"src":"946:388:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":723,"nodeType":"Block","src":"1505:117:9","statements":[{"id":722,"nodeType":"UncheckedBlock","src":"1515:101:9","statements":[{"assignments":[706],"declarations":[{"constant":false,"id":706,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":722,"src":"1539:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":705,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":710,"initialValue":{"arguments":[{"id":708,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"1561:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":707,"name":"floorSqrt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"1551:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1551:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1539:24:9"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":711,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"1584:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1587:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1584:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":714,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"1592:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1584:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":717,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"1600:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1604:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1600:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1584:21:9","trueExpression":{"id":716,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"1596:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":704,"id":721,"nodeType":"Return","src":"1577:28:9"}]}]},"documentation":{"id":698,"nodeType":"StructuredDocumentation","src":"1340:99:9","text":" @dev Compute the smallest integer larger than or equal to the square root of `n`"},"id":724,"implemented":true,"kind":"function","modifiers":[],"name":"ceilSqrt","nodeType":"FunctionDefinition","parameters":{"id":701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"n","nodeType":"VariableDeclaration","scope":724,"src":"1462:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":699,"name":"uint256","nodeType":"ElementaryTypeName","src":"1462:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1461:11:9"},"returnParameters":{"id":704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":703,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":724,"src":"1496:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":702,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:9:9"},"scope":1137,"src":"1444:178:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":788,"nodeType":"Block","src":"1793:343:9","statements":[{"id":787,"nodeType":"UncheckedBlock","src":"1803:327:9","statements":[{"assignments":[733],"declarations":[{"constant":false,"id":733,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":787,"src":"1827:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":732,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":735,"initialValue":{"hexValue":"30","id":734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1839:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1827:13:9"},{"body":{"id":783,"nodeType":"Block","src":"1897:201:9","statements":[{"expression":{"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":749,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"1915:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"31","id":750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1921:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1915:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":752,"nodeType":"ExpressionStatement","src":"1915:7:9"},{"assignments":[754],"declarations":[{"constant":false,"id":754,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":783,"src":"1940:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":753,"name":"uint256","nodeType":"ElementaryTypeName","src":"1940:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":765,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1952:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":756,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"1956:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1952:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":758,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"1961:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1965:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1961:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":761,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1960:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1952:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1970:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1952:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1940:31:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":766,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"1993:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":767,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"1997:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1993:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":769,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"2002:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1993:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":782,"nodeType":"IfStatement","src":"1989:95:9","trueBody":{"id":781,"nodeType":"Block","src":"2005:79:9","statements":[{"expression":{"id":775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":771,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"2027:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":772,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"2032:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":773,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"2036:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2032:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2027:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":776,"nodeType":"ExpressionStatement","src":"2027:10:9"},{"expression":{"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":777,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"2059:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2064:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2059:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":780,"nodeType":"ExpressionStatement","src":"2059:6:9"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":742,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"1881:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1885:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1881:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":784,"initializationExpression":{"assignments":[737],"declarations":[{"constant":false,"id":737,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":784,"src":"1859:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":736,"name":"uint256","nodeType":"ElementaryTypeName","src":"1859:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":741,"initialValue":{"commonType":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"},"id":740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1871:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"323535","id":739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1876:3:9","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"1871:8:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"}},"nodeType":"VariableDeclarationStatement","src":"1859:20:9"},"loopExpression":{"expression":{"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":745,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"1888:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"33","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1894:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"1888:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":748,"nodeType":"ExpressionStatement","src":"1888:7:9"},"nodeType":"ForStatement","src":"1854:244:9"},{"expression":{"id":785,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"2118:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":731,"id":786,"nodeType":"Return","src":"2111:8:9"}]}]},"documentation":{"id":725,"nodeType":"StructuredDocumentation","src":"1628:98:9","text":" @dev Compute the largest integer smaller than or equal to the cubic root of `n`"},"id":789,"implemented":true,"kind":"function","modifiers":[],"name":"floorCbrt","nodeType":"FunctionDefinition","parameters":{"id":728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":727,"mutability":"mutable","name":"n","nodeType":"VariableDeclaration","scope":789,"src":"1750:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":726,"name":"uint256","nodeType":"ElementaryTypeName","src":"1750:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1749:11:9"},"returnParameters":{"id":731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":730,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":789,"src":"1784:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":729,"name":"uint256","nodeType":"ElementaryTypeName","src":"1784:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1783:9:9"},"scope":1137,"src":"1731:405:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":815,"nodeType":"Block","src":"2306:117:9","statements":[{"id":814,"nodeType":"UncheckedBlock","src":"2316:101:9","statements":[{"assignments":[798],"declarations":[{"constant":false,"id":798,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":814,"src":"2340:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"2340:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":802,"initialValue":{"arguments":[{"id":800,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"2362:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":799,"name":"floorCbrt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"2352:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2352:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2340:24:9"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":803,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"2385:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"33","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2388:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"2385:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":806,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"2393:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2385:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":809,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"2401:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2405:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2401:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2385:21:9","trueExpression":{"id":808,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"2397:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":796,"id":813,"nodeType":"Return","src":"2378:28:9"}]}]},"documentation":{"id":790,"nodeType":"StructuredDocumentation","src":"2142:98:9","text":" @dev Compute the smallest integer larger than or equal to the cubic root of `n`"},"id":816,"implemented":true,"kind":"function","modifiers":[],"name":"ceilCbrt","nodeType":"FunctionDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":792,"mutability":"mutable","name":"n","nodeType":"VariableDeclaration","scope":816,"src":"2263:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"2263:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2262:11:9"},"returnParameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":816,"src":"2297:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":794,"name":"uint256","nodeType":"ElementaryTypeName","src":"2297:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2296:9:9"},"scope":1137,"src":"2245:178:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":843,"nodeType":"Block","src":"2601:87:9","statements":[{"id":842,"nodeType":"UncheckedBlock","src":"2611:71:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":826,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"2642:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":827,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"2646:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2642:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":829,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"2651:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":830,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"2655:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2651:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":832,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2650:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":833,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"2661:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":834,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"2665:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2669:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2665:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2661:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":838,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2660:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2650:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2642:29:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":825,"id":841,"nodeType":"Return","src":"2635:36:9"}]}]},"documentation":{"id":817,"nodeType":"StructuredDocumentation","src":"2429:95:9","text":" @dev Compute the nearest integer to the quotient of `n` and `d` (or `n / d`)"},"id":844,"implemented":true,"kind":"function","modifiers":[],"name":"roundDiv","nodeType":"FunctionDefinition","parameters":{"id":822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":819,"mutability":"mutable","name":"n","nodeType":"VariableDeclaration","scope":844,"src":"2547:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":818,"name":"uint256","nodeType":"ElementaryTypeName","src":"2547:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":821,"mutability":"mutable","name":"d","nodeType":"VariableDeclaration","scope":844,"src":"2558:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"2558:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2546:22:9"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":824,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":844,"src":"2592:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":823,"name":"uint256","nodeType":"ElementaryTypeName","src":"2592:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2591:9:9"},"scope":1137,"src":"2529:159:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":940,"nodeType":"Block","src":"2899:1065:9","statements":[{"id":939,"nodeType":"UncheckedBlock","src":"2909:1049:9","statements":[{"assignments":[857,859],"declarations":[{"constant":false,"id":857,"mutability":"mutable","name":"xyh","nodeType":"VariableDeclaration","scope":939,"src":"2934:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":856,"name":"uint256","nodeType":"ElementaryTypeName","src":"2934:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"xyl","nodeType":"VariableDeclaration","scope":939,"src":"2947:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"2947:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":864,"initialValue":{"arguments":[{"id":861,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"2969:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":862,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"2972:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":860,"name":"mul512","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"2962:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256,uint256)"}},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2962:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2933:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":865,"name":"xyh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"2992:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2999:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2992:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":873,"nodeType":"IfStatement","src":"2988:98:9","trueBody":{"id":872,"nodeType":"Block","src":"3002:84:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":868,"name":"xyl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"3064:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":869,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"3070:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3064:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":855,"id":871,"nodeType":"Return","src":"3057:14:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":874,"name":"xyh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"3103:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":875,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"3109:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3103:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":935,"nodeType":"IfStatement","src":"3099:801:9","trueBody":{"id":934,"nodeType":"Block","src":"3112:788:9","statements":[{"assignments":[878],"declarations":[{"constant":false,"id":878,"mutability":"mutable","name":"m","nodeType":"VariableDeclaration","scope":934,"src":"3171:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":877,"name":"uint256","nodeType":"ElementaryTypeName","src":"3171:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":884,"initialValue":{"arguments":[{"id":880,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"3190:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":881,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"3193:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":882,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"3196:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":879,"name":"mulMod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"3183:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3183:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3171:27:9"},{"assignments":[886,888],"declarations":[{"constant":false,"id":886,"mutability":"mutable","name":"nh","nodeType":"VariableDeclaration","scope":934,"src":"3236:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":885,"name":"uint256","nodeType":"ElementaryTypeName","src":"3236:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":888,"mutability":"mutable","name":"nl","nodeType":"VariableDeclaration","scope":934,"src":"3248:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":887,"name":"uint256","nodeType":"ElementaryTypeName","src":"3248:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":894,"initialValue":{"arguments":[{"id":890,"name":"xyh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"3269:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":891,"name":"xyl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"3274:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":892,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"3279:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":889,"name":"sub512","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"3262:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3262:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3235:46:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":895,"name":"nh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"3355:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3361:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3355:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":903,"nodeType":"IfStatement","src":"3351:104:9","trueBody":{"id":902,"nodeType":"Block","src":"3364:91:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":898,"name":"nl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"3430:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":899,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"3435:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3430:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":855,"id":901,"nodeType":"Return","src":"3423:13:9"}]}},{"assignments":[905],"declarations":[{"constant":false,"id":905,"mutability":"mutable","name":"p","nodeType":"VariableDeclaration","scope":934,"src":"3472:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":904,"name":"uint256","nodeType":"ElementaryTypeName","src":"3472:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":912,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"hexValue":"30","id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3494:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":908,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"3497:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":906,"name":"unsafeSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"3484:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3484:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":910,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"3502:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3484:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3472:31:9"},{"assignments":[914],"declarations":[{"constant":false,"id":914,"mutability":"mutable","name":"q","nodeType":"VariableDeclaration","scope":934,"src":"3580:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":913,"name":"uint256","nodeType":"ElementaryTypeName","src":"3580:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":920,"initialValue":{"arguments":[{"id":916,"name":"nh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"3599:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":917,"name":"nl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"3603:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":918,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"3607:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":915,"name":"div512","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"3592:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3592:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3580:29:9"},{"assignments":[922],"declarations":[{"constant":false,"id":922,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":934,"src":"3714:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":921,"name":"uint256","nodeType":"ElementaryTypeName","src":"3714:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":928,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":924,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"3733:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":925,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"3737:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3733:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":923,"name":"inv256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"3726:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3726:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3714:25:9"},{"expression":{"arguments":[{"id":930,"name":"q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"3834:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":931,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"3837:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":929,"name":"unsafeMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"3824:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3824:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":855,"id":933,"nodeType":"Return","src":"3817:22:9"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":936,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3913:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$__$returns$__$","typeString":"function () pure"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3913:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":938,"nodeType":"ExpressionStatement","src":"3913:8:9"}]}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"2694:88:9","text":" @dev Compute the largest integer smaller than or equal to `x * y / z`"},"id":941,"implemented":true,"kind":"function","modifiers":[],"name":"mulDivF","nodeType":"FunctionDefinition","parameters":{"id":852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":941,"src":"2813:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":849,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":941,"src":"2832:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"2832:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":851,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":941,"src":"2851:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":850,"name":"uint256","nodeType":"ElementaryTypeName","src":"2851:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2803:63:9"},"returnParameters":{"id":855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":854,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":941,"src":"2890:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":853,"name":"uint256","nodeType":"ElementaryTypeName","src":"2890:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2889:9:9"},"scope":1137,"src":"2787:1177:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":977,"nodeType":"Block","src":"4175:160:9","statements":[{"id":976,"nodeType":"UncheckedBlock","src":"4185:144:9","statements":[{"assignments":[954],"declarations":[{"constant":false,"id":954,"mutability":"mutable","name":"w","nodeType":"VariableDeclaration","scope":976,"src":"4209:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"4209:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":960,"initialValue":{"arguments":[{"id":956,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"4229:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":957,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"4232:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":958,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"4235:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":955,"name":"mulDivF","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"4221:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4221:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4209:28:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":962,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"4262:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":963,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"4265:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":964,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"4268:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":961,"name":"mulMod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"4255:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4255:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4273:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4255:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":973,"nodeType":"IfStatement","src":"4251:45:9","trueBody":{"expression":{"arguments":[{"id":969,"name":"w","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"4291:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4294:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":968,"name":"safeAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"4283:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4283:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":952,"id":972,"nodeType":"Return","src":"4276:20:9"}},{"expression":{"id":974,"name":"w","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"4317:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":952,"id":975,"nodeType":"Return","src":"4310:8:9"}]}]},"documentation":{"id":942,"nodeType":"StructuredDocumentation","src":"3970:88:9","text":" @dev Compute the smallest integer larger than or equal to `x * y / z`"},"id":978,"implemented":true,"kind":"function","modifiers":[],"name":"mulDivC","nodeType":"FunctionDefinition","parameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":944,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":978,"src":"4089:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":943,"name":"uint256","nodeType":"ElementaryTypeName","src":"4089:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":946,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":978,"src":"4108:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"4108:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":978,"src":"4127:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":947,"name":"uint256","nodeType":"ElementaryTypeName","src":"4127:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4079:63:9"},"returnParameters":{"id":952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":951,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":978,"src":"4166:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"4166:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4165:9:9"},"scope":1137,"src":"4063:272:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1024,"nodeType":"Block","src":"4504:207:9","statements":[{"id":1023,"nodeType":"UncheckedBlock","src":"4514:191:9","statements":[{"assignments":[991],"declarations":[{"constant":false,"id":991,"mutability":"mutable","name":"p","nodeType":"VariableDeclaration","scope":1023,"src":"4538:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"4538:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":996,"initialValue":{"arguments":[{"id":993,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"4560:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":994,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"4563:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":992,"name":"mulModMax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"4550:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4550:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4538:27:9"},{"assignments":[998],"declarations":[{"constant":false,"id":998,"mutability":"mutable","name":"q","nodeType":"VariableDeclaration","scope":1023,"src":"4579:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":997,"name":"uint256","nodeType":"ElementaryTypeName","src":"4579:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1003,"initialValue":{"arguments":[{"id":1000,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"4601:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1001,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"4604:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":999,"name":"unsafeMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"4591:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4591:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4579:27:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1004,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"4624:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1005,"name":"q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"4629:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4624:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1013,"nodeType":"IfStatement","src":"4620:29:9","trueBody":{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1007,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"4640:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1008,"name":"q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"4644:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4640:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1010,"name":"q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"4647:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1011,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4639:10:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":989,"id":1012,"nodeType":"Return","src":"4632:17:9"}},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1015,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"4681:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1016,"name":"q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"4684:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1014,"name":"unsafeSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"4671:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4671:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4689:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4671:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1020,"name":"q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"4692:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1021,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4670:24:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":989,"id":1022,"nodeType":"Return","src":"4663:31:9"}]}]},"documentation":{"id":979,"nodeType":"StructuredDocumentation","src":"4341:52:9","text":" @dev Compute the value of `x * y`"},"id":1025,"implemented":true,"kind":"function","modifiers":[],"name":"mul512","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1025,"src":"4414:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"4414:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1025,"src":"4425:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"4425:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4413:22:9"},"returnParameters":{"id":989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":986,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1025,"src":"4482:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":985,"name":"uint256","nodeType":"ElementaryTypeName","src":"4482:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":988,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1025,"src":"4491:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":987,"name":"uint256","nodeType":"ElementaryTypeName","src":"4491:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4481:18:9"},"scope":1137,"src":"4398:313:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1059,"nodeType":"Block","src":"4943:130:9","statements":[{"id":1058,"nodeType":"UncheckedBlock","src":"4953:114:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"xl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"4981:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1040,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"4987:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4981:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1048,"nodeType":"IfStatement","src":"4977:32:9","trueBody":{"expression":{"components":[{"id":1042,"name":"xh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"4998:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1043,"name":"xl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"5002:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1044,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"5007:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5002:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1046,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4997:12:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":1038,"id":1047,"nodeType":"Return","src":"4990:19:9"}},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"xh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"5031:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5036:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5031:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1053,"name":"xl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"5049:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1054,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"5053:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1052,"name":"unsafeSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"5039:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5039:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1056,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5030:26:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":1038,"id":1057,"nodeType":"Return","src":"5023:33:9"}]}]},"documentation":{"id":1026,"nodeType":"StructuredDocumentation","src":"4717:100:9","text":" @dev Compute the value of `2 ^ 256 * xh + xl - y`, where `2 ^ 256 * xh + xl >= y`"},"id":1060,"implemented":true,"kind":"function","modifiers":[],"name":"sub512","nodeType":"FunctionDefinition","parameters":{"id":1033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"xh","nodeType":"VariableDeclaration","scope":1060,"src":"4847:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"4847:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1030,"mutability":"mutable","name":"xl","nodeType":"VariableDeclaration","scope":1060,"src":"4867:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1029,"name":"uint256","nodeType":"ElementaryTypeName","src":"4867:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1032,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1060,"src":"4887:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1031,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4837:65:9"},"returnParameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1060,"src":"4925:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1034,"name":"uint256","nodeType":"ElementaryTypeName","src":"4925:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1060,"src":"4934:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1036,"name":"uint256","nodeType":"ElementaryTypeName","src":"4934:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4924:18:9"},"scope":1137,"src":"4822:251:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1095,"nodeType":"Block","src":"5310:225:9","statements":[{"id":1094,"nodeType":"UncheckedBlock","src":"5320:209:9","statements":[{"assignments":[1073],"declarations":[{"constant":false,"id":1073,"mutability":"mutable","name":"pow2nInv","nodeType":"VariableDeclaration","scope":1094,"src":"5344:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1072,"name":"uint256","nodeType":"ElementaryTypeName","src":"5344:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1083,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"hexValue":"30","id":1076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5383:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1077,"name":"pow2n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"5386:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1075,"name":"unsafeSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"5373:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5373:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1079,"name":"pow2n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"5395:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:27:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5402:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1074,"name":"unsafeAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"5363:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5363:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5344:60:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1085,"name":"xh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"5455:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1086,"name":"pow2nInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"5459:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1084,"name":"unsafeMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"5445:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5445:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1088,"name":"xl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"5472:2:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1089,"name":"pow2n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"5477:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5472:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1091,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5471:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5445:38:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1071,"id":1093,"nodeType":"Return","src":"5438:45:9"}]}]},"documentation":{"id":1061,"nodeType":"StructuredDocumentation","src":"5079:110:9","text":" @dev Compute the value of `(2 ^ 256 * xh + xl) / pow2n`, where `xl` is divisible by `pow2n`"},"id":1096,"implemented":true,"kind":"function","modifiers":[],"name":"div512","nodeType":"FunctionDefinition","parameters":{"id":1068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1063,"mutability":"mutable","name":"xh","nodeType":"VariableDeclaration","scope":1096,"src":"5219:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1062,"name":"uint256","nodeType":"ElementaryTypeName","src":"5219:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1065,"mutability":"mutable","name":"xl","nodeType":"VariableDeclaration","scope":1096,"src":"5239:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1064,"name":"uint256","nodeType":"ElementaryTypeName","src":"5239:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1067,"mutability":"mutable","name":"pow2n","nodeType":"VariableDeclaration","scope":1096,"src":"5259:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1066,"name":"uint256","nodeType":"ElementaryTypeName","src":"5259:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5209:69:9"},"returnParameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1070,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1096,"src":"5301:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"5301:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5300:9:9"},"scope":1137,"src":"5194:341:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1135,"nodeType":"Block","src":"5713:336:9","statements":[{"id":1134,"nodeType":"UncheckedBlock","src":"5723:320:9","statements":[{"assignments":[1105],"declarations":[{"constant":false,"id":1105,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1134,"src":"5851:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1104,"name":"uint256","nodeType":"ElementaryTypeName","src":"5851:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1107,"initialValue":{"hexValue":"31","id":1106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5863:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"5851:13:9"},{"body":{"expression":{"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1118,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"5926:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1120,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"5940:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"32","id":1122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5953:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},{"arguments":[{"id":1124,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"5966:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1125,"name":"d","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"5969:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1123,"name":"unsafeMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"5956:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5956:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1121,"name":"unsafeSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"5943:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5943:29:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1119,"name":"unsafeMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"5930:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5930:43:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5926:47:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1130,"nodeType":"ExpressionStatement","src":"5926:47:9"},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1112,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"5898:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"38","id":1113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5902:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"5898:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1131,"initializationExpression":{"assignments":[1109],"declarations":[{"constant":false,"id":1109,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":1131,"src":"5883:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1108,"name":"uint256","nodeType":"ElementaryTypeName","src":"5883:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1111,"initialValue":{"hexValue":"30","id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5895:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5883:13:9"},"loopExpression":{"expression":{"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5905:3:9","subExpression":{"id":1115,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"5907:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1117,"nodeType":"ExpressionStatement","src":"5905:3:9"},"nodeType":"ForStatement","src":"5878:95:9"},{"expression":{"id":1132,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"6031:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1103,"id":1133,"nodeType":"Return","src":"6024:8:9"}]}]},"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"5541:109:9","text":" @dev Compute the inverse of `d` modulo `2 ^ 256`, where `d` is congruent to `1` modulo `2`"},"id":1136,"implemented":true,"kind":"function","modifiers":[],"name":"inv256","nodeType":"FunctionDefinition","parameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"d","nodeType":"VariableDeclaration","scope":1136,"src":"5671:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1098,"name":"uint256","nodeType":"ElementaryTypeName","src":"5671:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5670:11:9"},"returnParameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1136,"src":"5704:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1101,"name":"uint256","nodeType":"ElementaryTypeName","src":"5704:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5703:9:9"},"scope":1137,"src":"5655:394:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1138,"src":"99:5952:9"}],"src":"51:6001:9"},"id":9},"contracts/oracles/libs/Uint.sol":{"ast":{"absolutePath":"contracts/oracles/libs/Uint.sol","exportedSymbols":{"MAX_VAL":[1146],"mulMod":[1241],"mulModMax":[1222],"safeAdd":[1160],"unsafeAdd":[1175],"unsafeMul":[1205],"unsafeSub":[1190]},"id":1242,"license":"SEE LICENSE IN LICENSE","nodeType":"SourceUnit","nodes":[{"id":1139,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"51:24:10"},{"constant":true,"id":1146,"mutability":"constant","name":"MAX_VAL","nodeType":"VariableDeclaration","scope":1242,"src":"77:44:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"77:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"expression":{"arguments":[{"id":1143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"109:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"109:7:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1141,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"104:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"104:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"104:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"body":{"id":1159,"nodeType":"Block","src":"209:21:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1155,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"222:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1156,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"226:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"222:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1154,"id":1158,"nodeType":"Return","src":"215:12:10"}]},"id":1160,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"safeAdd","nodeType":"FunctionDefinition","parameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1148,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1160,"src":"164:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1147,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1150,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1160,"src":"175:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1149,"name":"uint256","nodeType":"ElementaryTypeName","src":"175:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"163:22:10"},"returnParameters":{"id":1154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1153,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1160,"src":"200:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1152,"name":"uint256","nodeType":"ElementaryTypeName","src":"200:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"199:9:10"},"scope":1242,"src":"147:83:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1174,"nodeType":"Block","src":"327:47:10","statements":[{"id":1173,"nodeType":"UncheckedBlock","src":"333:39:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1169,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"360:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1170,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"364:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"360:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1168,"id":1172,"nodeType":"Return","src":"353:12:10"}]}]},"id":1175,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"unsafeAdd","nodeType":"FunctionDefinition","parameters":{"id":1165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1175,"src":"282:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1161,"name":"uint256","nodeType":"ElementaryTypeName","src":"282:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1164,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1175,"src":"293:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1163,"name":"uint256","nodeType":"ElementaryTypeName","src":"293:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"281:22:10"},"returnParameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1167,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1175,"src":"318:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1166,"name":"uint256","nodeType":"ElementaryTypeName","src":"318:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"317:9:10"},"scope":1242,"src":"263:111:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1189,"nodeType":"Block","src":"471:47:10","statements":[{"id":1188,"nodeType":"UncheckedBlock","src":"477:39:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1184,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"504:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1185,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"508:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"504:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1183,"id":1187,"nodeType":"Return","src":"497:12:10"}]}]},"id":1190,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"unsafeSub","nodeType":"FunctionDefinition","parameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1190,"src":"426:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1176,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1190,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:10"},"returnParameters":{"id":1183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1190,"src":"462:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"462:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"461:9:10"},"scope":1242,"src":"407:111:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1204,"nodeType":"Block","src":"615:47:10","statements":[{"id":1203,"nodeType":"UncheckedBlock","src":"621:39:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1199,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"648:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1200,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"652:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"648:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1198,"id":1202,"nodeType":"Return","src":"641:12:10"}]}]},"id":1205,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"unsafeMul","nodeType":"FunctionDefinition","parameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1192,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1205,"src":"570:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1191,"name":"uint256","nodeType":"ElementaryTypeName","src":"570:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1194,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1205,"src":"581:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1193,"name":"uint256","nodeType":"ElementaryTypeName","src":"581:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"569:22:10"},"returnParameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1197,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1205,"src":"606:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1196,"name":"uint256","nodeType":"ElementaryTypeName","src":"606:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"605:9:10"},"scope":1242,"src":"551:111:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1221,"nodeType":"Block","src":"749:63:10","statements":[{"id":1220,"nodeType":"UncheckedBlock","src":"755:55:10","statements":[{"expression":{"arguments":[{"id":1215,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"789:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1216,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"792:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1217,"name":"MAX_VAL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"795:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1214,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"782:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"782:21:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1213,"id":1219,"nodeType":"Return","src":"775:28:10"}]}]},"id":1222,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"mulModMax","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1222,"src":"704:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"704:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1222,"src":"715:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1208,"name":"uint256","nodeType":"ElementaryTypeName","src":"715:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"703:22:10"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1222,"src":"740:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"740:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"739:9:10"},"scope":1242,"src":"685:127:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1240,"nodeType":"Block","src":"921:57:10","statements":[{"id":1239,"nodeType":"UncheckedBlock","src":"927:49:10","statements":[{"expression":{"arguments":[{"id":1234,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"961:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1235,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"964:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1236,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"967:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1233,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"954:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"954:15:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1232,"id":1238,"nodeType":"Return","src":"947:22:10"}]}]},"id":1241,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"mulMod","nodeType":"FunctionDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1241,"src":"856:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"856:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1226,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1241,"src":"871:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1225,"name":"uint256","nodeType":"ElementaryTypeName","src":"871:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1241,"src":"886:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1227,"name":"uint256","nodeType":"ElementaryTypeName","src":"886:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"850:47:10"},"returnParameters":{"id":1232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1231,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1241,"src":"912:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1230,"name":"uint256","nodeType":"ElementaryTypeName","src":"912:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"911:9:10"},"scope":1242,"src":"835:143:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"51:928:10"},"id":10},"contracts/oracles/libs/vMath.sol":{"ast":{"absolutePath":"contracts/oracles/libs/vMath.sol","exportedSymbols":{"FixedPointMathLib":[573],"IntegralMath":[1137],"vMath":[1356]},"id":1357,"nodeType":"SourceUnit","nodes":[{"id":1243,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"0:24:11"},{"absolutePath":"contracts/oracles/libs/FixedPointMathLib.sol","file":"./FixedPointMathLib.sol","id":1245,"nodeType":"ImportDirective","scope":1357,"sourceUnit":574,"src":"26:58:11","symbolAliases":[{"foreign":{"id":1244,"name":"FixedPointMathLib","nodeType":"Identifier","overloadedDeclarations":[],"src":"34:17:11","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/oracles/libs/IntegralMath.sol","file":"./IntegralMath.sol","id":1247,"nodeType":"ImportDirective","scope":1357,"sourceUnit":1138,"src":"85:48:11","symbolAliases":[{"foreign":{"id":1246,"name":"IntegralMath","nodeType":"Identifier","overloadedDeclarations":[],"src":"93:12:11","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1356,"linearizedBaseContracts":[1356],"name":"vMath","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1250,"mutability":"constant","name":"WAD","nodeType":"VariableDeclaration","scope":1356,"src":"155:36:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1248,"name":"uint256","nodeType":"ElementaryTypeName","src":"155:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653138","id":1249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"187:4:11","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"internal"},{"body":{"id":1292,"nodeType":"Block","src":"307:200:11","statements":[{"assignments":[1259],"declarations":[{"constant":false,"id":1259,"mutability":"mutable","name":"min","nodeType":"VariableDeclaration","scope":1292,"src":"317:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"317:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1263,"initialValue":{"baseExpression":{"id":1260,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"331:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1262,"indexExpression":{"hexValue":"30","id":1261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"337:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"331:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"317:22:11"},{"body":{"id":1288,"nodeType":"Block","src":"390:91:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1275,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"408:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"baseExpression":{"id":1276,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"414:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1278,"indexExpression":{"id":1277,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"420:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"414:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"408:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1287,"nodeType":"IfStatement","src":"404:67:11","trueBody":{"id":1286,"nodeType":"Block","src":"424:47:11","statements":[{"expression":{"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1280,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"442:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1281,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"448:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1283,"indexExpression":{"id":1282,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"454:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"448:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"442:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1285,"nodeType":"ExpressionStatement","src":"442:14:11"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1268,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"367:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1269,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"371:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"371:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"367:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1289,"initializationExpression":{"assignments":[1265],"declarations":[{"constant":false,"id":1265,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":1289,"src":"354:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1264,"name":"uint8","nodeType":"ElementaryTypeName","src":"354:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1267,"initialValue":{"hexValue":"31","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"364:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"354:11:11"},"loopExpression":{"expression":{"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"385:3:11","subExpression":{"id":1272,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"385:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1274,"nodeType":"ExpressionStatement","src":"385:3:11"},"nodeType":"ForStatement","src":"349:132:11"},{"expression":{"id":1290,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"497:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1257,"id":1291,"nodeType":"Return","src":"490:10:11"}]},"functionSelector":"d834e619","id":1293,"implemented":true,"kind":"function","modifiers":[],"name":"min","nodeType":"FunctionDefinition","parameters":{"id":1254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1253,"mutability":"mutable","name":"array","nodeType":"VariableDeclaration","scope":1293,"src":"249:24:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1251,"name":"uint256","nodeType":"ElementaryTypeName","src":"249:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1252,"nodeType":"ArrayTypeName","src":"249:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"248:26:11"},"returnParameters":{"id":1257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1256,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1293,"src":"298:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1255,"name":"uint256","nodeType":"ElementaryTypeName","src":"298:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"297:9:11"},"scope":1356,"src":"236:271:11","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":1328,"nodeType":"Block","src":"587:160:11","statements":[{"assignments":[1302],"declarations":[{"constant":false,"id":1302,"mutability":"mutable","name":"product","nodeType":"VariableDeclaration","scope":1328,"src":"597:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1301,"name":"uint256","nodeType":"ElementaryTypeName","src":"597:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1306,"initialValue":{"baseExpression":{"id":1303,"name":"nums","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"615:4:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1305,"indexExpression":{"hexValue":"30","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"620:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"615:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"597:25:11"},{"body":{"id":1324,"nodeType":"Block","src":"674:43:11","statements":[{"expression":{"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1318,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"688:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"baseExpression":{"id":1319,"name":"nums","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"699:4:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1321,"indexExpression":{"id":1320,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"704:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"699:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"688:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1323,"nodeType":"ExpressionStatement","src":"688:18:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1311,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"652:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1312,"name":"nums","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"656:4:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"656:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"652:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1325,"initializationExpression":{"assignments":[1308],"declarations":[{"constant":false,"id":1308,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":1325,"src":"637:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1307,"name":"uint256","nodeType":"ElementaryTypeName","src":"637:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1310,"initialValue":{"hexValue":"31","id":1309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"649:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"637:13:11"},"loopExpression":{"expression":{"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"669:3:11","subExpression":{"id":1315,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"669:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1317,"nodeType":"ExpressionStatement","src":"669:3:11"},"nodeType":"ForStatement","src":"632:85:11"},{"expression":{"id":1326,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"733:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1300,"id":1327,"nodeType":"Return","src":"726:14:11"}]},"functionSelector":"8e5fede8","id":1329,"implemented":true,"kind":"function","modifiers":[],"name":"product","nodeType":"FunctionDefinition","parameters":{"id":1297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1296,"mutability":"mutable","name":"nums","nodeType":"VariableDeclaration","scope":1329,"src":"530:23:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1294,"name":"uint256","nodeType":"ElementaryTypeName","src":"530:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1295,"nodeType":"ArrayTypeName","src":"530:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"529:25:11"},"returnParameters":{"id":1300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1299,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1329,"src":"578:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1298,"name":"uint256","nodeType":"ElementaryTypeName","src":"578:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"577:9:11"},"scope":1356,"src":"513:234:11","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":1354,"nodeType":"Block","src":"930:181:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1338,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"944:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":1339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"949:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"944:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1352,"nodeType":"Block","src":"1021:84:11","statements":[{"expression":{"arguments":[{"id":1349,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"1086:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1347,"name":"IntegralMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"1063:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IntegralMath_$1137_$","typeString":"type(library IntegralMath)"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"floorCbrt","nodeType":"MemberAccess","referencedDeclaration":789,"src":"1063:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1063:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1337,"id":1351,"nodeType":"Return","src":"1056:38:11"}]},"id":1353,"nodeType":"IfStatement","src":"940:165:11","trueBody":{"id":1346,"nodeType":"Block","src":"952:63:11","statements":[{"expression":{"arguments":[{"id":1343,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"996:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1341,"name":"FixedPointMathLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"973:17:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPointMathLib_$573_$","typeString":"type(library FixedPointMathLib)"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sqrt","nodeType":"MemberAccess","referencedDeclaration":572,"src":"973:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"973:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1337,"id":1345,"nodeType":"Return","src":"966:38:11"}]}}]},"functionSelector":"f43b9abe","id":1355,"implemented":true,"kind":"function","modifiers":[],"name":"geometric_mean","nodeType":"FunctionDefinition","parameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"n","nodeType":"VariableDeclaration","scope":1355,"src":"844:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1330,"name":"uint8","nodeType":"ElementaryTypeName","src":"844:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1333,"mutability":"mutable","name":"product","nodeType":"VariableDeclaration","scope":1355,"src":"853:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"853:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"843:26:11"},"returnParameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1355,"src":"917:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"917:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"916:9:11"},"scope":1356,"src":"820:291:11","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":1357,"src":"135:978:11"}],"src":"0:1114:11"},"id":11}},"contracts":{"contracts/mocks/tokens/CurvePoolMocked.sol":{"CurvePoolMocked":{"abi":[{"inputs":[{"internalType":"uint256","name":"_virtual_price","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"get_virtual_price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC20 minting logic","kind":"dev","methods":{},"title":"ERC20Mintable","version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:210:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:113:12","statements":[{"body":{"nodeType":"YulBlock","src":"141:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"150:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"158:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:12"},"nodeType":"YulFunctionCall","src":"143:22:12"},"nodeType":"YulExpressionStatement","src":"143:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:12"},"nodeType":"YulFunctionCall","src":"112:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:12"},"nodeType":"YulFunctionCall","src":"108:32:12"},"nodeType":"YulIf","src":"105:2:12"},{"nodeType":"YulAssignment","src":"176:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"192:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"186:5:12"},"nodeType":"YulFunctionCall","src":"186:16:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"176:6:12"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:12","type":""}],"src":"14:194:12"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516100f93803806100f983398101604081905261002f91610047565b8061003f5750670e27c49886e600005b60005561005f565b600060208284031215610058578081fd5b5051919050565b608c8061006d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063bb7b8b8014602d575b600080fd5b60336047565b604051603e9190604d565b60405180910390f35b60005490565b9081526020019056fea2646970667358221220c08807f4702364180f62525bace87489781d23f85ce186bb8717c2465a3146a064736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xF9 CODESIZE SUB DUP1 PUSH2 0xF9 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x47 JUMP JUMPDEST DUP1 PUSH2 0x3F JUMPI POP PUSH8 0xE27C49886E60000 JUMPDEST PUSH1 0x0 SSTORE PUSH2 0x5F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x58 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x8C DUP1 PUSH2 0x6D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBB7B8B80 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0x4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 DUP9 SMOD DELEGATECALL PUSH17 0x2364180F62525BACE87489781D23F85CE1 DUP7 0xBB DUP8 OR 0xC2 CHAINID GAS BALANCE CHAINID LOG0 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ","sourceMap":"194:407:0:-:0;;;267:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;337:17;334:106;;-1:-1:-1;386:19:0;334:106;449:13;:30;194:407;;14:194:12;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;-1:-1:-1;186:16:12;;95:113;-1:-1:-1;95:113:12:o;:::-;194:407:0;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:193:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:12","statements":[{"nodeType":"YulAssignment","src":"125:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:12"},"nodeType":"YulFunctionCall","src":"133:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:12"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:12"},"nodeType":"YulFunctionCall","src":"160:25:12"},"nodeType":"YulExpressionStatement","src":"160:25:12"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:12","type":""}],"src":"14:177:12"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052348015600f57600080fd5b506004361060285760003560e01c8063bb7b8b8014602d575b600080fd5b60336047565b604051603e9190604d565b60405180910390f35b60005490565b9081526020019056fea2646970667358221220c08807f4702364180f62525bace87489781d23f85ce186bb8717c2465a3146a064736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBB7B8B80 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0x4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 DUP9 SMOD DELEGATECALL PUSH17 0x2364180F62525BACE87489781D23F85CE1 DUP7 0xBB DUP8 OR 0xC2 CHAINID GAS BALANCE CHAINID LOG0 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ","sourceMap":"194:407:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;492:107;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;553:7;578:13;492:107;:::o;14:177:12:-;160:25;;;148:2;133:18;;115:76::o"},"gasEstimates":{"creation":{"codeDepositCost":"28000","executionCost":"infinite","totalCost":"infinite"},"external":{"get_virtual_price()":"1006"}},"methodIdentifiers":{"get_virtual_price()":"bb7b8b80"}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_virtual_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC20 minting logic\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20Mintable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/tokens/CurvePoolMocked.sol\":\"CurvePoolMocked\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mocks/tokens/CurvePoolMocked.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nimport {ICurvePool} from \\\"../../oracles/interfaces/ICurvePoolV1.sol\\\";\\n\\n/**\\n * @title ERC20Mintable\\n * @dev ERC20 minting logic\\n */\\ncontract CurvePoolMocked is ICurvePool {\\n    uint256 virtual_price;\\n\\n    constructor(\\n        uint256 _virtual_price\\n    ) public {\\n        if(_virtual_price==0){\\n            _virtual_price = 1020000000000000000; //1.02 with 18 decimals\\n        }\\n        virtual_price = _virtual_price;\\n    }\\n\\n    function get_virtual_price() override external view returns (uint256){\\n        return virtual_price; \\n    }\\n}\\n\",\"keccak256\":\"0x481843a5993285064773b1541fb6f593cd59f63e4d598ba3710576583b1a853f\",\"license\":\"agpl-3.0\"},\"contracts/oracles/interfaces/ICurvePoolV1.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x58f8992dae5fdd0d425f8fc86d7cb3f59e61ba73ccc1111c281645d48dad4a72\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"contracts/mocks/tokens/CurvePoolMocked.sol:CurvePoolMocked","label":"virtual_price","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/oracles/ConvexOracle.sol":{"ConvexOracle":{"abi":[{"inputs":[{"internalType":"address","name":"curve_pool","type":"address"},{"internalType":"uint256[]","name":"prices","type":"uint256[]"},{"internalType":"uint16","name":"pid","type":"uint16"},{"internalType":"address","name":"convex_lp","type":"address"},{"internalType":"address","name":"curve_lp","type":"address"}],"name":"get_convex_price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061043d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632a417cc714610030575b600080fd5b61004361003e366004610230565b610059565b604051610050919061039d565b60405180910390f35b600080546040516336e5b51960e11b815282916001600160a01b031690636dcb6a329061008c908a908a90600401610347565b60206040518083038186803b1580156100a457600080fd5b505afa1580156100b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dc919061032f565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011957600080fd5b505afa15801561012d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610151919061032f565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561018e57600080fd5b505afa1580156101a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c6919061032f565b905060006101d58484846101e3565b9a9950505050505050505050565b6000816101f084866103c6565b6101fa91906103a6565b949350505050565b80356001600160a01b038116811461021957600080fd5b919050565b803561ffff8116811461021957600080fd5b600080600080600060a08688031215610247578081fd5b61025086610202565b945060208087013567ffffffffffffffff8082111561026d578384fd5b818901915089601f830112610280578384fd5b813581811115610292576102926103f1565b838102604051858282010181811085821117156102b1576102b16103f1565b604052828152858101935084860182860187018e10156102cf578788fd5b8795505b838610156102f15780358552600195909501949386019386016102d3565b508099505050505050506103076040870161021e565b925061031560608701610202565b915061032360808701610202565b90509295509295909350565b600060208284031215610340578081fd5b5051919050565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b8181101561039057845183529383019391830191600101610374565b5090979650505050505050565b90815260200190565b6000826103c157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156103ec57634e487b7160e01b81526011600452602481fd5b500290565b634e487b7160e01b600052604160045260246000fdfea26469706673582212203c5d9d69c7781c9adf711b1d2696723b07864fc3dcc5e53b43c289d3422d9fd664736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2A417CC7 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x230 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x39D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x36E5B519 PUSH1 0xE1 SHL DUP2 MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6DCB6A32 SWAP1 PUSH2 0x8C SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x347 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDC SWAP2 SWAP1 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C6 SWAP2 SWAP1 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1D5 DUP5 DUP5 DUP5 PUSH2 0x1E3 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1F0 DUP5 DUP7 PUSH2 0x3C6 JUMP JUMPDEST PUSH2 0x1FA SWAP2 SWAP1 PUSH2 0x3A6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x247 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x250 DUP7 PUSH2 0x202 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x26D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x280 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x292 JUMPI PUSH2 0x292 PUSH2 0x3F1 JUMP JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x2B1 JUMPI PUSH2 0x2B1 PUSH2 0x3F1 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP15 LT ISZERO PUSH2 0x2CF JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2F1 JUMPI DUP1 CALLDATALOAD DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0x2D3 JUMP JUMPDEST POP DUP1 SWAP10 POP POP POP POP POP POP POP PUSH2 0x307 PUSH1 0x40 DUP8 ADD PUSH2 0x21E JUMP JUMPDEST SWAP3 POP PUSH2 0x315 PUSH1 0x60 DUP8 ADD PUSH2 0x202 JUMP JUMPDEST SWAP2 POP PUSH2 0x323 PUSH1 0x80 DUP8 ADD PUSH2 0x202 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x340 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 DUP3 ADD SWAP2 SWAP1 PUSH1 0x60 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x390 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x374 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3C1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3EC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY 0x5D SWAP14 PUSH10 0xC7781C9ADF711B1D2696 PUSH19 0x3B07864FC3DCC5E53B43C289D3422D9FD66473 PUSH16 0x6C634300080000330000000000000000 ","sourceMap":"224:1113:1:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3578:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"65:124:12","statements":[{"nodeType":"YulAssignment","src":"75:29:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"97:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"84:12:12"},"nodeType":"YulFunctionCall","src":"84:20:12"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"75:5:12"}]},{"body":{"nodeType":"YulBlock","src":"167:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"176:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"179:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"169:6:12"},"nodeType":"YulFunctionCall","src":"169:12:12"},"nodeType":"YulExpressionStatement","src":"169:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"126:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"137:5:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"152:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"157:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"148:3:12"},"nodeType":"YulFunctionCall","src":"148:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"161:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"144:3:12"},"nodeType":"YulFunctionCall","src":"144:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"133:3:12"},"nodeType":"YulFunctionCall","src":"133:31:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"123:2:12"},"nodeType":"YulFunctionCall","src":"123:42:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"116:6:12"},"nodeType":"YulFunctionCall","src":"116:50:12"},"nodeType":"YulIf","src":"113:2:12"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"44:6:12","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"55:5:12","type":""}],"src":"14:175:12"},{"body":{"nodeType":"YulBlock","src":"244:111:12","statements":[{"nodeType":"YulAssignment","src":"254:29:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"276:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"263:12:12"},"nodeType":"YulFunctionCall","src":"263:20:12"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"254:5:12"}]},{"body":{"nodeType":"YulBlock","src":"333:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"342:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"345:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"335:6:12"},"nodeType":"YulFunctionCall","src":"335:12:12"},"nodeType":"YulExpressionStatement","src":"335:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"305:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"316:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"323:6:12","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"312:3:12"},"nodeType":"YulFunctionCall","src":"312:18:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"302:2:12"},"nodeType":"YulFunctionCall","src":"302:29:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"295:6:12"},"nodeType":"YulFunctionCall","src":"295:37:12"},"nodeType":"YulIf","src":"292:2:12"}]},"name":"abi_decode_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"223:6:12","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"234:5:12","type":""}],"src":"194:161:12"},{"body":{"nodeType":"YulBlock","src":"522:1300:12","statements":[{"body":{"nodeType":"YulBlock","src":"569:26:12","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"578:6:12"},{"name":"value4","nodeType":"YulIdentifier","src":"586:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"571:6:12"},"nodeType":"YulFunctionCall","src":"571:22:12"},"nodeType":"YulExpressionStatement","src":"571:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"543:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"552:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"539:3:12"},"nodeType":"YulFunctionCall","src":"539:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"564:3:12","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"535:3:12"},"nodeType":"YulFunctionCall","src":"535:33:12"},"nodeType":"YulIf","src":"532:2:12"},{"nodeType":"YulAssignment","src":"604:41:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"635:9:12"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"614:20:12"},"nodeType":"YulFunctionCall","src":"614:31:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"604:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"654:12:12","value":{"kind":"number","nodeType":"YulLiteral","src":"664:2:12","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"658:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"675:46:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"706:9:12"},{"name":"_1","nodeType":"YulIdentifier","src":"717:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"702:3:12"},"nodeType":"YulFunctionCall","src":"702:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"689:12:12"},"nodeType":"YulFunctionCall","src":"689:32:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"679:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"730:28:12","value":{"kind":"number","nodeType":"YulLiteral","src":"740:18:12","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"734:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"785:26:12","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"794:6:12"},{"name":"value4","nodeType":"YulIdentifier","src":"802:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"787:6:12"},"nodeType":"YulFunctionCall","src":"787:22:12"},"nodeType":"YulExpressionStatement","src":"787:22:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"773:6:12"},{"name":"_2","nodeType":"YulIdentifier","src":"781:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"770:2:12"},"nodeType":"YulFunctionCall","src":"770:14:12"},"nodeType":"YulIf","src":"767:2:12"},{"nodeType":"YulVariableDeclaration","src":"820:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"834:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"845:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"830:3:12"},"nodeType":"YulFunctionCall","src":"830:22:12"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"824:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"900:26:12","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"909:6:12"},{"name":"value4","nodeType":"YulIdentifier","src":"917:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"902:6:12"},"nodeType":"YulFunctionCall","src":"902:22:12"},"nodeType":"YulExpressionStatement","src":"902:22:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"879:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"883:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"875:3:12"},"nodeType":"YulFunctionCall","src":"875:13:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"890:7:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"871:3:12"},"nodeType":"YulFunctionCall","src":"871:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"864:6:12"},"nodeType":"YulFunctionCall","src":"864:35:12"},"nodeType":"YulIf","src":"861:2:12"},{"nodeType":"YulVariableDeclaration","src":"935:26:12","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"958:2:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"945:12:12"},"nodeType":"YulFunctionCall","src":"945:16:12"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"939:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"984:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"986:16:12"},"nodeType":"YulFunctionCall","src":"986:18:12"},"nodeType":"YulExpressionStatement","src":"986:18:12"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"976:2:12"},{"name":"_2","nodeType":"YulIdentifier","src":"980:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"973:2:12"},"nodeType":"YulFunctionCall","src":"973:10:12"},"nodeType":"YulIf","src":"970:2:12"},{"nodeType":"YulVariableDeclaration","src":"1015:21:12","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1029:2:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1033:2:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1025:3:12"},"nodeType":"YulFunctionCall","src":"1025:11:12"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1019:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1045:23:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1065:2:12","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1059:5:12"},"nodeType":"YulFunctionCall","src":"1059:9:12"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1049:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1077:42:12","value":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1103:6:12"},{"name":"_5","nodeType":"YulIdentifier","src":"1111:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1099:3:12"},"nodeType":"YulFunctionCall","src":"1099:15:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1116:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1095:3:12"},"nodeType":"YulFunctionCall","src":"1095:24:12"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1081:10:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1178:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1180:16:12"},"nodeType":"YulFunctionCall","src":"1180:18:12"},"nodeType":"YulExpressionStatement","src":"1180:18:12"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1137:10:12"},{"name":"_2","nodeType":"YulIdentifier","src":"1149:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1134:2:12"},"nodeType":"YulFunctionCall","src":"1134:18:12"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1157:10:12"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1169:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1154:2:12"},"nodeType":"YulFunctionCall","src":"1154:22:12"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1131:2:12"},"nodeType":"YulFunctionCall","src":"1131:46:12"},"nodeType":"YulIf","src":"1128:2:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1216:2:12","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1220:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1209:6:12"},"nodeType":"YulFunctionCall","src":"1209:22:12"},"nodeType":"YulExpressionStatement","src":"1209:22:12"},{"nodeType":"YulVariableDeclaration","src":"1240:17:12","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1251:6:12"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1244:3:12","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1273:6:12"},{"name":"_4","nodeType":"YulIdentifier","src":"1281:2:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1266:6:12"},"nodeType":"YulFunctionCall","src":"1266:18:12"},"nodeType":"YulExpressionStatement","src":"1266:18:12"},{"nodeType":"YulAssignment","src":"1293:22:12","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1304:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1312:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1300:3:12"},"nodeType":"YulFunctionCall","src":"1300:15:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1293:3:12"}]},{"nodeType":"YulVariableDeclaration","src":"1324:22:12","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1339:2:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1343:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1335:3:12"},"nodeType":"YulFunctionCall","src":"1335:11:12"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1328:3:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1392:26:12","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1401:6:12"},{"name":"value4","nodeType":"YulIdentifier","src":"1409:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1394:6:12"},"nodeType":"YulFunctionCall","src":"1394:22:12"},"nodeType":"YulExpressionStatement","src":"1394:22:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1369:2:12"},{"name":"_5","nodeType":"YulIdentifier","src":"1373:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1365:3:12"},"nodeType":"YulFunctionCall","src":"1365:11:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1378:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1361:3:12"},"nodeType":"YulFunctionCall","src":"1361:20:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1383:7:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1358:2:12"},"nodeType":"YulFunctionCall","src":"1358:33:12"},"nodeType":"YulIf","src":"1355:2:12"},{"nodeType":"YulVariableDeclaration","src":"1427:15:12","value":{"name":"value4","nodeType":"YulIdentifier","src":"1436:6:12"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1431:1:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1496:118:12","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1517:3:12"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1535:3:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1522:12:12"},"nodeType":"YulFunctionCall","src":"1522:17:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1510:6:12"},"nodeType":"YulFunctionCall","src":"1510:30:12"},"nodeType":"YulExpressionStatement","src":"1510:30:12"},{"nodeType":"YulAssignment","src":"1553:19:12","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1564:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1569:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1560:3:12"},"nodeType":"YulFunctionCall","src":"1560:12:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1553:3:12"}]},{"nodeType":"YulAssignment","src":"1585:19:12","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1596:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1601:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1592:3:12"},"nodeType":"YulFunctionCall","src":"1592:12:12"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1585:3:12"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1462:1:12"},{"name":"_4","nodeType":"YulIdentifier","src":"1465:2:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1459:2:12"},"nodeType":"YulFunctionCall","src":"1459:9:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1469:18:12","statements":[{"nodeType":"YulAssignment","src":"1471:14:12","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1480:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"1483:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1476:3:12"},"nodeType":"YulFunctionCall","src":"1476:9:12"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1471:1:12"}]}]},"pre":{"nodeType":"YulBlock","src":"1455:3:12","statements":[]},"src":"1451:163:12"},{"nodeType":"YulAssignment","src":"1623:16:12","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1633:6:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1623:6:12"}]},{"nodeType":"YulAssignment","src":"1648:49:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1682:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1693:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1678:3:12"},"nodeType":"YulFunctionCall","src":"1678:18:12"}],"functionName":{"name":"abi_decode_t_uint16","nodeType":"YulIdentifier","src":"1658:19:12"},"nodeType":"YulFunctionCall","src":"1658:39:12"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1648:6:12"}]},{"nodeType":"YulAssignment","src":"1706:50:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1741:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1752:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1737:3:12"},"nodeType":"YulFunctionCall","src":"1737:18:12"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1716:20:12"},"nodeType":"YulFunctionCall","src":"1716:40:12"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1706:6:12"}]},{"nodeType":"YulAssignment","src":"1765:51:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1800:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1811:3:12","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1796:3:12"},"nodeType":"YulFunctionCall","src":"1796:19:12"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1775:20:12"},"nodeType":"YulFunctionCall","src":"1775:41:12"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1765:6:12"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_uint16t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"456:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"467:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"479:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"487:6:12","type":""},{"name":"value2","nodeType":"YulTypedName","src":"495:6:12","type":""},{"name":"value3","nodeType":"YulTypedName","src":"503:6:12","type":""},{"name":"value4","nodeType":"YulTypedName","src":"511:6:12","type":""}],"src":"360:1462:12"},{"body":{"nodeType":"YulBlock","src":"1908:113:12","statements":[{"body":{"nodeType":"YulBlock","src":"1954:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1963:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"1971:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1956:6:12"},"nodeType":"YulFunctionCall","src":"1956:22:12"},"nodeType":"YulExpressionStatement","src":"1956:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1929:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"1938:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1925:3:12"},"nodeType":"YulFunctionCall","src":"1925:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"1950:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1921:3:12"},"nodeType":"YulFunctionCall","src":"1921:32:12"},"nodeType":"YulIf","src":"1918:2:12"},{"nodeType":"YulAssignment","src":"1989:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2005:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1999:5:12"},"nodeType":"YulFunctionCall","src":"1999:16:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1989:6:12"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1874:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1885:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1897:6:12","type":""}],"src":"1827:194:12"},{"body":{"nodeType":"YulBlock","src":"2205:553:12","statements":[{"nodeType":"YulVariableDeclaration","src":"2215:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2233:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2244:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2229:3:12"},"nodeType":"YulFunctionCall","src":"2229:18:12"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"2219:6:12","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2263:9:12"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2278:6:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2294:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2299:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2290:3:12"},"nodeType":"YulFunctionCall","src":"2290:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"2303:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2286:3:12"},"nodeType":"YulFunctionCall","src":"2286:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2274:3:12"},"nodeType":"YulFunctionCall","src":"2274:32:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2256:6:12"},"nodeType":"YulFunctionCall","src":"2256:51:12"},"nodeType":"YulExpressionStatement","src":"2256:51:12"},{"nodeType":"YulVariableDeclaration","src":"2316:12:12","value":{"kind":"number","nodeType":"YulLiteral","src":"2326:2:12","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2320:2:12","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2348:9:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2359:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2344:3:12"},"nodeType":"YulFunctionCall","src":"2344:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"2364:2:12","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2337:6:12"},"nodeType":"YulFunctionCall","src":"2337:30:12"},"nodeType":"YulExpressionStatement","src":"2337:30:12"},{"nodeType":"YulVariableDeclaration","src":"2376:17:12","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"2387:6:12"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2380:3:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2402:27:12","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2422:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2416:5:12"},"nodeType":"YulFunctionCall","src":"2416:13:12"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2406:6:12","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"2445:6:12"},{"name":"length","nodeType":"YulIdentifier","src":"2453:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2438:6:12"},"nodeType":"YulFunctionCall","src":"2438:22:12"},"nodeType":"YulExpressionStatement","src":"2438:22:12"},{"nodeType":"YulAssignment","src":"2469:25:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2480:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2491:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2476:3:12"},"nodeType":"YulFunctionCall","src":"2476:18:12"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2469:3:12"}]},{"nodeType":"YulVariableDeclaration","src":"2503:29:12","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2521:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2529:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2517:3:12"},"nodeType":"YulFunctionCall","src":"2517:15:12"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2507:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2541:13:12","value":{"name":"tail","nodeType":"YulIdentifier","src":"2550:4:12"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2545:1:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"2612:120:12","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2633:3:12"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2644:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2638:5:12"},"nodeType":"YulFunctionCall","src":"2638:13:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2626:6:12"},"nodeType":"YulFunctionCall","src":"2626:26:12"},"nodeType":"YulExpressionStatement","src":"2626:26:12"},{"nodeType":"YulAssignment","src":"2665:19:12","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2676:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2681:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2672:3:12"},"nodeType":"YulFunctionCall","src":"2672:12:12"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2665:3:12"}]},{"nodeType":"YulAssignment","src":"2697:25:12","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2711:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2719:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2707:3:12"},"nodeType":"YulFunctionCall","src":"2707:15:12"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2697:6:12"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2574:1:12"},{"name":"length","nodeType":"YulIdentifier","src":"2577:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2571:2:12"},"nodeType":"YulFunctionCall","src":"2571:13:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2585:18:12","statements":[{"nodeType":"YulAssignment","src":"2587:14:12","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2596:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"2599:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2592:3:12"},"nodeType":"YulFunctionCall","src":"2592:9:12"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2587:1:12"}]}]},"pre":{"nodeType":"YulBlock","src":"2567:3:12","statements":[]},"src":"2563:169:12"},{"nodeType":"YulAssignment","src":"2741:11:12","value":{"name":"pos","nodeType":"YulIdentifier","src":"2749:3:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2741:4:12"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2166:9:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2177:6:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2185:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2196:4:12","type":""}],"src":"2026:732:12"},{"body":{"nodeType":"YulBlock","src":"2864:76:12","statements":[{"nodeType":"YulAssignment","src":"2874:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2886:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2897:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2882:3:12"},"nodeType":"YulFunctionCall","src":"2882:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2874:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2916:9:12"},{"name":"value0","nodeType":"YulIdentifier","src":"2927:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2909:6:12"},"nodeType":"YulFunctionCall","src":"2909:25:12"},"nodeType":"YulExpressionStatement","src":"2909:25:12"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2833:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2844:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2855:4:12","type":""}],"src":"2763:177:12"},{"body":{"nodeType":"YulBlock","src":"2991:171:12","statements":[{"body":{"nodeType":"YulBlock","src":"3022:111:12","statements":[{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"3043:1:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3050:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3055:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3046:3:12"},"nodeType":"YulFunctionCall","src":"3046:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3036:6:12"},"nodeType":"YulFunctionCall","src":"3036:31:12"},"nodeType":"YulExpressionStatement","src":"3036:31:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3087:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3090:4:12","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3080:6:12"},"nodeType":"YulFunctionCall","src":"3080:15:12"},"nodeType":"YulExpressionStatement","src":"3080:15:12"},{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"3115:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"3118:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3108:6:12"},"nodeType":"YulFunctionCall","src":"3108:15:12"},"nodeType":"YulExpressionStatement","src":"3108:15:12"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3011:1:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3004:6:12"},"nodeType":"YulFunctionCall","src":"3004:9:12"},"nodeType":"YulIf","src":"3001:2:12"},{"nodeType":"YulAssignment","src":"3142:14:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3151:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"3154:1:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3147:3:12"},"nodeType":"YulFunctionCall","src":"3147:9:12"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3142:1:12"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2976:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"2979:1:12","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"2985:1:12","type":""}],"src":"2945:217:12"},{"body":{"nodeType":"YulBlock","src":"3219:225:12","statements":[{"body":{"nodeType":"YulBlock","src":"3286:123:12","statements":[{"expression":{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3307:7:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3320:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3325:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3316:3:12"},"nodeType":"YulFunctionCall","src":"3316:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3300:6:12"},"nodeType":"YulFunctionCall","src":"3300:37:12"},"nodeType":"YulExpressionStatement","src":"3300:37:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3357:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3360:4:12","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3350:6:12"},"nodeType":"YulFunctionCall","src":"3350:15:12"},"nodeType":"YulExpressionStatement","src":"3350:15:12"},{"expression":{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3385:7:12"},{"kind":"number","nodeType":"YulLiteral","src":"3394:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3378:6:12"},"nodeType":"YulFunctionCall","src":"3378:21:12"},"nodeType":"YulExpressionStatement","src":"3378:21:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3250:1:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3243:6:12"},"nodeType":"YulFunctionCall","src":"3243:9:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3236:6:12"},"nodeType":"YulFunctionCall","src":"3236:17:12"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3258:1:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3269:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3265:3:12"},"nodeType":"YulFunctionCall","src":"3265:6:12"},{"name":"x","nodeType":"YulIdentifier","src":"3273:1:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3261:3:12"},"nodeType":"YulFunctionCall","src":"3261:14:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3255:2:12"},"nodeType":"YulFunctionCall","src":"3255:21:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3232:3:12"},"nodeType":"YulFunctionCall","src":"3232:45:12"},"nodeType":"YulIf","src":"3229:2:12"},{"nodeType":"YulAssignment","src":"3418:20:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3433:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"3436:1:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3429:3:12"},"nodeType":"YulFunctionCall","src":"3429:9:12"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"3418:7:12"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3198:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"3201:1:12","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"3207:7:12","type":""}],"src":"3167:277:12"},{"body":{"nodeType":"YulBlock","src":"3481:95:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3498:1:12","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3505:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3510:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3501:3:12"},"nodeType":"YulFunctionCall","src":"3501:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3491:6:12"},"nodeType":"YulFunctionCall","src":"3491:31:12"},"nodeType":"YulExpressionStatement","src":"3491:31:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3538:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3541:4:12","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3531:6:12"},"nodeType":"YulFunctionCall","src":"3531:15:12"},"nodeType":"YulExpressionStatement","src":"3531:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3562:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3565:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3555:6:12"},"nodeType":"YulFunctionCall","src":"3555:15:12"},"nodeType":"YulExpressionStatement","src":"3555:15:12"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3449:127:12"}]},"contents":"{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_uint16t_addresst_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        value0 := abi_decode_t_address(headStart)\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(value4, value4) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value4, value4) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := mul(_4, _1)\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, _5), _1)\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let src := add(_3, _1)\n        if gt(add(add(_3, _5), _1), dataEnd) { revert(value4, value4) }\n        let i := value4\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value1 := memPtr\n        value2 := abi_decode_t_uint16(add(headStart, 64))\n        value3 := abi_decode_t_address(add(headStart, 96))\n        value4 := abi_decode_t_address(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        let _1 := 32\n        mstore(add(headStart, _1), 64)\n        let pos := tail_1\n        let length := mload(value1)\n        mstore(tail_1, length)\n        pos := add(headStart, 96)\n        let srcPtr := add(value1, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x)))\n        {\n            mstore(product, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(product, 0x24)\n        }\n        product := mul(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c80632a417cc714610030575b600080fd5b61004361003e366004610230565b610059565b604051610050919061039d565b60405180910390f35b600080546040516336e5b51960e11b815282916001600160a01b031690636dcb6a329061008c908a908a90600401610347565b60206040518083038186803b1580156100a457600080fd5b505afa1580156100b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dc919061032f565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011957600080fd5b505afa15801561012d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610151919061032f565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561018e57600080fd5b505afa1580156101a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c6919061032f565b905060006101d58484846101e3565b9a9950505050505050505050565b6000816101f084866103c6565b6101fa91906103a6565b949350505050565b80356001600160a01b038116811461021957600080fd5b919050565b803561ffff8116811461021957600080fd5b600080600080600060a08688031215610247578081fd5b61025086610202565b945060208087013567ffffffffffffffff8082111561026d578384fd5b818901915089601f830112610280578384fd5b813581811115610292576102926103f1565b838102604051858282010181811085821117156102b1576102b16103f1565b604052828152858101935084860182860187018e10156102cf578788fd5b8795505b838610156102f15780358552600195909501949386019386016102d3565b508099505050505050506103076040870161021e565b925061031560608701610202565b915061032360808701610202565b90509295509295909350565b600060208284031215610340578081fd5b5051919050565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b8181101561039057845183529383019391830191600101610374565b5090979650505050505050565b90815260200190565b6000826103c157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156103ec57634e487b7160e01b81526011600452602481fd5b500290565b634e487b7160e01b600052604160045260246000fdfea26469706673582212203c5d9d69c7781c9adf711b1d2696723b07864fc3dcc5e53b43c289d3422d9fd664736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2A417CC7 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x230 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x39D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x36E5B519 PUSH1 0xE1 SHL DUP2 MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6DCB6A32 SWAP1 PUSH2 0x8C SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x347 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDC SWAP2 SWAP1 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C6 SWAP2 SWAP1 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1D5 DUP5 DUP5 DUP5 PUSH2 0x1E3 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1F0 DUP5 DUP7 PUSH2 0x3C6 JUMP JUMPDEST PUSH2 0x1FA SWAP2 SWAP1 PUSH2 0x3A6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x247 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x250 DUP7 PUSH2 0x202 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x26D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x280 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x292 JUMPI PUSH2 0x292 PUSH2 0x3F1 JUMP JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x2B1 JUMPI PUSH2 0x2B1 PUSH2 0x3F1 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP15 LT ISZERO PUSH2 0x2CF JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2F1 JUMPI DUP1 CALLDATALOAD DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0x2D3 JUMP JUMPDEST POP DUP1 SWAP10 POP POP POP POP POP POP POP PUSH2 0x307 PUSH1 0x40 DUP8 ADD PUSH2 0x21E JUMP JUMPDEST SWAP3 POP PUSH2 0x315 PUSH1 0x60 DUP8 ADD PUSH2 0x202 JUMP JUMPDEST SWAP2 POP PUSH2 0x323 PUSH1 0x80 DUP8 ADD PUSH2 0x202 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x340 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 DUP3 ADD SWAP2 SWAP1 PUSH1 0x60 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x390 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x374 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3C1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3EC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY 0x5D SWAP14 PUSH10 0xC7781C9ADF711B1D2696 PUSH19 0x3B07864FC3DCC5E53B43C289D3422D9FD66473 PUSH16 0x6C634300080000330000000000000000 ","sourceMap":"224:1113:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;481:614;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;670:7;714:12;;:42;;-1:-1:-1;;;714:42:1;;670:7;;-1:-1:-1;;;;;714:12:1;;:22;;:42;;737:10;;749:6;;714:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;689:67;;793:20;823:8;-1:-1:-1;;;;;816:28:1;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;793:53;;856:21;887:9;-1:-1:-1;;;;;880:29:1;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;856:55;;922:20;945:113;981:14;1009:12;1035:13;945:22;:113::i;:::-;922:136;481:614;-1:-1:-1;;;;;;;;;;481:614:1:o;1101:234::-;1255:7;1315:13;1282:29;1299:12;1282:14;:29;:::i;:::-;1281:47;;;;:::i;:::-;1274:54;1101:234;-1:-1:-1;;;;1101:234:1:o;14:175:12:-;84:20;;-1:-1:-1;;;;;133:31:12;;123:42;;113:2;;179:1;176;169:12;113:2;65:124;;;:::o;194:161::-;263:20;;323:6;312:18;;302:29;;292:2;;345:1;342;335:12;360:1462;;;;;;564:3;552:9;543:7;539:23;535:33;532:2;;;586:6;578;571:22;532:2;614:31;635:9;614:31;:::i;:::-;604:41;;664:2;717;706:9;702:18;689:32;740:18;781:2;773:6;770:14;767:2;;;802:6;794;787:22;767:2;845:6;834:9;830:22;820:32;;890:7;883:4;879:2;875:13;871:27;861:2;;917:6;909;902:22;861:2;958;945:16;980:2;976;973:10;970:2;;;986:18;;:::i;:::-;1033:2;1029;1025:11;1065:2;1059:9;1116:2;1111;1103:6;1099:15;1095:24;1169:6;1157:10;1154:22;1149:2;1137:10;1134:18;1131:46;1128:2;;;1180:18;;:::i;:::-;1216:2;1209:22;1266:18;;;1300:15;;;;-1:-1:-1;1335:11:12;;;1365;;;1361:20;;1358:33;-1:-1:-1;1355:2:12;;;1409:6;1401;1394:22;1355:2;1436:6;1427:15;;1451:163;1465:2;1462:1;1459:9;1451:163;;;1522:17;;1510:30;;1483:1;1476:9;;;;;1560:12;;;;1592;;1451:163;;;1455:3;1633:6;1623:16;;;;;;;;1658:39;1693:2;1682:9;1678:18;1658:39;:::i;:::-;1648:49;;1716:40;1752:2;1741:9;1737:18;1716:40;:::i;:::-;1706:50;;1775:41;1811:3;1800:9;1796:19;1775:41;:::i;:::-;1765:51;;522:1300;;;;;;;;:::o;1827:194::-;;1950:2;1938:9;1929:7;1925:23;1921:32;1918:2;;;1971:6;1963;1956:22;1918:2;-1:-1:-1;1999:16:12;;1908:113;-1:-1:-1;1908:113:12:o;2026:732::-;-1:-1:-1;;;;;2274:32:12;;2256:51;;2244:2;2326;2344:18;;;2337:30;;;2416:13;;2229:18;;;2438:22;;;2026:732;;2517:15;;;;2326:2;2491;2476:18;;;2026:732;2563:169;2577:6;2574:1;2571:13;2563:169;;;2638:13;;2626:26;;2707:15;;;;2672:12;;;;2599:1;2592:9;2563:169;;;-1:-1:-1;2749:3:12;;2205:553;-1:-1:-1;;;;;;;2205:553:12:o;2763:177::-;2909:25;;;2897:2;2882:18;;2864:76::o;2945:217::-;;3011:1;3001:2;;-1:-1:-1;;;3036:31:12;;3090:4;3087:1;3080:15;3118:4;3043:1;3108:15;3001:2;-1:-1:-1;3147:9:12;;2991:171::o;3167:277::-;;3273:1;3269;3265:6;3261:14;3258:1;3255:21;3250:1;3243:9;3236:17;3232:45;3229:2;;;-1:-1:-1;;;3300:37:12;;3360:4;3357:1;3350:15;3394:4;3307:7;3378:21;3229:2;-1:-1:-1;3429:9:12;;3219:225::o;3449:127::-;3510:10;3505:3;3501:20;3498:1;3491:31;3541:4;3538:1;3531:15;3565:4;3562:1;3555:15"},"gasEstimates":{"creation":{"codeDepositCost":"217000","executionCost":"257","totalCost":"217257"},"external":{"get_convex_price(address,uint256[],uint16,address,address)":"infinite"},"internal":{"calculate_convex_price(uint256,uint256,uint256)":"181"}},"methodIdentifiers":{"get_convex_price(address,uint256[],uint16,address,address)":"2a417cc7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curve_pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"pid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"convex_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curve_lp\",\"type\":\"address\"}],\"name\":\"get_convex_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/ConvexOracle.sol\":\"ConvexOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/ConvexOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n//import {IBooster} from \\\"../utils/interfaces/IBooster.sol\\\";\\nimport {CurveOracleV1} from \\\"./CurveOracle.sol\\\";\\nimport {IERC20} from \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract ConvexOracle {\\n    //address private constant BOOSTER = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31; //convex deposit contract\\n\\n    CurveOracleV1 private curve_oracle;\\n\\n    //get curve lp tokens price, get convex lp token \\\"depositToken\\\", divide\\n    function get_convex_price(\\n        address curve_pool,\\n        uint256[] memory prices,\\n        uint16 pid,\\n        address convex_lp,\\n        address curve_lp\\n    ) external view returns (uint256) {\\n        uint256 curve_lp_price = curve_oracle.get_price(curve_pool, prices); //returns 1e36 scaled uint\\n        uint256 curve_supply = IERC20(curve_lp).totalSupply();\\n        uint256 convex_supply = IERC20(convex_lp).totalSupply();\\n\\n        uint256 convex_price = calculate_convex_price(\\n            curve_lp_price,\\n            curve_supply,\\n            convex_supply\\n        );\\n\\n        return convex_price;\\n    }\\n\\n    function calculate_convex_price(\\n        uint256 curve_lp_price,\\n        uint256 curve_supply,\\n        uint256 convex_supply\\n    ) internal pure returns (uint256) {\\n        return (curve_lp_price * curve_supply) / convex_supply;\\n    }\\n}\\n\",\"keccak256\":\"0x3e1c131d34491357ebdfb1ccd515b6da87a55d14b752e9fab94e8a8042e1a10d\",\"license\":\"UNLICENSED\"},\"contracts/oracles/CurveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport {ICurvePool} from \\\"./interfaces/ICurvePoolV1.sol\\\";\\nimport {ICurveOracle} from \\\"./interfaces/ICurveOracle.sol\\\";\\nimport {vMath} from \\\"./libs/vMath.sol\\\";\\n\\n//used for all curveV1 tokens, no need to redeploy\\ncontract CurveOracleV1 is ICurveOracle {\\n    //where total supply is the total supply of the LP token in the pools calculated using the virtual price\\n    function get_price(address curve_pool, uint256[] memory prices)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 virtual_price = ICurvePool(curve_pool).get_virtual_price();\\n\\n        uint256 lp_price = calculate_v1_token_price(virtual_price, prices);\\n\\n        return lp_price;\\n    }\\n\\n    //where virtual price is the price of the pool in USD\\n    //returns lp_value = virtual price x min(prices);\\n    function calculate_v1_token_price(\\n        uint256 virtual_price,\\n        uint256[] memory prices\\n    ) public pure returns (uint256) {\\n        uint256 min = vMath.min(prices);\\n        return virtual_price * min;\\n    }\\n}\\n\",\"keccak256\":\"0xcceb33cc2bcfa100c0fb64c0f29f5226bf4f9e6a56476f218b690564b201f2f7\",\"license\":\"UNLICENSED\"},\"contracts/oracles/interfaces/ICurveOracle.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurveOracle {\\n    function get_price(address curve_pool, uint256[] memory prices)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xdda871f8372f09487237b4047dbbcc88810eb55c357b2e91e13a068e043d4179\"},\"contracts/oracles/interfaces/ICurvePoolV1.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x58f8992dae5fdd0d425f8fc86d7cb3f59e61ba73ccc1111c281645d48dad4a72\"},\"contracts/oracles/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x647c6703e37aa5feb0eac5d74f41edb481254bc120e470e336561297b47999a8\"},\"contracts/oracles/libs/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc1552fe037c973c1ab30f607708735de7626eb22dcf6b2a02f2a39fa5d2b965\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracles/libs/IntegralMath.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Uint.sol\\\";\\n\\nlibrary IntegralMath {\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the binary logarithm of `n`\\n     */\\n    function floorLog2(uint256 n) internal pure returns (uint8) {\\n        unchecked {\\n            uint8 res = 0;\\n\\n            if (n < 256) {\\n                // at most 8 iterations\\n                while (n > 1) {\\n                    n >>= 1;\\n                    res += 1;\\n                }\\n            } else {\\n                // exactly 8 iterations\\n                for (uint8 s = 128; s > 0; s >>= 1) {\\n                    if (n >= 1 << s) {\\n                        n >>= s;\\n                        res |= s;\\n                    }\\n                }\\n            }\\n\\n            return res;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the square root of `n`\\n     */\\n    function floorSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n > 0) {\\n                uint256 x = n / 2 + 1;\\n                uint256 y = (x + n / x) / 2;\\n                while (x > y) {\\n                    x = y;\\n                    y = (x + n / x) / 2;\\n                }\\n                return x;\\n            }\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the square root of `n`\\n     */\\n    function ceilSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorSqrt(n);\\n            return x**2 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the cubic root of `n`\\n     */\\n    function floorCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = 0;\\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\n                x <<= 1;\\n                uint256 z = 3 * x * (x + 1) + 1;\\n                if (n / y >= z) {\\n                    n -= y * z;\\n                    x += 1;\\n                }\\n            }\\n            return x;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the cubic root of `n`\\n     */\\n    function ceilCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorCbrt(n);\\n            return x**3 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the nearest integer to the quotient of `n` and `d` (or `n / d`)\\n     */\\n    function roundDiv(uint256 n, uint256 d) internal pure returns (uint256) {\\n        unchecked {\\n            return n / d + (n % d) / (d - d / 2);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            (uint256 xyh, uint256 xyl) = mul512(x, y);\\n            if (xyh == 0) {\\n                // `x * y < 2 ^ 256`\\n                return xyl / z;\\n            }\\n            if (xyh < z) {\\n                // `x * y / z < 2 ^ 256`\\n                uint256 m = mulMod(x, y, z); // `m = x * y % z`\\n                (uint256 nh, uint256 nl) = sub512(xyh, xyl, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n                if (nh == 0) {\\n                    // `n < 2 ^ 256`\\n                    return nl / z;\\n                }\\n                uint256 p = unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n                uint256 q = div512(nh, nl, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n                uint256 r = inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n                return unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n            }\\n            revert(); // `x * y / z >= 2 ^ 256`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 w = mulDivF(x, y, z);\\n            if (mulMod(x, y, z) > 0) return safeAdd(w, 1);\\n            return w;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        unchecked {\\n            uint256 p = mulModMax(x, y);\\n            uint256 q = unsafeMul(x, y);\\n            if (p >= q) return (p - q, q);\\n            return (unsafeSub(p, q) - 1, q);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `2 ^ 256 * xh + xl - y`, where `2 ^ 256 * xh + xl >= y`\\n     */\\n    function sub512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 y\\n    ) private pure returns (uint256, uint256) {\\n        unchecked {\\n            if (xl >= y) return (xh, xl - y);\\n            return (xh - 1, unsafeSub(xl, y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `(2 ^ 256 * xh + xl) / pow2n`, where `xl` is divisible by `pow2n`\\n     */\\n    function div512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 pow2n\\n    ) private pure returns (uint256) {\\n        unchecked {\\n            uint256 pow2nInv = unsafeAdd(unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n            return unsafeMul(xh, pow2nInv) | (xl / pow2n); // `(xh << (256 - n)) | (xl >> n)`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the inverse of `d` modulo `2 ^ 256`, where `d` is congruent to `1` modulo `2`\\n     */\\n    function inv256(uint256 d) private pure returns (uint256) {\\n        unchecked {\\n            // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n            uint256 x = 1;\\n            for (uint256 i = 0; i < 8; ++i)\\n                x = unsafeMul(x, unsafeSub(2, unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n            return x;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2433205309bedeec21e98639f6e1b9ae4b72bddfd16d3c7caa23f0bedd74c07a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nuint256 constant MAX_VAL = type(uint256).max;\\n\\n// reverts on overflow\\nfunction safeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    return x + y;\\n}\\n\\n// does not revert on overflow\\nfunction unsafeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x + y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeSub(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x - y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeMul(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x * y;\\n    }\\n}\\n\\n// does not overflow\\nfunction mulModMax(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, MAX_VAL);\\n    }\\n}\\n\\n// does not overflow\\nfunction mulMod(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z\\n) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x998fcec9a910b59ed67db5af0939b271f062585a8c16a614b529197ed86d0a8d\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/vMath.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nimport {FixedPointMathLib} from \\\"./FixedPointMathLib.sol\\\";\\nimport {IntegralMath} from \\\"./IntegralMath.sol\\\";\\n\\nlibrary vMath {\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function min(uint256[] calldata array) external pure returns (uint256) {\\n        uint256 min = array[0];\\n        for (uint8 i = 1; i < array.length; i++) {\\n            if (min > array[i]) {\\n                min = array[i];\\n            }\\n        }\\n        return min;\\n    }\\n\\n    function product(uint256[] calldata nums) external pure returns (uint256) {\\n        uint256 product = nums[0];\\n        for (uint256 i = 1; i < nums.length; i++) {\\n            product *= nums[i];\\n        }\\n        return product;\\n    }\\n\\n    //limited to curve pools only, either 2 or 3 assets (mostly 2)\\n    function geometric_mean(uint8 n, uint256 product)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        if (n == 2) {\\n            return FixedPointMathLib.sqrt(product);\\n        } else {\\n            //n == 3\\n            return IntegralMath.floorCbrt(product);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x771260414afb50c4937cc8185436eadf2292162955a4ea25cb1b8405d9a0e0fb\"}},\"version\":1}","storageLayout":{"storage":[{"astId":46,"contract":"contracts/oracles/ConvexOracle.sol:ConvexOracle","label":"curve_oracle","offset":0,"slot":"0","type":"t_contract(CurveOracleV1)248"}],"types":{"t_contract(CurveOracleV1)248":{"encoding":"inplace","label":"contract CurveOracleV1","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/oracles/ConvexOracleV2.sol":{"ConvexOracleV2":{"abi":[{"inputs":[{"internalType":"contract CurveOracleV2","name":"_curve_oracle","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"curve_pool","type":"address"},{"internalType":"uint256[]","name":"prices","type":"uint256[]"},{"internalType":"uint16","name":"pid","type":"uint16"},{"internalType":"address","name":"convex_lp","type":"address"},{"internalType":"address","name":"curve_lp","type":"address"}],"name":"get_convex_price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:347:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"116:229:12","statements":[{"body":{"nodeType":"YulBlock","src":"162:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"171:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"179:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"164:6:12"},"nodeType":"YulFunctionCall","src":"164:22:12"},"nodeType":"YulExpressionStatement","src":"164:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"137:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"146:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"133:3:12"},"nodeType":"YulFunctionCall","src":"133:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"158:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"129:3:12"},"nodeType":"YulFunctionCall","src":"129:32:12"},"nodeType":"YulIf","src":"126:2:12"},{"nodeType":"YulVariableDeclaration","src":"197:29:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"216:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:12"},"nodeType":"YulFunctionCall","src":"210:16:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"201:5:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"289:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"298:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"306:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"291:6:12"},"nodeType":"YulFunctionCall","src":"291:22:12"},"nodeType":"YulExpressionStatement","src":"291:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"248:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"259:5:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"279:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"270:3:12"},"nodeType":"YulFunctionCall","src":"270:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"283:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"266:3:12"},"nodeType":"YulFunctionCall","src":"266:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"255:3:12"},"nodeType":"YulFunctionCall","src":"255:31:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"245:2:12"},"nodeType":"YulFunctionCall","src":"245:42:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"238:6:12"},"nodeType":"YulFunctionCall","src":"238:50:12"},"nodeType":"YulIf","src":"235:2:12"},{"nodeType":"YulAssignment","src":"324:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"334:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"324:6:12"}]}]},"name":"abi_decode_tuple_t_contract$_CurveOracleV2_$332_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"82:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"93:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"105:6:12","type":""}],"src":"14:331:12"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_CurveOracleV2_$332_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161036838038061036883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6102d7806100916000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632a417cc714610030575b600080fd5b61004361003e366004610115565b610059565b6040516100509190610282565b60405180910390f35b600080546040516336e5b51960e11b815282916001600160a01b031690636dcb6a329061008c908a908a9060040161022c565b60206040518083038186803b1580156100a457600080fd5b505afa1580156100b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dc9190610214565b979650505050505050565b80356001600160a01b03811681146100fe57600080fd5b919050565b803561ffff811681146100fe57600080fd5b600080600080600060a0868803121561012c578081fd5b610135866100e7565b945060208087013567ffffffffffffffff80821115610152578384fd5b818901915089601f830112610165578384fd5b8135818111156101775761017761028b565b838102604051858282010181811085821117156101965761019661028b565b604052828152858101935084860182860187018e10156101b4578788fd5b8795505b838610156101d65780358552600195909501949386019386016101b8565b508099505050505050506101ec60408701610103565b92506101fa606087016100e7565b9150610208608087016100e7565b90509295509295909350565b600060208284031215610225578081fd5b5051919050565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b8181101561027557845183529383019391830191600101610259565b5090979650505050505050565b90815260200190565b634e487b7160e01b600052604160045260246000fdfea264697066735822122001e1cb7579a58d65c10cd7208cb9f435a817ac0ceb5c70c1bd39f292e1d116df64736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x368 CODESIZE SUB DUP1 PUSH2 0x368 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x54 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x65 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7B JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2D7 DUP1 PUSH2 0x91 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2A417CC7 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x115 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x282 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x36E5B519 PUSH1 0xE1 SHL DUP2 MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6DCB6A32 SWAP1 PUSH2 0x8C SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x22C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDC SWAP2 SWAP1 PUSH2 0x214 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x12C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x135 DUP7 PUSH2 0xE7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x152 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x165 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x177 JUMPI PUSH2 0x177 PUSH2 0x28B JUMP JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x196 JUMPI PUSH2 0x196 PUSH2 0x28B JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP15 LT ISZERO PUSH2 0x1B4 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1D6 JUMPI DUP1 CALLDATALOAD DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0x1B8 JUMP JUMPDEST POP DUP1 SWAP10 POP POP POP POP POP POP POP PUSH2 0x1EC PUSH1 0x40 DUP8 ADD PUSH2 0x103 JUMP JUMPDEST SWAP3 POP PUSH2 0x1FA PUSH1 0x60 DUP8 ADD PUSH2 0xE7 JUMP JUMPDEST SWAP2 POP PUSH2 0x208 PUSH1 0x80 DUP8 ADD PUSH2 0xE7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x225 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 DUP3 ADD SWAP2 SWAP1 PUSH1 0x60 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x275 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x259 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD 0xE1 0xCB PUSH22 0x79A58D65C10CD7208CB9F435A817AC0CEB5C70C1BD39 CALLCODE SWAP3 0xE1 0xD1 AND 0xDF PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ","sourceMap":"371:1393:2:-:0;;;670:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;721:12;:28;;-1:-1:-1;;;;;;721:28:2;-1:-1:-1;;;;;721:28:2;;;;;;;;;;371:1393;;14:331:12;;158:2;146:9;137:7;133:23;129:32;126:2;;;179:6;171;164:22;126:2;210:16;;-1:-1:-1;;;;;255:31:12;;245:42;;235:2;;306:6;298;291:22;235:2;334:5;116:229;-1:-1:-1;;;116:229:12:o;:::-;371:1393:2;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3074:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"65:124:12","statements":[{"nodeType":"YulAssignment","src":"75:29:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"97:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"84:12:12"},"nodeType":"YulFunctionCall","src":"84:20:12"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"75:5:12"}]},{"body":{"nodeType":"YulBlock","src":"167:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"176:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"179:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"169:6:12"},"nodeType":"YulFunctionCall","src":"169:12:12"},"nodeType":"YulExpressionStatement","src":"169:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"126:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"137:5:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"152:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"157:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"148:3:12"},"nodeType":"YulFunctionCall","src":"148:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"161:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"144:3:12"},"nodeType":"YulFunctionCall","src":"144:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"133:3:12"},"nodeType":"YulFunctionCall","src":"133:31:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"123:2:12"},"nodeType":"YulFunctionCall","src":"123:42:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"116:6:12"},"nodeType":"YulFunctionCall","src":"116:50:12"},"nodeType":"YulIf","src":"113:2:12"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"44:6:12","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"55:5:12","type":""}],"src":"14:175:12"},{"body":{"nodeType":"YulBlock","src":"244:111:12","statements":[{"nodeType":"YulAssignment","src":"254:29:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"276:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"263:12:12"},"nodeType":"YulFunctionCall","src":"263:20:12"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"254:5:12"}]},{"body":{"nodeType":"YulBlock","src":"333:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"342:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"345:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"335:6:12"},"nodeType":"YulFunctionCall","src":"335:12:12"},"nodeType":"YulExpressionStatement","src":"335:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"305:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"316:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"323:6:12","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"312:3:12"},"nodeType":"YulFunctionCall","src":"312:18:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"302:2:12"},"nodeType":"YulFunctionCall","src":"302:29:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"295:6:12"},"nodeType":"YulFunctionCall","src":"295:37:12"},"nodeType":"YulIf","src":"292:2:12"}]},"name":"abi_decode_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"223:6:12","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"234:5:12","type":""}],"src":"194:161:12"},{"body":{"nodeType":"YulBlock","src":"522:1300:12","statements":[{"body":{"nodeType":"YulBlock","src":"569:26:12","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"578:6:12"},{"name":"value4","nodeType":"YulIdentifier","src":"586:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"571:6:12"},"nodeType":"YulFunctionCall","src":"571:22:12"},"nodeType":"YulExpressionStatement","src":"571:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"543:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"552:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"539:3:12"},"nodeType":"YulFunctionCall","src":"539:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"564:3:12","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"535:3:12"},"nodeType":"YulFunctionCall","src":"535:33:12"},"nodeType":"YulIf","src":"532:2:12"},{"nodeType":"YulAssignment","src":"604:41:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"635:9:12"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"614:20:12"},"nodeType":"YulFunctionCall","src":"614:31:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"604:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"654:12:12","value":{"kind":"number","nodeType":"YulLiteral","src":"664:2:12","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"658:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"675:46:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"706:9:12"},{"name":"_1","nodeType":"YulIdentifier","src":"717:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"702:3:12"},"nodeType":"YulFunctionCall","src":"702:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"689:12:12"},"nodeType":"YulFunctionCall","src":"689:32:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"679:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"730:28:12","value":{"kind":"number","nodeType":"YulLiteral","src":"740:18:12","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"734:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"785:26:12","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"794:6:12"},{"name":"value4","nodeType":"YulIdentifier","src":"802:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"787:6:12"},"nodeType":"YulFunctionCall","src":"787:22:12"},"nodeType":"YulExpressionStatement","src":"787:22:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"773:6:12"},{"name":"_2","nodeType":"YulIdentifier","src":"781:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"770:2:12"},"nodeType":"YulFunctionCall","src":"770:14:12"},"nodeType":"YulIf","src":"767:2:12"},{"nodeType":"YulVariableDeclaration","src":"820:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"834:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"845:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"830:3:12"},"nodeType":"YulFunctionCall","src":"830:22:12"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"824:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"900:26:12","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"909:6:12"},{"name":"value4","nodeType":"YulIdentifier","src":"917:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"902:6:12"},"nodeType":"YulFunctionCall","src":"902:22:12"},"nodeType":"YulExpressionStatement","src":"902:22:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"879:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"883:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"875:3:12"},"nodeType":"YulFunctionCall","src":"875:13:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"890:7:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"871:3:12"},"nodeType":"YulFunctionCall","src":"871:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"864:6:12"},"nodeType":"YulFunctionCall","src":"864:35:12"},"nodeType":"YulIf","src":"861:2:12"},{"nodeType":"YulVariableDeclaration","src":"935:26:12","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"958:2:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"945:12:12"},"nodeType":"YulFunctionCall","src":"945:16:12"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"939:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"984:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"986:16:12"},"nodeType":"YulFunctionCall","src":"986:18:12"},"nodeType":"YulExpressionStatement","src":"986:18:12"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"976:2:12"},{"name":"_2","nodeType":"YulIdentifier","src":"980:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"973:2:12"},"nodeType":"YulFunctionCall","src":"973:10:12"},"nodeType":"YulIf","src":"970:2:12"},{"nodeType":"YulVariableDeclaration","src":"1015:21:12","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1029:2:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1033:2:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1025:3:12"},"nodeType":"YulFunctionCall","src":"1025:11:12"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1019:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1045:23:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1065:2:12","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1059:5:12"},"nodeType":"YulFunctionCall","src":"1059:9:12"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1049:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1077:42:12","value":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1103:6:12"},{"name":"_5","nodeType":"YulIdentifier","src":"1111:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1099:3:12"},"nodeType":"YulFunctionCall","src":"1099:15:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1116:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1095:3:12"},"nodeType":"YulFunctionCall","src":"1095:24:12"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1081:10:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1178:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1180:16:12"},"nodeType":"YulFunctionCall","src":"1180:18:12"},"nodeType":"YulExpressionStatement","src":"1180:18:12"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1137:10:12"},{"name":"_2","nodeType":"YulIdentifier","src":"1149:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1134:2:12"},"nodeType":"YulFunctionCall","src":"1134:18:12"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1157:10:12"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1169:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1154:2:12"},"nodeType":"YulFunctionCall","src":"1154:22:12"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1131:2:12"},"nodeType":"YulFunctionCall","src":"1131:46:12"},"nodeType":"YulIf","src":"1128:2:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1216:2:12","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1220:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1209:6:12"},"nodeType":"YulFunctionCall","src":"1209:22:12"},"nodeType":"YulExpressionStatement","src":"1209:22:12"},{"nodeType":"YulVariableDeclaration","src":"1240:17:12","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1251:6:12"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1244:3:12","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1273:6:12"},{"name":"_4","nodeType":"YulIdentifier","src":"1281:2:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1266:6:12"},"nodeType":"YulFunctionCall","src":"1266:18:12"},"nodeType":"YulExpressionStatement","src":"1266:18:12"},{"nodeType":"YulAssignment","src":"1293:22:12","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1304:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1312:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1300:3:12"},"nodeType":"YulFunctionCall","src":"1300:15:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1293:3:12"}]},{"nodeType":"YulVariableDeclaration","src":"1324:22:12","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1339:2:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1343:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1335:3:12"},"nodeType":"YulFunctionCall","src":"1335:11:12"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1328:3:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1392:26:12","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"1401:6:12"},{"name":"value4","nodeType":"YulIdentifier","src":"1409:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1394:6:12"},"nodeType":"YulFunctionCall","src":"1394:22:12"},"nodeType":"YulExpressionStatement","src":"1394:22:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1369:2:12"},{"name":"_5","nodeType":"YulIdentifier","src":"1373:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1365:3:12"},"nodeType":"YulFunctionCall","src":"1365:11:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1378:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1361:3:12"},"nodeType":"YulFunctionCall","src":"1361:20:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1383:7:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1358:2:12"},"nodeType":"YulFunctionCall","src":"1358:33:12"},"nodeType":"YulIf","src":"1355:2:12"},{"nodeType":"YulVariableDeclaration","src":"1427:15:12","value":{"name":"value4","nodeType":"YulIdentifier","src":"1436:6:12"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1431:1:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1496:118:12","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1517:3:12"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1535:3:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1522:12:12"},"nodeType":"YulFunctionCall","src":"1522:17:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1510:6:12"},"nodeType":"YulFunctionCall","src":"1510:30:12"},"nodeType":"YulExpressionStatement","src":"1510:30:12"},{"nodeType":"YulAssignment","src":"1553:19:12","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1564:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1569:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1560:3:12"},"nodeType":"YulFunctionCall","src":"1560:12:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1553:3:12"}]},{"nodeType":"YulAssignment","src":"1585:19:12","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1596:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1601:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1592:3:12"},"nodeType":"YulFunctionCall","src":"1592:12:12"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1585:3:12"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1462:1:12"},{"name":"_4","nodeType":"YulIdentifier","src":"1465:2:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1459:2:12"},"nodeType":"YulFunctionCall","src":"1459:9:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1469:18:12","statements":[{"nodeType":"YulAssignment","src":"1471:14:12","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1480:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"1483:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1476:3:12"},"nodeType":"YulFunctionCall","src":"1476:9:12"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1471:1:12"}]}]},"pre":{"nodeType":"YulBlock","src":"1455:3:12","statements":[]},"src":"1451:163:12"},{"nodeType":"YulAssignment","src":"1623:16:12","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1633:6:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1623:6:12"}]},{"nodeType":"YulAssignment","src":"1648:49:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1682:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1693:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1678:3:12"},"nodeType":"YulFunctionCall","src":"1678:18:12"}],"functionName":{"name":"abi_decode_t_uint16","nodeType":"YulIdentifier","src":"1658:19:12"},"nodeType":"YulFunctionCall","src":"1658:39:12"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1648:6:12"}]},{"nodeType":"YulAssignment","src":"1706:50:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1741:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1752:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1737:3:12"},"nodeType":"YulFunctionCall","src":"1737:18:12"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1716:20:12"},"nodeType":"YulFunctionCall","src":"1716:40:12"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1706:6:12"}]},{"nodeType":"YulAssignment","src":"1765:51:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1800:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1811:3:12","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1796:3:12"},"nodeType":"YulFunctionCall","src":"1796:19:12"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1775:20:12"},"nodeType":"YulFunctionCall","src":"1775:41:12"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1765:6:12"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_uint16t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"456:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"467:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"479:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"487:6:12","type":""},{"name":"value2","nodeType":"YulTypedName","src":"495:6:12","type":""},{"name":"value3","nodeType":"YulTypedName","src":"503:6:12","type":""},{"name":"value4","nodeType":"YulTypedName","src":"511:6:12","type":""}],"src":"360:1462:12"},{"body":{"nodeType":"YulBlock","src":"1908:113:12","statements":[{"body":{"nodeType":"YulBlock","src":"1954:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1963:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"1971:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1956:6:12"},"nodeType":"YulFunctionCall","src":"1956:22:12"},"nodeType":"YulExpressionStatement","src":"1956:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1929:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"1938:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1925:3:12"},"nodeType":"YulFunctionCall","src":"1925:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"1950:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1921:3:12"},"nodeType":"YulFunctionCall","src":"1921:32:12"},"nodeType":"YulIf","src":"1918:2:12"},{"nodeType":"YulAssignment","src":"1989:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2005:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1999:5:12"},"nodeType":"YulFunctionCall","src":"1999:16:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1989:6:12"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1874:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1885:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1897:6:12","type":""}],"src":"1827:194:12"},{"body":{"nodeType":"YulBlock","src":"2205:553:12","statements":[{"nodeType":"YulVariableDeclaration","src":"2215:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2233:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2244:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2229:3:12"},"nodeType":"YulFunctionCall","src":"2229:18:12"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"2219:6:12","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2263:9:12"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2278:6:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2294:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2299:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2290:3:12"},"nodeType":"YulFunctionCall","src":"2290:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"2303:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2286:3:12"},"nodeType":"YulFunctionCall","src":"2286:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2274:3:12"},"nodeType":"YulFunctionCall","src":"2274:32:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2256:6:12"},"nodeType":"YulFunctionCall","src":"2256:51:12"},"nodeType":"YulExpressionStatement","src":"2256:51:12"},{"nodeType":"YulVariableDeclaration","src":"2316:12:12","value":{"kind":"number","nodeType":"YulLiteral","src":"2326:2:12","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2320:2:12","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2348:9:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2359:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2344:3:12"},"nodeType":"YulFunctionCall","src":"2344:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"2364:2:12","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2337:6:12"},"nodeType":"YulFunctionCall","src":"2337:30:12"},"nodeType":"YulExpressionStatement","src":"2337:30:12"},{"nodeType":"YulVariableDeclaration","src":"2376:17:12","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"2387:6:12"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2380:3:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2402:27:12","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2422:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2416:5:12"},"nodeType":"YulFunctionCall","src":"2416:13:12"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2406:6:12","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"2445:6:12"},{"name":"length","nodeType":"YulIdentifier","src":"2453:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2438:6:12"},"nodeType":"YulFunctionCall","src":"2438:22:12"},"nodeType":"YulExpressionStatement","src":"2438:22:12"},{"nodeType":"YulAssignment","src":"2469:25:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2480:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2491:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2476:3:12"},"nodeType":"YulFunctionCall","src":"2476:18:12"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2469:3:12"}]},{"nodeType":"YulVariableDeclaration","src":"2503:29:12","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2521:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2529:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2517:3:12"},"nodeType":"YulFunctionCall","src":"2517:15:12"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2507:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2541:13:12","value":{"name":"tail","nodeType":"YulIdentifier","src":"2550:4:12"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2545:1:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"2612:120:12","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2633:3:12"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2644:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2638:5:12"},"nodeType":"YulFunctionCall","src":"2638:13:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2626:6:12"},"nodeType":"YulFunctionCall","src":"2626:26:12"},"nodeType":"YulExpressionStatement","src":"2626:26:12"},{"nodeType":"YulAssignment","src":"2665:19:12","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2676:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2681:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2672:3:12"},"nodeType":"YulFunctionCall","src":"2672:12:12"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2665:3:12"}]},{"nodeType":"YulAssignment","src":"2697:25:12","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2711:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2719:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2707:3:12"},"nodeType":"YulFunctionCall","src":"2707:15:12"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2697:6:12"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2574:1:12"},{"name":"length","nodeType":"YulIdentifier","src":"2577:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2571:2:12"},"nodeType":"YulFunctionCall","src":"2571:13:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2585:18:12","statements":[{"nodeType":"YulAssignment","src":"2587:14:12","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2596:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"2599:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2592:3:12"},"nodeType":"YulFunctionCall","src":"2592:9:12"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2587:1:12"}]}]},"pre":{"nodeType":"YulBlock","src":"2567:3:12","statements":[]},"src":"2563:169:12"},{"nodeType":"YulAssignment","src":"2741:11:12","value":{"name":"pos","nodeType":"YulIdentifier","src":"2749:3:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2741:4:12"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2166:9:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2177:6:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2185:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2196:4:12","type":""}],"src":"2026:732:12"},{"body":{"nodeType":"YulBlock","src":"2864:76:12","statements":[{"nodeType":"YulAssignment","src":"2874:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2886:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2897:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2882:3:12"},"nodeType":"YulFunctionCall","src":"2882:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2874:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2916:9:12"},{"name":"value0","nodeType":"YulIdentifier","src":"2927:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2909:6:12"},"nodeType":"YulFunctionCall","src":"2909:25:12"},"nodeType":"YulExpressionStatement","src":"2909:25:12"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2833:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2844:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2855:4:12","type":""}],"src":"2763:177:12"},{"body":{"nodeType":"YulBlock","src":"2977:95:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2994:1:12","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3001:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3006:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2997:3:12"},"nodeType":"YulFunctionCall","src":"2997:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2987:6:12"},"nodeType":"YulFunctionCall","src":"2987:31:12"},"nodeType":"YulExpressionStatement","src":"2987:31:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3034:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3037:4:12","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3027:6:12"},"nodeType":"YulFunctionCall","src":"3027:15:12"},"nodeType":"YulExpressionStatement","src":"3027:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3058:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3061:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3051:6:12"},"nodeType":"YulFunctionCall","src":"3051:15:12"},"nodeType":"YulExpressionStatement","src":"3051:15:12"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2945:127:12"}]},"contents":"{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptrt_uint16t_addresst_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        value0 := abi_decode_t_address(headStart)\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(value4, value4) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value4, value4) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := mul(_4, _1)\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, _5), _1)\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let src := add(_3, _1)\n        if gt(add(add(_3, _5), _1), dataEnd) { revert(value4, value4) }\n        let i := value4\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value1 := memPtr\n        value2 := abi_decode_t_uint16(add(headStart, 64))\n        value3 := abi_decode_t_address(add(headStart, 96))\n        value4 := abi_decode_t_address(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        let _1 := 32\n        mstore(add(headStart, _1), 64)\n        let pos := tail_1\n        let length := mload(value1)\n        mstore(tail_1, length)\n        pos := add(headStart, 96)\n        let srcPtr := add(value1, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c80632a417cc714610030575b600080fd5b61004361003e366004610115565b610059565b6040516100509190610282565b60405180910390f35b600080546040516336e5b51960e11b815282916001600160a01b031690636dcb6a329061008c908a908a9060040161022c565b60206040518083038186803b1580156100a457600080fd5b505afa1580156100b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dc9190610214565b979650505050505050565b80356001600160a01b03811681146100fe57600080fd5b919050565b803561ffff811681146100fe57600080fd5b600080600080600060a0868803121561012c578081fd5b610135866100e7565b945060208087013567ffffffffffffffff80821115610152578384fd5b818901915089601f830112610165578384fd5b8135818111156101775761017761028b565b838102604051858282010181811085821117156101965761019661028b565b604052828152858101935084860182860187018e10156101b4578788fd5b8795505b838610156101d65780358552600195909501949386019386016101b8565b508099505050505050506101ec60408701610103565b92506101fa606087016100e7565b9150610208608087016100e7565b90509295509295909350565b600060208284031215610225578081fd5b5051919050565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b8181101561027557845183529383019391830191600101610259565b5090979650505050505050565b90815260200190565b634e487b7160e01b600052604160045260246000fdfea264697066735822122001e1cb7579a58d65c10cd7208cb9f435a817ac0ceb5c70c1bd39f292e1d116df64736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2A417CC7 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x115 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x282 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x36E5B519 PUSH1 0xE1 SHL DUP2 MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6DCB6A32 SWAP1 PUSH2 0x8C SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x22C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDC SWAP2 SWAP1 PUSH2 0x214 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x12C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x135 DUP7 PUSH2 0xE7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x152 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x165 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x177 JUMPI PUSH2 0x177 PUSH2 0x28B JUMP JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x196 JUMPI PUSH2 0x196 PUSH2 0x28B JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP15 LT ISZERO PUSH2 0x1B4 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1D6 JUMPI DUP1 CALLDATALOAD DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0x1B8 JUMP JUMPDEST POP DUP1 SWAP10 POP POP POP POP POP POP POP PUSH2 0x1EC PUSH1 0x40 DUP8 ADD PUSH2 0x103 JUMP JUMPDEST SWAP3 POP PUSH2 0x1FA PUSH1 0x60 DUP8 ADD PUSH2 0xE7 JUMP JUMPDEST SWAP2 POP PUSH2 0x208 PUSH1 0x80 DUP8 ADD PUSH2 0xE7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x225 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 DUP3 ADD SWAP2 SWAP1 PUSH1 0x60 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x275 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x259 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD 0xE1 0xCB PUSH22 0x79A58D65C10CD7208CB9F435A817AC0CEB5C70C1BD39 CALLCODE SWAP3 0xE1 0xD1 AND 0xDF PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ","sourceMap":"371:1393:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;838:628;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;1027:7;1071:12;;:42;;-1:-1:-1;;;1071:42:2;;1027:7;;-1:-1:-1;;;;;1071:12:2;;:22;;:42;;1094:10;;1106:6;;1071:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1046:67;838:628;-1:-1:-1;;;;;;;838:628:2:o;14:175:12:-;84:20;;-1:-1:-1;;;;;133:31:12;;123:42;;113:2;;179:1;176;169:12;113:2;65:124;;;:::o;194:161::-;263:20;;323:6;312:18;;302:29;;292:2;;345:1;342;335:12;360:1462;;;;;;564:3;552:9;543:7;539:23;535:33;532:2;;;586:6;578;571:22;532:2;614:31;635:9;614:31;:::i;:::-;604:41;;664:2;717;706:9;702:18;689:32;740:18;781:2;773:6;770:14;767:2;;;802:6;794;787:22;767:2;845:6;834:9;830:22;820:32;;890:7;883:4;879:2;875:13;871:27;861:2;;917:6;909;902:22;861:2;958;945:16;980:2;976;973:10;970:2;;;986:18;;:::i;:::-;1033:2;1029;1025:11;1065:2;1059:9;1116:2;1111;1103:6;1099:15;1095:24;1169:6;1157:10;1154:22;1149:2;1137:10;1134:18;1131:46;1128:2;;;1180:18;;:::i;:::-;1216:2;1209:22;1266:18;;;1300:15;;;;-1:-1:-1;1335:11:12;;;1365;;;1361:20;;1358:33;-1:-1:-1;1355:2:12;;;1409:6;1401;1394:22;1355:2;1436:6;1427:15;;1451:163;1465:2;1462:1;1459:9;1451:163;;;1522:17;;1510:30;;1483:1;1476:9;;;;;1560:12;;;;1592;;1451:163;;;1455:3;1633:6;1623:16;;;;;;;;1658:39;1693:2;1682:9;1678:18;1658:39;:::i;:::-;1648:49;;1716:40;1752:2;1741:9;1737:18;1716:40;:::i;:::-;1706:50;;1775:41;1811:3;1800:9;1796:19;1775:41;:::i;:::-;1765:51;;522:1300;;;;;;;;:::o;1827:194::-;;1950:2;1938:9;1929:7;1925:23;1921:32;1918:2;;;1971:6;1963;1956:22;1918:2;-1:-1:-1;1999:16:12;;1908:113;-1:-1:-1;1908:113:12:o;2026:732::-;-1:-1:-1;;;;;2274:32:12;;2256:51;;2244:2;2326;2344:18;;;2337:30;;;2416:13;;2229:18;;;2438:22;;;2026:732;;2517:15;;;;2326:2;2491;2476:18;;;2026:732;2563:169;2577:6;2574:1;2571:13;2563:169;;;2638:13;;2626:26;;2707:15;;;;2672:12;;;;2599:1;2592:9;2563:169;;;-1:-1:-1;2749:3:12;;2205:553;-1:-1:-1;;;;;;;2205:553:12:o;2763:177::-;2909:25;;;2897:2;2882:18;;2864:76::o;2945:127::-;3006:10;3001:3;2997:20;2994:1;2987:31;3037:4;3034:1;3027:15;3061:4;3058:1;3051:15"},"gasEstimates":{"creation":{"codeDepositCost":"145400","executionCost":"infinite","totalCost":"infinite"},"external":{"get_convex_price(address,uint256[],uint16,address,address)":"infinite"},"internal":{"calculate_convex_price(uint256,uint256,uint256)":"infinite"}},"methodIdentifiers":{"get_convex_price(address,uint256[],uint16,address,address)":"2a417cc7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract CurveOracleV2\",\"name\":\"_curve_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curve_pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"pid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"convex_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curve_lp\",\"type\":\"address\"}],\"name\":\"get_convex_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/ConvexOracleV2.sol\":\"ConvexOracleV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/ConvexOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n//import {IBooster} from \\\"../utils/interfaces/IBooster.sol\\\";\\nimport {CurveOracleV2} from \\\"./CurveOracleV2.sol\\\";\\nimport {FixedPointMathLib} from \\\"./libs/FixedPointMathLib.sol\\\";\\nimport {IERC20} from \\\"./interfaces/IERC20.sol\\\";\\n\\n//assuming we can price Convex pools like UniV2 pools more than like Curve pools\\ncontract ConvexOracleV2 {\\n    //address private constant BOOSTER = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31; //convex deposit contract\\n    CurveOracleV2 private curve_oracle;\\n\\n    //get total underlying in USD and divide by num of tokens\\n    //use external script to get pid by curve lp token\\n    constructor(CurveOracleV2 _curve_oracle) {\\n        curve_oracle = _curve_oracle;\\n    }\\n\\n    //get curve lp tokens price, get convex lp token \\\"depositToken\\\", divide\\n    function get_convex_price(\\n        address curve_pool,\\n        uint256[] memory prices,\\n        uint16 pid,\\n        address convex_lp,\\n        address curve_lp\\n    ) external view returns (uint256) {\\n        uint256 curve_lp_price = curve_oracle.get_price(curve_pool, prices); //returns 1e36 scaled uint\\n        //\\tuint256 curve_supply = IERC20(curve_lp).totalSupply();\\n        //\\tuint256 convex_supply = IERC20(convex_lp).totalSupply();\\n\\n        //\\tuint256 convex_price = calculate_convex_price(\\n        //\\t\\tcurve_lp_price,\\n        //\\t\\tcurve_supply,\\n        //\\t\\tconvex_supply\\n        //\\t);\\n\\n        return curve_lp_price;\\n    }\\n\\n    //not sure how vulnerable this is, check back later\\n    function calculate_convex_price(\\n        uint256 curve_lp_price,\\n        uint256 curve_supply,\\n        uint256 convex_supply\\n    ) internal pure returns (uint256) {\\n        return (curve_lp_price * curve_supply) / convex_supply;\\n    }\\n}\\n\",\"keccak256\":\"0x95b0b98377e7d11a815ae7980022ccec1bd4c834c88a428ef74f5a84bd016391\",\"license\":\"UNLICENSED\"},\"contracts/oracles/CurveOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport {ICurvePool} from \\\"./interfaces/ICurvePoolV1.sol\\\";\\nimport {ICurveOracle} from \\\"./interfaces/ICurveOracle.sol\\\";\\nimport {vMath} from \\\"./libs/vMath.sol\\\";\\n\\ncontract CurveOracleV2 is ICurveOracle {\\n    function get_price(address curve_pool, uint256[] memory prices)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 virtual_price = ICurvePool(curve_pool).get_virtual_price();\\n\\n        uint256 lp_price = calculate_v2_token_price(\\n            uint8(prices.length),\\n            virtual_price,\\n            prices\\n        );\\n\\n        return lp_price;\\n    }\\n\\n    //returns n_token * vp * (p1 * p2 * p3) ^1/n\\n    //n should only ever be 2, 3, or 4\\n    //returns the lp_price scaled by 1e36, so scale down by 1e36\\n    function calculate_v2_token_price(\\n        uint8 n,\\n        uint256 virtual_price,\\n        uint256[] memory prices\\n    ) internal pure returns (uint256) {\\n        uint256 product = vMath.product(prices);\\n        uint256 geo_mean = vMath.geometric_mean(n, product);\\n        return (n * virtual_price * geo_mean) / 10**18; //since virtual price has 18 decimals\\n    }\\n}\\n\",\"keccak256\":\"0x16811fe57c7083b8deb7831136e1fa0db6a4ef3aa4c66aa0a74cbb87f9a69e9f\",\"license\":\"UNLICENSED\"},\"contracts/oracles/interfaces/ICurveOracle.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurveOracle {\\n    function get_price(address curve_pool, uint256[] memory prices)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xdda871f8372f09487237b4047dbbcc88810eb55c357b2e91e13a068e043d4179\"},\"contracts/oracles/interfaces/ICurvePoolV1.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x58f8992dae5fdd0d425f8fc86d7cb3f59e61ba73ccc1111c281645d48dad4a72\"},\"contracts/oracles/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x647c6703e37aa5feb0eac5d74f41edb481254bc120e470e336561297b47999a8\"},\"contracts/oracles/libs/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc1552fe037c973c1ab30f607708735de7626eb22dcf6b2a02f2a39fa5d2b965\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracles/libs/IntegralMath.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Uint.sol\\\";\\n\\nlibrary IntegralMath {\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the binary logarithm of `n`\\n     */\\n    function floorLog2(uint256 n) internal pure returns (uint8) {\\n        unchecked {\\n            uint8 res = 0;\\n\\n            if (n < 256) {\\n                // at most 8 iterations\\n                while (n > 1) {\\n                    n >>= 1;\\n                    res += 1;\\n                }\\n            } else {\\n                // exactly 8 iterations\\n                for (uint8 s = 128; s > 0; s >>= 1) {\\n                    if (n >= 1 << s) {\\n                        n >>= s;\\n                        res |= s;\\n                    }\\n                }\\n            }\\n\\n            return res;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the square root of `n`\\n     */\\n    function floorSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n > 0) {\\n                uint256 x = n / 2 + 1;\\n                uint256 y = (x + n / x) / 2;\\n                while (x > y) {\\n                    x = y;\\n                    y = (x + n / x) / 2;\\n                }\\n                return x;\\n            }\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the square root of `n`\\n     */\\n    function ceilSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorSqrt(n);\\n            return x**2 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the cubic root of `n`\\n     */\\n    function floorCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = 0;\\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\n                x <<= 1;\\n                uint256 z = 3 * x * (x + 1) + 1;\\n                if (n / y >= z) {\\n                    n -= y * z;\\n                    x += 1;\\n                }\\n            }\\n            return x;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the cubic root of `n`\\n     */\\n    function ceilCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorCbrt(n);\\n            return x**3 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the nearest integer to the quotient of `n` and `d` (or `n / d`)\\n     */\\n    function roundDiv(uint256 n, uint256 d) internal pure returns (uint256) {\\n        unchecked {\\n            return n / d + (n % d) / (d - d / 2);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            (uint256 xyh, uint256 xyl) = mul512(x, y);\\n            if (xyh == 0) {\\n                // `x * y < 2 ^ 256`\\n                return xyl / z;\\n            }\\n            if (xyh < z) {\\n                // `x * y / z < 2 ^ 256`\\n                uint256 m = mulMod(x, y, z); // `m = x * y % z`\\n                (uint256 nh, uint256 nl) = sub512(xyh, xyl, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n                if (nh == 0) {\\n                    // `n < 2 ^ 256`\\n                    return nl / z;\\n                }\\n                uint256 p = unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n                uint256 q = div512(nh, nl, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n                uint256 r = inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n                return unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n            }\\n            revert(); // `x * y / z >= 2 ^ 256`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 w = mulDivF(x, y, z);\\n            if (mulMod(x, y, z) > 0) return safeAdd(w, 1);\\n            return w;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        unchecked {\\n            uint256 p = mulModMax(x, y);\\n            uint256 q = unsafeMul(x, y);\\n            if (p >= q) return (p - q, q);\\n            return (unsafeSub(p, q) - 1, q);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `2 ^ 256 * xh + xl - y`, where `2 ^ 256 * xh + xl >= y`\\n     */\\n    function sub512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 y\\n    ) private pure returns (uint256, uint256) {\\n        unchecked {\\n            if (xl >= y) return (xh, xl - y);\\n            return (xh - 1, unsafeSub(xl, y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `(2 ^ 256 * xh + xl) / pow2n`, where `xl` is divisible by `pow2n`\\n     */\\n    function div512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 pow2n\\n    ) private pure returns (uint256) {\\n        unchecked {\\n            uint256 pow2nInv = unsafeAdd(unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n            return unsafeMul(xh, pow2nInv) | (xl / pow2n); // `(xh << (256 - n)) | (xl >> n)`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the inverse of `d` modulo `2 ^ 256`, where `d` is congruent to `1` modulo `2`\\n     */\\n    function inv256(uint256 d) private pure returns (uint256) {\\n        unchecked {\\n            // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n            uint256 x = 1;\\n            for (uint256 i = 0; i < 8; ++i)\\n                x = unsafeMul(x, unsafeSub(2, unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n            return x;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2433205309bedeec21e98639f6e1b9ae4b72bddfd16d3c7caa23f0bedd74c07a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nuint256 constant MAX_VAL = type(uint256).max;\\n\\n// reverts on overflow\\nfunction safeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    return x + y;\\n}\\n\\n// does not revert on overflow\\nfunction unsafeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x + y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeSub(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x - y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeMul(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x * y;\\n    }\\n}\\n\\n// does not overflow\\nfunction mulModMax(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, MAX_VAL);\\n    }\\n}\\n\\n// does not overflow\\nfunction mulMod(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z\\n) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x998fcec9a910b59ed67db5af0939b271f062585a8c16a614b529197ed86d0a8d\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/vMath.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nimport {FixedPointMathLib} from \\\"./FixedPointMathLib.sol\\\";\\nimport {IntegralMath} from \\\"./IntegralMath.sol\\\";\\n\\nlibrary vMath {\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function min(uint256[] calldata array) external pure returns (uint256) {\\n        uint256 min = array[0];\\n        for (uint8 i = 1; i < array.length; i++) {\\n            if (min > array[i]) {\\n                min = array[i];\\n            }\\n        }\\n        return min;\\n    }\\n\\n    function product(uint256[] calldata nums) external pure returns (uint256) {\\n        uint256 product = nums[0];\\n        for (uint256 i = 1; i < nums.length; i++) {\\n            product *= nums[i];\\n        }\\n        return product;\\n    }\\n\\n    //limited to curve pools only, either 2 or 3 assets (mostly 2)\\n    function geometric_mean(uint8 n, uint256 product)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        if (n == 2) {\\n            return FixedPointMathLib.sqrt(product);\\n        } else {\\n            //n == 3\\n            return IntegralMath.floorCbrt(product);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x771260414afb50c4937cc8185436eadf2292162955a4ea25cb1b8405d9a0e0fb\"}},\"version\":1}","storageLayout":{"storage":[{"astId":128,"contract":"contracts/oracles/ConvexOracleV2.sol:ConvexOracleV2","label":"curve_oracle","offset":0,"slot":"0","type":"t_contract(CurveOracleV2)332"}],"types":{"t_contract(CurveOracleV2)332":{"encoding":"inplace","label":"contract CurveOracleV2","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/oracles/CurveOracle.sol":{"CurveOracleV1":{"abi":[{"inputs":[{"internalType":"uint256","name":"virtual_price","type":"uint256"},{"internalType":"uint256[]","name":"prices","type":"uint256[]"}],"name":"calculate_v1_token_price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"curve_pool","type":"address"},{"internalType":"uint256[]","name":"prices","type":"uint256[]"}],"name":"get_price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{"contracts/oracles/libs/vMath.sol":{"vMath":[{"length":20,"start":295}]}},"object":"608060405234801561001057600080fd5b5061039c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636dcb6a321461003b57806381651c1714610064575b600080fd5b61004e610049366004610238565b610077565b60405161005b919061031c565b60405180910390f35b61004e6100723660046102a9565b610102565b600080836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156100b357600080fd5b505afa1580156100c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100eb9190610291565b905060006100f98285610102565b95945050505050565b60008073__$fc961522ee25e21dc45bf9241cf35e1d80$__63d834e619846040518263ffffffff1660e01b815260040161013c91906102d8565b60206040518083038186803b15801561015457600080fd5b505af4158015610168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018c9190610291565b90506101988185610325565b949350505050565b600082601f8301126101b0578081fd5b8135602067ffffffffffffffff808311156101cd576101cd610350565b818302604051838282010181811084821117156101ec576101ec610350565b6040528481528381019250868401828801850189101561020a578687fd5b8692505b8583101561022c57803584529284019260019290920191840161020e565b50979650505050505050565b6000806040838503121561024a578182fd5b82356001600160a01b0381168114610260578283fd5b9150602083013567ffffffffffffffff81111561027b578182fd5b610287858286016101a0565b9150509250929050565b6000602082840312156102a2578081fd5b5051919050565b600080604083850312156102bb578182fd5b82359150602083013567ffffffffffffffff81111561027b578182fd5b6020808252825182820181905260009190848201906040850190845b81811015610310578351835292840192918401916001016102f4565b50909695505050505050565b90815260200190565b600081600019048311821515161561034b57634e487b7160e01b81526011600452602481fd5b500290565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fb02636418cccb4cf35ba05159f6df4106b8c4bb147204db8a51c3d69a2e398764736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DCB6A32 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x81651C17 EQ PUSH2 0x64 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x238 JUMP JUMPDEST PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x31C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A9 JUMP JUMPDEST PUSH2 0x102 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBB7B8B80 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEB SWAP2 SWAP1 PUSH2 0x291 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF9 DUP3 DUP6 PUSH2 0x102 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0xD834E619 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C SWAP2 SWAP1 PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x168 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x291 JUMP JUMPDEST SWAP1 POP PUSH2 0x198 DUP2 DUP6 PUSH2 0x325 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x1CD JUMPI PUSH2 0x1CD PUSH2 0x350 JUMP JUMPDEST DUP2 DUP4 MUL PUSH1 0x40 MLOAD DUP4 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x1EC JUMPI PUSH2 0x1EC PUSH2 0x350 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP5 DUP2 MSTORE DUP4 DUP2 ADD SWAP3 POP DUP7 DUP5 ADD DUP3 DUP9 ADD DUP6 ADD DUP10 LT ISZERO PUSH2 0x20A JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP3 POP JUMPDEST DUP6 DUP4 LT ISZERO PUSH2 0x22C JUMPI DUP1 CALLDATALOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 DUP5 ADD PUSH2 0x20E JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x260 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x287 DUP6 DUP3 DUP7 ADD PUSH2 0x1A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x310 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2F4 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x34B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB MUL PUSH4 0x6418CCCB 0x4C RETURN JUMPDEST LOG0 MLOAD MSIZE 0xF6 0xDF COINBASE MOD 0xB8 0xC4 0xBB EQ PUSH19 0x4DB8A51C3D69A2E398764736F6C6343000800 STOP CALLER ","sourceMap":"275:819:3:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3395:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"84:856:12","statements":[{"body":{"nodeType":"YulBlock","src":"133:24:12","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"142:5:12"},{"name":"array","nodeType":"YulIdentifier","src":"149:5:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"135:6:12"},"nodeType":"YulFunctionCall","src":"135:20:12"},"nodeType":"YulExpressionStatement","src":"135:20:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"112:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"120:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"108:3:12"},"nodeType":"YulFunctionCall","src":"108:17:12"},{"name":"end","nodeType":"YulIdentifier","src":"127:3:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"104:3:12"},"nodeType":"YulFunctionCall","src":"104:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"97:6:12"},"nodeType":"YulFunctionCall","src":"97:35:12"},"nodeType":"YulIf","src":"94:2:12"},{"nodeType":"YulVariableDeclaration","src":"166:30:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"189:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"176:12:12"},"nodeType":"YulFunctionCall","src":"176:20:12"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"170:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"205:14:12","value":{"kind":"number","nodeType":"YulLiteral","src":"215:4:12","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"209:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"228:28:12","value":{"kind":"number","nodeType":"YulLiteral","src":"238:18:12","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"232:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"279:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"281:16:12"},"nodeType":"YulFunctionCall","src":"281:18:12"},"nodeType":"YulExpressionStatement","src":"281:18:12"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"271:2:12"},{"name":"_3","nodeType":"YulIdentifier","src":"275:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"268:2:12"},"nodeType":"YulFunctionCall","src":"268:10:12"},"nodeType":"YulIf","src":"265:2:12"},{"nodeType":"YulVariableDeclaration","src":"310:21:12","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"324:2:12"},{"name":"_2","nodeType":"YulIdentifier","src":"328:2:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"320:3:12"},"nodeType":"YulFunctionCall","src":"320:11:12"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"314:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"340:23:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"360:2:12","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"354:5:12"},"nodeType":"YulFunctionCall","src":"354:9:12"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"344:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"372:42:12","value":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"398:6:12"},{"name":"_4","nodeType":"YulIdentifier","src":"406:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"394:3:12"},"nodeType":"YulFunctionCall","src":"394:15:12"},{"name":"_2","nodeType":"YulIdentifier","src":"411:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"390:3:12"},"nodeType":"YulFunctionCall","src":"390:24:12"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"376:10:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"473:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"475:16:12"},"nodeType":"YulFunctionCall","src":"475:18:12"},"nodeType":"YulExpressionStatement","src":"475:18:12"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"432:10:12"},{"name":"_3","nodeType":"YulIdentifier","src":"444:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"429:2:12"},"nodeType":"YulFunctionCall","src":"429:18:12"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"452:10:12"},{"name":"memPtr","nodeType":"YulIdentifier","src":"464:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"449:2:12"},"nodeType":"YulFunctionCall","src":"449:22:12"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"426:2:12"},"nodeType":"YulFunctionCall","src":"426:46:12"},"nodeType":"YulIf","src":"423:2:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"511:2:12","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"515:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"504:6:12"},"nodeType":"YulFunctionCall","src":"504:22:12"},"nodeType":"YulExpressionStatement","src":"504:22:12"},{"nodeType":"YulVariableDeclaration","src":"535:17:12","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"546:6:12"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"539:3:12","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"568:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"576:2:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"561:6:12"},"nodeType":"YulFunctionCall","src":"561:18:12"},"nodeType":"YulExpressionStatement","src":"561:18:12"},{"nodeType":"YulAssignment","src":"588:22:12","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"599:6:12"},{"name":"_2","nodeType":"YulIdentifier","src":"607:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"595:3:12"},"nodeType":"YulFunctionCall","src":"595:15:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"588:3:12"}]},{"nodeType":"YulVariableDeclaration","src":"619:26:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"634:6:12"},{"name":"_2","nodeType":"YulIdentifier","src":"642:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"630:3:12"},"nodeType":"YulFunctionCall","src":"630:15:12"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"623:3:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"691:24:12","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"700:5:12"},{"name":"array","nodeType":"YulIdentifier","src":"707:5:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"693:6:12"},"nodeType":"YulFunctionCall","src":"693:20:12"},"nodeType":"YulExpressionStatement","src":"693:20:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"668:6:12"},{"name":"_4","nodeType":"YulIdentifier","src":"676:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"664:3:12"},"nodeType":"YulFunctionCall","src":"664:15:12"},{"name":"_2","nodeType":"YulIdentifier","src":"681:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"660:3:12"},"nodeType":"YulFunctionCall","src":"660:24:12"},{"name":"end","nodeType":"YulIdentifier","src":"686:3:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"657:2:12"},"nodeType":"YulFunctionCall","src":"657:33:12"},"nodeType":"YulIf","src":"654:2:12"},{"nodeType":"YulVariableDeclaration","src":"724:14:12","value":{"name":"array","nodeType":"YulIdentifier","src":"733:5:12"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"728:1:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"792:118:12","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"813:3:12"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"831:3:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"818:12:12"},"nodeType":"YulFunctionCall","src":"818:17:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"806:6:12"},"nodeType":"YulFunctionCall","src":"806:30:12"},"nodeType":"YulExpressionStatement","src":"806:30:12"},{"nodeType":"YulAssignment","src":"849:19:12","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"860:3:12"},{"name":"_2","nodeType":"YulIdentifier","src":"865:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"856:3:12"},"nodeType":"YulFunctionCall","src":"856:12:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"849:3:12"}]},{"nodeType":"YulAssignment","src":"881:19:12","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"892:3:12"},{"name":"_2","nodeType":"YulIdentifier","src":"897:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"888:3:12"},"nodeType":"YulFunctionCall","src":"888:12:12"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"881:3:12"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"758:1:12"},{"name":"_1","nodeType":"YulIdentifier","src":"761:2:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"755:2:12"},"nodeType":"YulFunctionCall","src":"755:9:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"765:18:12","statements":[{"nodeType":"YulAssignment","src":"767:14:12","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"776:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"779:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"772:3:12"},"nodeType":"YulFunctionCall","src":"772:9:12"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"767:1:12"}]}]},"pre":{"nodeType":"YulBlock","src":"751:3:12","statements":[]},"src":"747:163:12"},{"nodeType":"YulAssignment","src":"919:15:12","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"928:6:12"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"919:5:12"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"58:6:12","type":""},{"name":"end","nodeType":"YulTypedName","src":"66:3:12","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"74:5:12","type":""}],"src":"14:926:12"},{"body":{"nodeType":"YulBlock","src":"1057:446:12","statements":[{"body":{"nodeType":"YulBlock","src":"1103:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1112:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"1120:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1105:6:12"},"nodeType":"YulFunctionCall","src":"1105:22:12"},"nodeType":"YulExpressionStatement","src":"1105:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1078:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"1087:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1074:3:12"},"nodeType":"YulFunctionCall","src":"1074:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"1099:2:12","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1070:3:12"},"nodeType":"YulFunctionCall","src":"1070:32:12"},"nodeType":"YulIf","src":"1067:2:12"},{"nodeType":"YulVariableDeclaration","src":"1138:36:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1164:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1151:12:12"},"nodeType":"YulFunctionCall","src":"1151:23:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1142:5:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1237:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1246:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"1254:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1239:6:12"},"nodeType":"YulFunctionCall","src":"1239:22:12"},"nodeType":"YulExpressionStatement","src":"1239:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1196:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1207:5:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1222:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1227:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1218:3:12"},"nodeType":"YulFunctionCall","src":"1218:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"1231:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1214:3:12"},"nodeType":"YulFunctionCall","src":"1214:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1203:3:12"},"nodeType":"YulFunctionCall","src":"1203:31:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1193:2:12"},"nodeType":"YulFunctionCall","src":"1193:42:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1186:6:12"},"nodeType":"YulFunctionCall","src":"1186:50:12"},"nodeType":"YulIf","src":"1183:2:12"},{"nodeType":"YulAssignment","src":"1272:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"1282:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1272:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"1296:46:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1327:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1338:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1323:3:12"},"nodeType":"YulFunctionCall","src":"1323:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1310:12:12"},"nodeType":"YulFunctionCall","src":"1310:32:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1300:6:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1385:26:12","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1394:6:12"},{"name":"value1","nodeType":"YulIdentifier","src":"1402:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1387:6:12"},"nodeType":"YulFunctionCall","src":"1387:22:12"},"nodeType":"YulExpressionStatement","src":"1387:22:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1357:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"1365:18:12","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1354:2:12"},"nodeType":"YulFunctionCall","src":"1354:30:12"},"nodeType":"YulIf","src":"1351:2:12"},{"nodeType":"YulAssignment","src":"1420:77:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1469:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"1480:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1465:3:12"},"nodeType":"YulFunctionCall","src":"1465:22:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1489:7:12"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn","nodeType":"YulIdentifier","src":"1430:34:12"},"nodeType":"YulFunctionCall","src":"1430:67:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1420:6:12"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1015:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1026:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1038:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1046:6:12","type":""}],"src":"945:558:12"},{"body":{"nodeType":"YulBlock","src":"1589:113:12","statements":[{"body":{"nodeType":"YulBlock","src":"1635:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1644:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"1652:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1637:6:12"},"nodeType":"YulFunctionCall","src":"1637:22:12"},"nodeType":"YulExpressionStatement","src":"1637:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1610:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"1619:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1606:3:12"},"nodeType":"YulFunctionCall","src":"1606:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"1631:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1602:3:12"},"nodeType":"YulFunctionCall","src":"1602:32:12"},"nodeType":"YulIf","src":"1599:2:12"},{"nodeType":"YulAssignment","src":"1670:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1680:5:12"},"nodeType":"YulFunctionCall","src":"1680:16:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1670:6:12"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1555:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1566:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1578:6:12","type":""}],"src":"1508:194:12"},{"body":{"nodeType":"YulBlock","src":"1819:330:12","statements":[{"body":{"nodeType":"YulBlock","src":"1865:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1874:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"1882:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1867:6:12"},"nodeType":"YulFunctionCall","src":"1867:22:12"},"nodeType":"YulExpressionStatement","src":"1867:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1840:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"1849:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1836:3:12"},"nodeType":"YulFunctionCall","src":"1836:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"1861:2:12","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1832:3:12"},"nodeType":"YulFunctionCall","src":"1832:32:12"},"nodeType":"YulIf","src":"1829:2:12"},{"nodeType":"YulAssignment","src":"1900:33:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1923:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1910:12:12"},"nodeType":"YulFunctionCall","src":"1910:23:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1900:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"1942:46:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1973:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1984:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1969:3:12"},"nodeType":"YulFunctionCall","src":"1969:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1956:12:12"},"nodeType":"YulFunctionCall","src":"1956:32:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1946:6:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"2031:26:12","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2040:6:12"},{"name":"value1","nodeType":"YulIdentifier","src":"2048:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2033:6:12"},"nodeType":"YulFunctionCall","src":"2033:22:12"},"nodeType":"YulExpressionStatement","src":"2033:22:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2003:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"2011:18:12","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2000:2:12"},"nodeType":"YulFunctionCall","src":"2000:30:12"},"nodeType":"YulIf","src":"1997:2:12"},{"nodeType":"YulAssignment","src":"2066:77:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2115:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"2126:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2111:3:12"},"nodeType":"YulFunctionCall","src":"2111:22:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2135:7:12"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn","nodeType":"YulIdentifier","src":"2076:34:12"},"nodeType":"YulFunctionCall","src":"2076:67:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2066:6:12"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1777:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1788:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1800:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1808:6:12","type":""}],"src":"1707:442:12"},{"body":{"nodeType":"YulBlock","src":"2313:484:12","statements":[{"nodeType":"YulVariableDeclaration","src":"2323:12:12","value":{"kind":"number","nodeType":"YulLiteral","src":"2333:2:12","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2327:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2344:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2362:9:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2373:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2358:3:12"},"nodeType":"YulFunctionCall","src":"2358:18:12"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"2348:6:12","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2392:9:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2403:2:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2385:6:12"},"nodeType":"YulFunctionCall","src":"2385:21:12"},"nodeType":"YulExpressionStatement","src":"2385:21:12"},{"nodeType":"YulVariableDeclaration","src":"2415:17:12","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"2426:6:12"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2419:3:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2441:27:12","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2461:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2455:5:12"},"nodeType":"YulFunctionCall","src":"2455:13:12"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2445:6:12","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"2484:6:12"},{"name":"length","nodeType":"YulIdentifier","src":"2492:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2477:6:12"},"nodeType":"YulFunctionCall","src":"2477:22:12"},"nodeType":"YulExpressionStatement","src":"2477:22:12"},{"nodeType":"YulAssignment","src":"2508:25:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2519:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2530:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2515:3:12"},"nodeType":"YulFunctionCall","src":"2515:18:12"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2508:3:12"}]},{"nodeType":"YulVariableDeclaration","src":"2542:29:12","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2560:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2568:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2556:3:12"},"nodeType":"YulFunctionCall","src":"2556:15:12"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2546:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2580:13:12","value":{"name":"tail","nodeType":"YulIdentifier","src":"2589:4:12"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2584:1:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"2651:120:12","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2672:3:12"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2683:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2677:5:12"},"nodeType":"YulFunctionCall","src":"2677:13:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2665:6:12"},"nodeType":"YulFunctionCall","src":"2665:26:12"},"nodeType":"YulExpressionStatement","src":"2665:26:12"},{"nodeType":"YulAssignment","src":"2704:19:12","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2715:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2720:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2711:3:12"},"nodeType":"YulFunctionCall","src":"2711:12:12"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2704:3:12"}]},{"nodeType":"YulAssignment","src":"2736:25:12","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2750:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2758:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2746:3:12"},"nodeType":"YulFunctionCall","src":"2746:15:12"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2736:6:12"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2613:1:12"},{"name":"length","nodeType":"YulIdentifier","src":"2616:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2610:2:12"},"nodeType":"YulFunctionCall","src":"2610:13:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2624:18:12","statements":[{"nodeType":"YulAssignment","src":"2626:14:12","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2635:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"2638:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2631:3:12"},"nodeType":"YulFunctionCall","src":"2631:9:12"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2626:1:12"}]}]},"pre":{"nodeType":"YulBlock","src":"2606:3:12","statements":[]},"src":"2602:169:12"},{"nodeType":"YulAssignment","src":"2780:11:12","value":{"name":"pos","nodeType":"YulIdentifier","src":"2788:3:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2780:4:12"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2282:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2293:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2304:4:12","type":""}],"src":"2154:643:12"},{"body":{"nodeType":"YulBlock","src":"2903:76:12","statements":[{"nodeType":"YulAssignment","src":"2913:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2925:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2936:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2921:3:12"},"nodeType":"YulFunctionCall","src":"2921:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2913:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2955:9:12"},{"name":"value0","nodeType":"YulIdentifier","src":"2966:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2948:6:12"},"nodeType":"YulFunctionCall","src":"2948:25:12"},"nodeType":"YulExpressionStatement","src":"2948:25:12"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2872:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2883:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2894:4:12","type":""}],"src":"2802:177:12"},{"body":{"nodeType":"YulBlock","src":"3036:225:12","statements":[{"body":{"nodeType":"YulBlock","src":"3103:123:12","statements":[{"expression":{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3124:7:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3137:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3142:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3133:3:12"},"nodeType":"YulFunctionCall","src":"3133:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3117:6:12"},"nodeType":"YulFunctionCall","src":"3117:37:12"},"nodeType":"YulExpressionStatement","src":"3117:37:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3174:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3177:4:12","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3167:6:12"},"nodeType":"YulFunctionCall","src":"3167:15:12"},"nodeType":"YulExpressionStatement","src":"3167:15:12"},{"expression":{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3202:7:12"},{"kind":"number","nodeType":"YulLiteral","src":"3211:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3195:6:12"},"nodeType":"YulFunctionCall","src":"3195:21:12"},"nodeType":"YulExpressionStatement","src":"3195:21:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3067:1:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3060:6:12"},"nodeType":"YulFunctionCall","src":"3060:9:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3053:6:12"},"nodeType":"YulFunctionCall","src":"3053:17:12"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3075:1:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3086:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3082:3:12"},"nodeType":"YulFunctionCall","src":"3082:6:12"},{"name":"x","nodeType":"YulIdentifier","src":"3090:1:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3078:3:12"},"nodeType":"YulFunctionCall","src":"3078:14:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3072:2:12"},"nodeType":"YulFunctionCall","src":"3072:21:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3049:3:12"},"nodeType":"YulFunctionCall","src":"3049:45:12"},"nodeType":"YulIf","src":"3046:2:12"},{"nodeType":"YulAssignment","src":"3235:20:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3250:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"3253:1:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3246:3:12"},"nodeType":"YulFunctionCall","src":"3246:9:12"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"3235:7:12"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3015:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"3018:1:12","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"3024:7:12","type":""}],"src":"2984:277:12"},{"body":{"nodeType":"YulBlock","src":"3298:95:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3315:1:12","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3322:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3327:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3318:3:12"},"nodeType":"YulFunctionCall","src":"3318:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3308:6:12"},"nodeType":"YulFunctionCall","src":"3308:31:12"},"nodeType":"YulExpressionStatement","src":"3308:31:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3355:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3358:4:12","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3348:6:12"},"nodeType":"YulFunctionCall","src":"3348:15:12"},"nodeType":"YulExpressionStatement","src":"3348:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3379:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3382:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3372:6:12"},"nodeType":"YulFunctionCall","src":"3372:15:12"},"nodeType":"YulExpressionStatement","src":"3372:15:12"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3266:127:12"}]},"contents":"{\n    { }\n    function abi_decode_t_array$_t_uint256_$dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := 0xffffffffffffffff\n        if gt(_1, _3) { panic_error_0x41() }\n        let _4 := mul(_1, _2)\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, _4), _2)\n        if or(gt(newFreePtr, _3), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let src := add(offset, _2)\n        if gt(add(add(offset, _4), _2), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n            src := add(src, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(value1, value1) }\n        value1 := abi_decode_t_array$_t_uint256_$dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(value1, value1) }\n        value1 := abi_decode_t_array$_t_uint256_$dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x)))\n        {\n            mstore(product, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(product, 0x24)\n        }\n        product := mul(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{"contracts/oracles/libs/vMath.sol":{"vMath":[{"length":20,"start":263}]}},"object":"608060405234801561001057600080fd5b50600436106100365760003560e01c80636dcb6a321461003b57806381651c1714610064575b600080fd5b61004e610049366004610238565b610077565b60405161005b919061031c565b60405180910390f35b61004e6100723660046102a9565b610102565b600080836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156100b357600080fd5b505afa1580156100c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100eb9190610291565b905060006100f98285610102565b95945050505050565b60008073__$fc961522ee25e21dc45bf9241cf35e1d80$__63d834e619846040518263ffffffff1660e01b815260040161013c91906102d8565b60206040518083038186803b15801561015457600080fd5b505af4158015610168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018c9190610291565b90506101988185610325565b949350505050565b600082601f8301126101b0578081fd5b8135602067ffffffffffffffff808311156101cd576101cd610350565b818302604051838282010181811084821117156101ec576101ec610350565b6040528481528381019250868401828801850189101561020a578687fd5b8692505b8583101561022c57803584529284019260019290920191840161020e565b50979650505050505050565b6000806040838503121561024a578182fd5b82356001600160a01b0381168114610260578283fd5b9150602083013567ffffffffffffffff81111561027b578182fd5b610287858286016101a0565b9150509250929050565b6000602082840312156102a2578081fd5b5051919050565b600080604083850312156102bb578182fd5b82359150602083013567ffffffffffffffff81111561027b578182fd5b6020808252825182820181905260009190848201906040850190845b81811015610310578351835292840192918401916001016102f4565b50909695505050505050565b90815260200190565b600081600019048311821515161561034b57634e487b7160e01b81526011600452602481fd5b500290565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fb02636418cccb4cf35ba05159f6df4106b8c4bb147204db8a51c3d69a2e398764736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DCB6A32 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x81651C17 EQ PUSH2 0x64 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x238 JUMP JUMPDEST PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x31C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A9 JUMP JUMPDEST PUSH2 0x102 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBB7B8B80 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEB SWAP2 SWAP1 PUSH2 0x291 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF9 DUP3 DUP6 PUSH2 0x102 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0xD834E619 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C SWAP2 SWAP1 PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x168 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x291 JUMP JUMPDEST SWAP1 POP PUSH2 0x198 DUP2 DUP6 PUSH2 0x325 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x1CD JUMPI PUSH2 0x1CD PUSH2 0x350 JUMP JUMPDEST DUP2 DUP4 MUL PUSH1 0x40 MLOAD DUP4 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x1EC JUMPI PUSH2 0x1EC PUSH2 0x350 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP5 DUP2 MSTORE DUP4 DUP2 ADD SWAP3 POP DUP7 DUP5 ADD DUP3 DUP9 ADD DUP6 ADD DUP10 LT ISZERO PUSH2 0x20A JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP3 POP JUMPDEST DUP6 DUP4 LT ISZERO PUSH2 0x22C JUMPI DUP1 CALLDATALOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 DUP5 ADD PUSH2 0x20E JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x260 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x287 DUP6 DUP3 DUP7 ADD PUSH2 0x1A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x310 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2F4 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x34B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB MUL PUSH4 0x6418CCCB 0x4C RETURN JUMPDEST LOG0 MLOAD MSIZE 0xF6 0xDF COINBASE MOD 0xB8 0xC4 0xBB EQ PUSH19 0x4DB8A51C3D69A2E398764736F6C6343000800 STOP CALLER ","sourceMap":"275:819:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;429:327;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;874:218;;;;;;:::i;:::-;;:::i;429:327::-;557:7;580:21;615:10;-1:-1:-1;;;;;604:40:3;;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;580:66;;657:16;676:47;701:13;716:6;676:24;:47::i;:::-;657:66;429:327;-1:-1:-1;;;;;429:327:3:o;874:218::-;999:7;1018:11;1032:5;:9;1042:6;1032:17;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1018:31;-1:-1:-1;1066:19:3;1018:31;1066:13;:19;:::i;:::-;1059:26;874:218;-1:-1:-1;;;;874:218:3:o;14:926:12:-;;127:3;120:4;112:6;108:17;104:27;94:2;;149:5;142;135:20;94:2;189:6;176:20;215:4;238:18;275:2;271;268:10;265:2;;;281:18;;:::i;:::-;328:2;324;320:11;360:2;354:9;411:2;406;398:6;394:15;390:24;464:6;452:10;449:22;444:2;432:10;429:18;426:46;423:2;;;475:18;;:::i;:::-;511:2;504:22;561:18;;;595:15;;;;-1:-1:-1;630:15:12;;;664;;;660:24;;657:33;-1:-1:-1;654:2:12;;;707:5;700;693:20;654:2;733:5;724:14;;747:163;761:2;758:1;755:9;747:163;;;818:17;;806:30;;856:12;;;;779:1;772:9;;;;;888:12;;747:163;;;-1:-1:-1;928:6:12;84:856;-1:-1:-1;;;;;;;84:856:12:o;945:558::-;;;1099:2;1087:9;1078:7;1074:23;1070:32;1067:2;;;1120:6;1112;1105:22;1067:2;1151:23;;-1:-1:-1;;;;;1203:31:12;;1193:42;;1183:2;;1254:6;1246;1239:22;1183:2;1282:5;-1:-1:-1;1338:2:12;1323:18;;1310:32;1365:18;1354:30;;1351:2;;;1402:6;1394;1387:22;1351:2;1430:67;1489:7;1480:6;1469:9;1465:22;1430:67;:::i;:::-;1420:77;;;1057:446;;;;;:::o;1508:194::-;;1631:2;1619:9;1610:7;1606:23;1602:32;1599:2;;;1652:6;1644;1637:22;1599:2;-1:-1:-1;1680:16:12;;1589:113;-1:-1:-1;1589:113:12:o;1707:442::-;;;1861:2;1849:9;1840:7;1836:23;1832:32;1829:2;;;1882:6;1874;1867:22;1829:2;1923:9;1910:23;1900:33;;1984:2;1973:9;1969:18;1956:32;2011:18;2003:6;2000:30;1997:2;;;2048:6;2040;2033:22;2154:643;2333:2;2385:21;;;2455:13;;2358:18;;;2477:22;;;2154:643;;2333:2;2556:15;;;;2530:2;2515:18;;;2154:643;2602:169;2616:6;2613:1;2610:13;2602:169;;;2677:13;;2665:26;;2746:15;;;;2711:12;;;;2638:1;2631:9;2602:169;;;-1:-1:-1;2788:3:12;;2313:484;-1:-1:-1;;;;;;2313:484:12:o;2802:177::-;2948:25;;;2936:2;2921:18;;2903:76::o;2984:277::-;;3090:1;3086;3082:6;3078:14;3075:1;3072:21;3067:1;3060:9;3053:17;3049:45;3046:2;;;-1:-1:-1;;;3117:37:12;;3177:4;3174:1;3167:15;3211:4;3124:7;3195:21;3046:2;-1:-1:-1;3246:9:12;;3036:225::o;3266:127::-;3327:10;3322:3;3318:20;3315:1;3308:31;3358:4;3355:1;3348:15;3382:4;3379:1;3372:15"},"gasEstimates":{"creation":{"codeDepositCost":"184800","executionCost":"226","totalCost":"185026"},"external":{"calculate_v1_token_price(uint256,uint256[])":"infinite","get_price(address,uint256[])":"infinite"}},"methodIdentifiers":{"calculate_v1_token_price(uint256,uint256[])":"81651c17","get_price(address,uint256[])":"6dcb6a32"}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"virtual_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"calculate_v1_token_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curve_pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"get_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/CurveOracle.sol\":\"CurveOracleV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/CurveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport {ICurvePool} from \\\"./interfaces/ICurvePoolV1.sol\\\";\\nimport {ICurveOracle} from \\\"./interfaces/ICurveOracle.sol\\\";\\nimport {vMath} from \\\"./libs/vMath.sol\\\";\\n\\n//used for all curveV1 tokens, no need to redeploy\\ncontract CurveOracleV1 is ICurveOracle {\\n    //where total supply is the total supply of the LP token in the pools calculated using the virtual price\\n    function get_price(address curve_pool, uint256[] memory prices)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 virtual_price = ICurvePool(curve_pool).get_virtual_price();\\n\\n        uint256 lp_price = calculate_v1_token_price(virtual_price, prices);\\n\\n        return lp_price;\\n    }\\n\\n    //where virtual price is the price of the pool in USD\\n    //returns lp_value = virtual price x min(prices);\\n    function calculate_v1_token_price(\\n        uint256 virtual_price,\\n        uint256[] memory prices\\n    ) public pure returns (uint256) {\\n        uint256 min = vMath.min(prices);\\n        return virtual_price * min;\\n    }\\n}\\n\",\"keccak256\":\"0xcceb33cc2bcfa100c0fb64c0f29f5226bf4f9e6a56476f218b690564b201f2f7\",\"license\":\"UNLICENSED\"},\"contracts/oracles/interfaces/ICurveOracle.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurveOracle {\\n    function get_price(address curve_pool, uint256[] memory prices)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xdda871f8372f09487237b4047dbbcc88810eb55c357b2e91e13a068e043d4179\"},\"contracts/oracles/interfaces/ICurvePoolV1.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x58f8992dae5fdd0d425f8fc86d7cb3f59e61ba73ccc1111c281645d48dad4a72\"},\"contracts/oracles/libs/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc1552fe037c973c1ab30f607708735de7626eb22dcf6b2a02f2a39fa5d2b965\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracles/libs/IntegralMath.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Uint.sol\\\";\\n\\nlibrary IntegralMath {\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the binary logarithm of `n`\\n     */\\n    function floorLog2(uint256 n) internal pure returns (uint8) {\\n        unchecked {\\n            uint8 res = 0;\\n\\n            if (n < 256) {\\n                // at most 8 iterations\\n                while (n > 1) {\\n                    n >>= 1;\\n                    res += 1;\\n                }\\n            } else {\\n                // exactly 8 iterations\\n                for (uint8 s = 128; s > 0; s >>= 1) {\\n                    if (n >= 1 << s) {\\n                        n >>= s;\\n                        res |= s;\\n                    }\\n                }\\n            }\\n\\n            return res;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the square root of `n`\\n     */\\n    function floorSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n > 0) {\\n                uint256 x = n / 2 + 1;\\n                uint256 y = (x + n / x) / 2;\\n                while (x > y) {\\n                    x = y;\\n                    y = (x + n / x) / 2;\\n                }\\n                return x;\\n            }\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the square root of `n`\\n     */\\n    function ceilSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorSqrt(n);\\n            return x**2 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the cubic root of `n`\\n     */\\n    function floorCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = 0;\\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\n                x <<= 1;\\n                uint256 z = 3 * x * (x + 1) + 1;\\n                if (n / y >= z) {\\n                    n -= y * z;\\n                    x += 1;\\n                }\\n            }\\n            return x;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the cubic root of `n`\\n     */\\n    function ceilCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorCbrt(n);\\n            return x**3 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the nearest integer to the quotient of `n` and `d` (or `n / d`)\\n     */\\n    function roundDiv(uint256 n, uint256 d) internal pure returns (uint256) {\\n        unchecked {\\n            return n / d + (n % d) / (d - d / 2);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            (uint256 xyh, uint256 xyl) = mul512(x, y);\\n            if (xyh == 0) {\\n                // `x * y < 2 ^ 256`\\n                return xyl / z;\\n            }\\n            if (xyh < z) {\\n                // `x * y / z < 2 ^ 256`\\n                uint256 m = mulMod(x, y, z); // `m = x * y % z`\\n                (uint256 nh, uint256 nl) = sub512(xyh, xyl, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n                if (nh == 0) {\\n                    // `n < 2 ^ 256`\\n                    return nl / z;\\n                }\\n                uint256 p = unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n                uint256 q = div512(nh, nl, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n                uint256 r = inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n                return unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n            }\\n            revert(); // `x * y / z >= 2 ^ 256`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 w = mulDivF(x, y, z);\\n            if (mulMod(x, y, z) > 0) return safeAdd(w, 1);\\n            return w;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        unchecked {\\n            uint256 p = mulModMax(x, y);\\n            uint256 q = unsafeMul(x, y);\\n            if (p >= q) return (p - q, q);\\n            return (unsafeSub(p, q) - 1, q);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `2 ^ 256 * xh + xl - y`, where `2 ^ 256 * xh + xl >= y`\\n     */\\n    function sub512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 y\\n    ) private pure returns (uint256, uint256) {\\n        unchecked {\\n            if (xl >= y) return (xh, xl - y);\\n            return (xh - 1, unsafeSub(xl, y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `(2 ^ 256 * xh + xl) / pow2n`, where `xl` is divisible by `pow2n`\\n     */\\n    function div512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 pow2n\\n    ) private pure returns (uint256) {\\n        unchecked {\\n            uint256 pow2nInv = unsafeAdd(unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n            return unsafeMul(xh, pow2nInv) | (xl / pow2n); // `(xh << (256 - n)) | (xl >> n)`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the inverse of `d` modulo `2 ^ 256`, where `d` is congruent to `1` modulo `2`\\n     */\\n    function inv256(uint256 d) private pure returns (uint256) {\\n        unchecked {\\n            // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n            uint256 x = 1;\\n            for (uint256 i = 0; i < 8; ++i)\\n                x = unsafeMul(x, unsafeSub(2, unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n            return x;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2433205309bedeec21e98639f6e1b9ae4b72bddfd16d3c7caa23f0bedd74c07a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nuint256 constant MAX_VAL = type(uint256).max;\\n\\n// reverts on overflow\\nfunction safeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    return x + y;\\n}\\n\\n// does not revert on overflow\\nfunction unsafeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x + y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeSub(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x - y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeMul(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x * y;\\n    }\\n}\\n\\n// does not overflow\\nfunction mulModMax(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, MAX_VAL);\\n    }\\n}\\n\\n// does not overflow\\nfunction mulMod(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z\\n) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x998fcec9a910b59ed67db5af0939b271f062585a8c16a614b529197ed86d0a8d\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/vMath.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nimport {FixedPointMathLib} from \\\"./FixedPointMathLib.sol\\\";\\nimport {IntegralMath} from \\\"./IntegralMath.sol\\\";\\n\\nlibrary vMath {\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function min(uint256[] calldata array) external pure returns (uint256) {\\n        uint256 min = array[0];\\n        for (uint8 i = 1; i < array.length; i++) {\\n            if (min > array[i]) {\\n                min = array[i];\\n            }\\n        }\\n        return min;\\n    }\\n\\n    function product(uint256[] calldata nums) external pure returns (uint256) {\\n        uint256 product = nums[0];\\n        for (uint256 i = 1; i < nums.length; i++) {\\n            product *= nums[i];\\n        }\\n        return product;\\n    }\\n\\n    //limited to curve pools only, either 2 or 3 assets (mostly 2)\\n    function geometric_mean(uint8 n, uint256 product)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        if (n == 2) {\\n            return FixedPointMathLib.sqrt(product);\\n        } else {\\n            //n == 3\\n            return IntegralMath.floorCbrt(product);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x771260414afb50c4937cc8185436eadf2292162955a4ea25cb1b8405d9a0e0fb\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/oracles/CurveOracleV2.sol":{"CurveOracleV2":{"abi":[{"inputs":[{"internalType":"address","name":"curve_pool","type":"address"},{"internalType":"uint256[]","name":"prices","type":"uint256[]"}],"name":"get_price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{"contracts/oracles/libs/vMath.sol":{"vMath":[{"length":20,"start":267},{"length":20,"start":406}]}},"object":"608060405234801561001057600080fd5b5061041d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636dcb6a3214610030575b600080fd5b61004361003e366004610234565b610059565b604051610050919061036a565b60405180910390f35b600080836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561009557600080fd5b505afa1580156100a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cd919061030e565b905060006100dd845183866100e6565b95945050505050565b60008073__$fc961522ee25e21dc45bf9241cf35e1d80$__638e5fede8846040518263ffffffff1660e01b81526004016101209190610326565b60206040518083038186803b15801561013857600080fd5b505af415801561014c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610170919061030e565b9050600073__$fc961522ee25e21dc45bf9241cf35e1d80$__63f43b9abe87846040518363ffffffff1660e01b81526004016101ad929190610373565b60206040518083038186803b1580156101c557600080fd5b505af41580156101d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fd919061030e565b9050670de0b6b3a7640000816102168760ff8a166103a6565b61022091906103a6565b61022a9190610386565b9695505050505050565b60008060408385031215610246578182fd5b82356001600160a01b038116811461025c578283fd5b915060208381013567ffffffffffffffff80821115610279578384fd5b818601915086601f83011261028c578384fd5b81358181111561029e5761029e6103d1565b838102604051858282010181811085821117156102bd576102bd6103d1565b604052828152858101935084860182860187018b10156102db578788fd5b8795505b838610156102fd5780358552600195909501949386019386016102df565b508096505050505050509250929050565b60006020828403121561031f578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b8181101561035e57835183529284019291840191600101610342565b50909695505050505050565b90815260200190565b60ff929092168252602082015260400190565b6000826103a157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156103cc57634e487b7160e01b81526011600452602481fd5b500290565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f66de4bc5af18226697079c51e60699df522cb7afbde2e84d294cc227f65c5f464736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x41D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DCB6A32 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x234 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x36A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBB7B8B80 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCD SWAP2 SWAP1 PUSH2 0x30E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDD DUP5 MLOAD DUP4 DUP7 PUSH2 0xE6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x8E5FEDE8 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP2 SWAP1 PUSH2 0x326 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x30E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0x0 PUSH4 0xF43B9ABE DUP8 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AD SWAP3 SWAP2 SWAP1 PUSH2 0x373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x30E JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x216 DUP8 PUSH1 0xFF DUP11 AND PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x22A SWAP2 SWAP1 PUSH2 0x386 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x246 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x25C JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x279 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x28C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x29E JUMPI PUSH2 0x29E PUSH2 0x3D1 JUMP JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x2BD JUMPI PUSH2 0x2BD PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP12 LT ISZERO PUSH2 0x2DB JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2FD JUMPI DUP1 CALLDATALOAD DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0x2DF JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x35E JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x342 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3A1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3CC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 PUSH14 0xE4BC5AF18226697079C51E60699D CREATE2 0x22 0xCB PUSH27 0xFBDE2E84D294CC227F65C5F464736F6C6343000800003300000000 ","sourceMap":"224:965:4:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3291:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"126:1230:12","statements":[{"body":{"nodeType":"YulBlock","src":"172:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"181:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"189:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"174:6:12"},"nodeType":"YulFunctionCall","src":"174:22:12"},"nodeType":"YulExpressionStatement","src":"174:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"147:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"156:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"143:3:12"},"nodeType":"YulFunctionCall","src":"143:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"168:2:12","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"139:3:12"},"nodeType":"YulFunctionCall","src":"139:32:12"},"nodeType":"YulIf","src":"136:2:12"},{"nodeType":"YulVariableDeclaration","src":"207:36:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"233:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"220:12:12"},"nodeType":"YulFunctionCall","src":"220:23:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"211:5:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"306:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"315:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"323:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"308:6:12"},"nodeType":"YulFunctionCall","src":"308:22:12"},"nodeType":"YulExpressionStatement","src":"308:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"265:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"276:5:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"291:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"296:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"287:3:12"},"nodeType":"YulFunctionCall","src":"287:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"300:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"283:3:12"},"nodeType":"YulFunctionCall","src":"283:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"272:3:12"},"nodeType":"YulFunctionCall","src":"272:31:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"262:2:12"},"nodeType":"YulFunctionCall","src":"262:42:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"255:6:12"},"nodeType":"YulFunctionCall","src":"255:50:12"},"nodeType":"YulIf","src":"252:2:12"},{"nodeType":"YulAssignment","src":"341:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"351:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"341:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"365:12:12","value":{"kind":"number","nodeType":"YulLiteral","src":"375:2:12","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"369:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"386:46:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"417:9:12"},{"name":"_1","nodeType":"YulIdentifier","src":"428:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"413:3:12"},"nodeType":"YulFunctionCall","src":"413:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"400:12:12"},"nodeType":"YulFunctionCall","src":"400:32:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"390:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"441:28:12","value":{"kind":"number","nodeType":"YulLiteral","src":"451:18:12","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"445:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"496:26:12","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"505:6:12"},{"name":"value1","nodeType":"YulIdentifier","src":"513:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"498:6:12"},"nodeType":"YulFunctionCall","src":"498:22:12"},"nodeType":"YulExpressionStatement","src":"498:22:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"484:6:12"},{"name":"_2","nodeType":"YulIdentifier","src":"492:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"481:2:12"},"nodeType":"YulFunctionCall","src":"481:14:12"},"nodeType":"YulIf","src":"478:2:12"},{"nodeType":"YulVariableDeclaration","src":"531:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"545:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"556:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"541:3:12"},"nodeType":"YulFunctionCall","src":"541:22:12"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"535:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"611:26:12","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"620:6:12"},{"name":"value1","nodeType":"YulIdentifier","src":"628:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"613:6:12"},"nodeType":"YulFunctionCall","src":"613:22:12"},"nodeType":"YulExpressionStatement","src":"613:22:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"590:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"594:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"586:3:12"},"nodeType":"YulFunctionCall","src":"586:13:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"601:7:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"582:3:12"},"nodeType":"YulFunctionCall","src":"582:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"575:6:12"},"nodeType":"YulFunctionCall","src":"575:35:12"},"nodeType":"YulIf","src":"572:2:12"},{"nodeType":"YulVariableDeclaration","src":"646:26:12","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"669:2:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"656:12:12"},"nodeType":"YulFunctionCall","src":"656:16:12"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"650:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"695:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"697:16:12"},"nodeType":"YulFunctionCall","src":"697:18:12"},"nodeType":"YulExpressionStatement","src":"697:18:12"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"687:2:12"},{"name":"_2","nodeType":"YulIdentifier","src":"691:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"684:2:12"},"nodeType":"YulFunctionCall","src":"684:10:12"},"nodeType":"YulIf","src":"681:2:12"},{"nodeType":"YulVariableDeclaration","src":"726:21:12","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"740:2:12"},{"name":"_1","nodeType":"YulIdentifier","src":"744:2:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"736:3:12"},"nodeType":"YulFunctionCall","src":"736:11:12"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"730:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"756:23:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"776:2:12","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"770:5:12"},"nodeType":"YulFunctionCall","src":"770:9:12"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"760:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"788:42:12","value":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"814:6:12"},{"name":"_5","nodeType":"YulIdentifier","src":"822:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"810:3:12"},"nodeType":"YulFunctionCall","src":"810:15:12"},{"name":"_1","nodeType":"YulIdentifier","src":"827:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"806:3:12"},"nodeType":"YulFunctionCall","src":"806:24:12"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"792:10:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"889:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"891:16:12"},"nodeType":"YulFunctionCall","src":"891:18:12"},"nodeType":"YulExpressionStatement","src":"891:18:12"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"848:10:12"},{"name":"_2","nodeType":"YulIdentifier","src":"860:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"845:2:12"},"nodeType":"YulFunctionCall","src":"845:18:12"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"868:10:12"},{"name":"memPtr","nodeType":"YulIdentifier","src":"880:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"865:2:12"},"nodeType":"YulFunctionCall","src":"865:22:12"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"842:2:12"},"nodeType":"YulFunctionCall","src":"842:46:12"},"nodeType":"YulIf","src":"839:2:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"927:2:12","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"931:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"920:6:12"},"nodeType":"YulFunctionCall","src":"920:22:12"},"nodeType":"YulExpressionStatement","src":"920:22:12"},{"nodeType":"YulVariableDeclaration","src":"951:17:12","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"962:6:12"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"955:3:12","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"984:6:12"},{"name":"_4","nodeType":"YulIdentifier","src":"992:2:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"977:6:12"},"nodeType":"YulFunctionCall","src":"977:18:12"},"nodeType":"YulExpressionStatement","src":"977:18:12"},{"nodeType":"YulAssignment","src":"1004:22:12","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1015:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1023:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1011:3:12"},"nodeType":"YulFunctionCall","src":"1011:15:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1004:3:12"}]},{"nodeType":"YulVariableDeclaration","src":"1035:22:12","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1050:2:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1054:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1046:3:12"},"nodeType":"YulFunctionCall","src":"1046:11:12"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1039:3:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1103:26:12","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1112:6:12"},{"name":"value1","nodeType":"YulIdentifier","src":"1120:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1105:6:12"},"nodeType":"YulFunctionCall","src":"1105:22:12"},"nodeType":"YulExpressionStatement","src":"1105:22:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1080:2:12"},{"name":"_5","nodeType":"YulIdentifier","src":"1084:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1076:3:12"},"nodeType":"YulFunctionCall","src":"1076:11:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1089:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1072:3:12"},"nodeType":"YulFunctionCall","src":"1072:20:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1094:7:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1069:2:12"},"nodeType":"YulFunctionCall","src":"1069:33:12"},"nodeType":"YulIf","src":"1066:2:12"},{"nodeType":"YulVariableDeclaration","src":"1138:15:12","value":{"name":"value1","nodeType":"YulIdentifier","src":"1147:6:12"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1142:1:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1207:118:12","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1228:3:12"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1246:3:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1233:12:12"},"nodeType":"YulFunctionCall","src":"1233:17:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1221:6:12"},"nodeType":"YulFunctionCall","src":"1221:30:12"},"nodeType":"YulExpressionStatement","src":"1221:30:12"},{"nodeType":"YulAssignment","src":"1264:19:12","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1275:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1280:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1271:3:12"},"nodeType":"YulFunctionCall","src":"1271:12:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1264:3:12"}]},{"nodeType":"YulAssignment","src":"1296:19:12","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1307:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1312:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1303:3:12"},"nodeType":"YulFunctionCall","src":"1303:12:12"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1296:3:12"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1173:1:12"},{"name":"_4","nodeType":"YulIdentifier","src":"1176:2:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1170:2:12"},"nodeType":"YulFunctionCall","src":"1170:9:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1180:18:12","statements":[{"nodeType":"YulAssignment","src":"1182:14:12","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1191:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"1194:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1187:3:12"},"nodeType":"YulFunctionCall","src":"1187:9:12"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1182:1:12"}]}]},"pre":{"nodeType":"YulBlock","src":"1166:3:12","statements":[]},"src":"1162:163:12"},{"nodeType":"YulAssignment","src":"1334:16:12","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1344:6:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1334:6:12"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"95:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"107:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"115:6:12","type":""}],"src":"14:1342:12"},{"body":{"nodeType":"YulBlock","src":"1442:113:12","statements":[{"body":{"nodeType":"YulBlock","src":"1488:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1497:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"1505:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1490:6:12"},"nodeType":"YulFunctionCall","src":"1490:22:12"},"nodeType":"YulExpressionStatement","src":"1490:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1463:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"1472:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1459:3:12"},"nodeType":"YulFunctionCall","src":"1459:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"1484:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1455:3:12"},"nodeType":"YulFunctionCall","src":"1455:32:12"},"nodeType":"YulIf","src":"1452:2:12"},{"nodeType":"YulAssignment","src":"1523:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1539:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1533:5:12"},"nodeType":"YulFunctionCall","src":"1533:16:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1523:6:12"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1408:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1419:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1431:6:12","type":""}],"src":"1361:194:12"},{"body":{"nodeType":"YulBlock","src":"1719:484:12","statements":[{"nodeType":"YulVariableDeclaration","src":"1729:12:12","value":{"kind":"number","nodeType":"YulLiteral","src":"1739:2:12","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1733:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1750:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1768:9:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1779:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1764:3:12"},"nodeType":"YulFunctionCall","src":"1764:18:12"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"1754:6:12","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1798:9:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1809:2:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1791:6:12"},"nodeType":"YulFunctionCall","src":"1791:21:12"},"nodeType":"YulExpressionStatement","src":"1791:21:12"},{"nodeType":"YulVariableDeclaration","src":"1821:17:12","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"1832:6:12"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"1825:3:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1847:27:12","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1867:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1861:5:12"},"nodeType":"YulFunctionCall","src":"1861:13:12"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1851:6:12","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"1890:6:12"},{"name":"length","nodeType":"YulIdentifier","src":"1898:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1883:6:12"},"nodeType":"YulFunctionCall","src":"1883:22:12"},"nodeType":"YulExpressionStatement","src":"1883:22:12"},{"nodeType":"YulAssignment","src":"1914:25:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1925:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1936:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1921:3:12"},"nodeType":"YulFunctionCall","src":"1921:18:12"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1914:3:12"}]},{"nodeType":"YulVariableDeclaration","src":"1948:29:12","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1966:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1974:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1962:3:12"},"nodeType":"YulFunctionCall","src":"1962:15:12"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"1952:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1986:13:12","value":{"name":"tail","nodeType":"YulIdentifier","src":"1995:4:12"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1990:1:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"2057:120:12","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2078:3:12"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2089:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2083:5:12"},"nodeType":"YulFunctionCall","src":"2083:13:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2071:6:12"},"nodeType":"YulFunctionCall","src":"2071:26:12"},"nodeType":"YulExpressionStatement","src":"2071:26:12"},{"nodeType":"YulAssignment","src":"2110:19:12","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2121:3:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2126:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2117:3:12"},"nodeType":"YulFunctionCall","src":"2117:12:12"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2110:3:12"}]},{"nodeType":"YulAssignment","src":"2142:25:12","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2156:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"2164:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2152:3:12"},"nodeType":"YulFunctionCall","src":"2152:15:12"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2142:6:12"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2019:1:12"},{"name":"length","nodeType":"YulIdentifier","src":"2022:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2016:2:12"},"nodeType":"YulFunctionCall","src":"2016:13:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2030:18:12","statements":[{"nodeType":"YulAssignment","src":"2032:14:12","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2041:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"2044:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2037:3:12"},"nodeType":"YulFunctionCall","src":"2037:9:12"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2032:1:12"}]}]},"pre":{"nodeType":"YulBlock","src":"2012:3:12","statements":[]},"src":"2008:169:12"},{"nodeType":"YulAssignment","src":"2186:11:12","value":{"name":"pos","nodeType":"YulIdentifier","src":"2194:3:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2186:4:12"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1688:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1699:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1710:4:12","type":""}],"src":"1560:643:12"},{"body":{"nodeType":"YulBlock","src":"2309:76:12","statements":[{"nodeType":"YulAssignment","src":"2319:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2331:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2342:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2327:3:12"},"nodeType":"YulFunctionCall","src":"2327:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2319:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2361:9:12"},{"name":"value0","nodeType":"YulIdentifier","src":"2372:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2354:6:12"},"nodeType":"YulFunctionCall","src":"2354:25:12"},"nodeType":"YulExpressionStatement","src":"2354:25:12"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2278:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2289:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2300:4:12","type":""}],"src":"2208:177:12"},{"body":{"nodeType":"YulBlock","src":"2523:130:12","statements":[{"nodeType":"YulAssignment","src":"2533:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2545:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2556:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2541:3:12"},"nodeType":"YulFunctionCall","src":"2541:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2533:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2575:9:12"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2590:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"2598:4:12","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2586:3:12"},"nodeType":"YulFunctionCall","src":"2586:17:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2568:6:12"},"nodeType":"YulFunctionCall","src":"2568:36:12"},"nodeType":"YulExpressionStatement","src":"2568:36:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2624:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2635:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2620:3:12"},"nodeType":"YulFunctionCall","src":"2620:18:12"},{"name":"value1","nodeType":"YulIdentifier","src":"2640:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2613:6:12"},"nodeType":"YulFunctionCall","src":"2613:34:12"},"nodeType":"YulExpressionStatement","src":"2613:34:12"}]},"name":"abi_encode_tuple_t_uint8_t_uint256__to_t_uint8_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2484:9:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2495:6:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2503:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2514:4:12","type":""}],"src":"2390:263:12"},{"body":{"nodeType":"YulBlock","src":"2704:171:12","statements":[{"body":{"nodeType":"YulBlock","src":"2735:111:12","statements":[{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"2756:1:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2763:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2768:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2759:3:12"},"nodeType":"YulFunctionCall","src":"2759:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2749:6:12"},"nodeType":"YulFunctionCall","src":"2749:31:12"},"nodeType":"YulExpressionStatement","src":"2749:31:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2800:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2803:4:12","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2793:6:12"},"nodeType":"YulFunctionCall","src":"2793:15:12"},"nodeType":"YulExpressionStatement","src":"2793:15:12"},{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"2828:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"2831:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2821:6:12"},"nodeType":"YulFunctionCall","src":"2821:15:12"},"nodeType":"YulExpressionStatement","src":"2821:15:12"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2724:1:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2717:6:12"},"nodeType":"YulFunctionCall","src":"2717:9:12"},"nodeType":"YulIf","src":"2714:2:12"},{"nodeType":"YulAssignment","src":"2855:14:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2864:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"2867:1:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2860:3:12"},"nodeType":"YulFunctionCall","src":"2860:9:12"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2855:1:12"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2689:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"2692:1:12","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"2698:1:12","type":""}],"src":"2658:217:12"},{"body":{"nodeType":"YulBlock","src":"2932:225:12","statements":[{"body":{"nodeType":"YulBlock","src":"2999:123:12","statements":[{"expression":{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3020:7:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3033:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3038:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3029:3:12"},"nodeType":"YulFunctionCall","src":"3029:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3013:6:12"},"nodeType":"YulFunctionCall","src":"3013:37:12"},"nodeType":"YulExpressionStatement","src":"3013:37:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3070:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3073:4:12","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3063:6:12"},"nodeType":"YulFunctionCall","src":"3063:15:12"},"nodeType":"YulExpressionStatement","src":"3063:15:12"},{"expression":{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3098:7:12"},{"kind":"number","nodeType":"YulLiteral","src":"3107:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3091:6:12"},"nodeType":"YulFunctionCall","src":"3091:21:12"},"nodeType":"YulExpressionStatement","src":"3091:21:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2963:1:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2956:6:12"},"nodeType":"YulFunctionCall","src":"2956:9:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2949:6:12"},"nodeType":"YulFunctionCall","src":"2949:17:12"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2971:1:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2982:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2978:3:12"},"nodeType":"YulFunctionCall","src":"2978:6:12"},{"name":"x","nodeType":"YulIdentifier","src":"2986:1:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2974:3:12"},"nodeType":"YulFunctionCall","src":"2974:14:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2968:2:12"},"nodeType":"YulFunctionCall","src":"2968:21:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2945:3:12"},"nodeType":"YulFunctionCall","src":"2945:45:12"},"nodeType":"YulIf","src":"2942:2:12"},{"nodeType":"YulAssignment","src":"3131:20:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3146:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"3149:1:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3142:3:12"},"nodeType":"YulFunctionCall","src":"3142:9:12"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"3131:7:12"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2911:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"2914:1:12","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"2920:7:12","type":""}],"src":"2880:277:12"},{"body":{"nodeType":"YulBlock","src":"3194:95:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3211:1:12","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3218:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3223:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3214:3:12"},"nodeType":"YulFunctionCall","src":"3214:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3204:6:12"},"nodeType":"YulFunctionCall","src":"3204:31:12"},"nodeType":"YulExpressionStatement","src":"3204:31:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3251:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3254:4:12","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3244:6:12"},"nodeType":"YulFunctionCall","src":"3244:15:12"},"nodeType":"YulExpressionStatement","src":"3244:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3275:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3278:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3268:6:12"},"nodeType":"YulFunctionCall","src":"3268:15:12"},"nodeType":"YulExpressionStatement","src":"3268:15:12"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3162:127:12"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(value1, value1) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value1, value1) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := mul(_4, _1)\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, _5), _1)\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let src := add(_3, _1)\n        if gt(add(add(_3, _5), _1), dataEnd) { revert(value1, value1) }\n        let i := value1\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value1 := memPtr\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8_t_uint256__to_t_uint8_t_uint256__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x)))\n        {\n            mstore(product, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(product, 0x24)\n        }\n        product := mul(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{"contracts/oracles/libs/vMath.sol":{"vMath":[{"length":20,"start":235},{"length":20,"start":374}]}},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c80636dcb6a3214610030575b600080fd5b61004361003e366004610234565b610059565b604051610050919061036a565b60405180910390f35b600080836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561009557600080fd5b505afa1580156100a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cd919061030e565b905060006100dd845183866100e6565b95945050505050565b60008073__$fc961522ee25e21dc45bf9241cf35e1d80$__638e5fede8846040518263ffffffff1660e01b81526004016101209190610326565b60206040518083038186803b15801561013857600080fd5b505af415801561014c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610170919061030e565b9050600073__$fc961522ee25e21dc45bf9241cf35e1d80$__63f43b9abe87846040518363ffffffff1660e01b81526004016101ad929190610373565b60206040518083038186803b1580156101c557600080fd5b505af41580156101d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fd919061030e565b9050670de0b6b3a7640000816102168760ff8a166103a6565b61022091906103a6565b61022a9190610386565b9695505050505050565b60008060408385031215610246578182fd5b82356001600160a01b038116811461025c578283fd5b915060208381013567ffffffffffffffff80821115610279578384fd5b818601915086601f83011261028c578384fd5b81358181111561029e5761029e6103d1565b838102604051858282010181811085821117156102bd576102bd6103d1565b604052828152858101935084860182860187018b10156102db578788fd5b8795505b838610156102fd5780358552600195909501949386019386016102df565b508096505050505050509250929050565b60006020828403121561031f578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b8181101561035e57835183529284019291840191600101610342565b50909695505050505050565b90815260200190565b60ff929092168252602082015260400190565b6000826103a157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156103cc57634e487b7160e01b81526011600452602481fd5b500290565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f66de4bc5af18226697079c51e60699df522cb7afbde2e84d294cc227f65c5f464736f6c63430008000033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DCB6A32 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x234 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x36A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBB7B8B80 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCD SWAP2 SWAP1 PUSH2 0x30E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDD DUP5 MLOAD DUP4 DUP7 PUSH2 0xE6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x8E5FEDE8 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x120 SWAP2 SWAP1 PUSH2 0x326 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x30E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0x0 PUSH4 0xF43B9ABE DUP8 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AD SWAP3 SWAP2 SWAP1 PUSH2 0x373 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x30E JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x216 DUP8 PUSH1 0xFF DUP11 AND PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x22A SWAP2 SWAP1 PUSH2 0x386 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x246 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x25C JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x279 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x28C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x29E JUMPI PUSH2 0x29E PUSH2 0x3D1 JUMP JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x2BD JUMPI PUSH2 0x2BD PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP12 LT ISZERO PUSH2 0x2DB JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2FD JUMPI DUP1 CALLDATALOAD DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0x2DF JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x35E JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x342 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3A1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3CC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 PUSH14 0xE4BC5AF18226697079C51E60699D CREATE2 0x22 0xCB PUSH27 0xFBDE2E84D294CC227F65C5F464736F6C6343000800003300000000 ","sourceMap":"224:965:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;269:395;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;397:7;420:21;455:10;-1:-1:-1;;;;;444:40:4;;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;420:66;;497:16;516:115;560:6;:13;588;615:6;516:24;:115::i;:::-;497:134;269:395;-1:-1:-1;;;;;269:395:4:o;823:364::-;967:7;986:15;1004:5;:13;1018:6;1004:21;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;986:39;;1035:16;1054:5;:20;1075:1;1078:7;1054:32;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1035:51;-1:-1:-1;1136:6:4;1035:51;1104:17;1108:13;1104:17;;;;:::i;:::-;:28;;;;:::i;:::-;1103:39;;;;:::i;:::-;1096:46;823:364;-1:-1:-1;;;;;;823:364:4:o;14:1342:12:-;;;168:2;156:9;147:7;143:23;139:32;136:2;;;189:6;181;174:22;136:2;220:23;;-1:-1:-1;;;;;272:31:12;;262:42;;252:2;;323:6;315;308:22;252:2;351:5;-1:-1:-1;375:2:12;413:18;;;400:32;451:18;481:14;;;478:2;;;513:6;505;498:22;478:2;556:6;545:9;541:22;531:32;;601:7;594:4;590:2;586:13;582:27;572:2;;628:6;620;613:22;572:2;669;656:16;691:2;687;684:10;681:2;;;697:18;;:::i;:::-;744:2;740;736:11;776:2;770:9;827:2;822;814:6;810:15;806:24;880:6;868:10;865:22;860:2;848:10;845:18;842:46;839:2;;;891:18;;:::i;:::-;927:2;920:22;977:18;;;1011:15;;;;-1:-1:-1;1046:11:12;;;1076;;;1072:20;;1069:33;-1:-1:-1;1066:2:12;;;1120:6;1112;1105:22;1066:2;1147:6;1138:15;;1162:163;1176:2;1173:1;1170:9;1162:163;;;1233:17;;1221:30;;1194:1;1187:9;;;;;1271:12;;;;1303;;1162:163;;;1166:3;1344:6;1334:16;;;;;;;;126:1230;;;;;:::o;1361:194::-;;1484:2;1472:9;1463:7;1459:23;1455:32;1452:2;;;1505:6;1497;1490:22;1452:2;-1:-1:-1;1533:16:12;;1442:113;-1:-1:-1;1442:113:12:o;1560:643::-;1739:2;1791:21;;;1861:13;;1764:18;;;1883:22;;;1560:643;;1739:2;1962:15;;;;1936:2;1921:18;;;1560:643;2008:169;2022:6;2019:1;2016:13;2008:169;;;2083:13;;2071:26;;2152:15;;;;2117:12;;;;2044:1;2037:9;2008:169;;;-1:-1:-1;2194:3:12;;1719:484;-1:-1:-1;;;;;;1719:484:12:o;2208:177::-;2354:25;;;2342:2;2327:18;;2309:76::o;2390:263::-;2598:4;2586:17;;;;2568:36;;2635:2;2620:18;;2613:34;2556:2;2541:18;;2523:130::o;2658:217::-;;2724:1;2714:2;;-1:-1:-1;;;2749:31:12;;2803:4;2800:1;2793:15;2831:4;2756:1;2821:15;2714:2;-1:-1:-1;2860:9:12;;2704:171::o;2880:277::-;;2986:1;2982;2978:6;2974:14;2971:1;2968:21;2963:1;2956:9;2949:17;2945:45;2942:2;;;-1:-1:-1;;;3013:37:12;;3073:4;3070:1;3063:15;3107:4;3020:7;3091:21;2942:2;-1:-1:-1;3142:9:12;;2932:225::o;3162:127::-;3223:10;3218:3;3214:20;3211:1;3204:31;3254:4;3251:1;3244:15;3278:4;3275:1;3268:15"},"gasEstimates":{"creation":{"codeDepositCost":"210600","executionCost":"251","totalCost":"210851"},"external":{"get_price(address,uint256[])":"infinite"},"internal":{"calculate_v2_token_price(uint8,uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"get_price(address,uint256[])":"6dcb6a32"}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curve_pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"get_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/CurveOracleV2.sol\":\"CurveOracleV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/CurveOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport {ICurvePool} from \\\"./interfaces/ICurvePoolV1.sol\\\";\\nimport {ICurveOracle} from \\\"./interfaces/ICurveOracle.sol\\\";\\nimport {vMath} from \\\"./libs/vMath.sol\\\";\\n\\ncontract CurveOracleV2 is ICurveOracle {\\n    function get_price(address curve_pool, uint256[] memory prices)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 virtual_price = ICurvePool(curve_pool).get_virtual_price();\\n\\n        uint256 lp_price = calculate_v2_token_price(\\n            uint8(prices.length),\\n            virtual_price,\\n            prices\\n        );\\n\\n        return lp_price;\\n    }\\n\\n    //returns n_token * vp * (p1 * p2 * p3) ^1/n\\n    //n should only ever be 2, 3, or 4\\n    //returns the lp_price scaled by 1e36, so scale down by 1e36\\n    function calculate_v2_token_price(\\n        uint8 n,\\n        uint256 virtual_price,\\n        uint256[] memory prices\\n    ) internal pure returns (uint256) {\\n        uint256 product = vMath.product(prices);\\n        uint256 geo_mean = vMath.geometric_mean(n, product);\\n        return (n * virtual_price * geo_mean) / 10**18; //since virtual price has 18 decimals\\n    }\\n}\\n\",\"keccak256\":\"0x16811fe57c7083b8deb7831136e1fa0db6a4ef3aa4c66aa0a74cbb87f9a69e9f\",\"license\":\"UNLICENSED\"},\"contracts/oracles/interfaces/ICurveOracle.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurveOracle {\\n    function get_price(address curve_pool, uint256[] memory prices)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xdda871f8372f09487237b4047dbbcc88810eb55c357b2e91e13a068e043d4179\"},\"contracts/oracles/interfaces/ICurvePoolV1.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x58f8992dae5fdd0d425f8fc86d7cb3f59e61ba73ccc1111c281645d48dad4a72\"},\"contracts/oracles/libs/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc1552fe037c973c1ab30f607708735de7626eb22dcf6b2a02f2a39fa5d2b965\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracles/libs/IntegralMath.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Uint.sol\\\";\\n\\nlibrary IntegralMath {\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the binary logarithm of `n`\\n     */\\n    function floorLog2(uint256 n) internal pure returns (uint8) {\\n        unchecked {\\n            uint8 res = 0;\\n\\n            if (n < 256) {\\n                // at most 8 iterations\\n                while (n > 1) {\\n                    n >>= 1;\\n                    res += 1;\\n                }\\n            } else {\\n                // exactly 8 iterations\\n                for (uint8 s = 128; s > 0; s >>= 1) {\\n                    if (n >= 1 << s) {\\n                        n >>= s;\\n                        res |= s;\\n                    }\\n                }\\n            }\\n\\n            return res;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the square root of `n`\\n     */\\n    function floorSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n > 0) {\\n                uint256 x = n / 2 + 1;\\n                uint256 y = (x + n / x) / 2;\\n                while (x > y) {\\n                    x = y;\\n                    y = (x + n / x) / 2;\\n                }\\n                return x;\\n            }\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the square root of `n`\\n     */\\n    function ceilSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorSqrt(n);\\n            return x**2 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the cubic root of `n`\\n     */\\n    function floorCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = 0;\\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\n                x <<= 1;\\n                uint256 z = 3 * x * (x + 1) + 1;\\n                if (n / y >= z) {\\n                    n -= y * z;\\n                    x += 1;\\n                }\\n            }\\n            return x;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the cubic root of `n`\\n     */\\n    function ceilCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorCbrt(n);\\n            return x**3 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the nearest integer to the quotient of `n` and `d` (or `n / d`)\\n     */\\n    function roundDiv(uint256 n, uint256 d) internal pure returns (uint256) {\\n        unchecked {\\n            return n / d + (n % d) / (d - d / 2);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            (uint256 xyh, uint256 xyl) = mul512(x, y);\\n            if (xyh == 0) {\\n                // `x * y < 2 ^ 256`\\n                return xyl / z;\\n            }\\n            if (xyh < z) {\\n                // `x * y / z < 2 ^ 256`\\n                uint256 m = mulMod(x, y, z); // `m = x * y % z`\\n                (uint256 nh, uint256 nl) = sub512(xyh, xyl, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n                if (nh == 0) {\\n                    // `n < 2 ^ 256`\\n                    return nl / z;\\n                }\\n                uint256 p = unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n                uint256 q = div512(nh, nl, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n                uint256 r = inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n                return unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n            }\\n            revert(); // `x * y / z >= 2 ^ 256`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 w = mulDivF(x, y, z);\\n            if (mulMod(x, y, z) > 0) return safeAdd(w, 1);\\n            return w;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        unchecked {\\n            uint256 p = mulModMax(x, y);\\n            uint256 q = unsafeMul(x, y);\\n            if (p >= q) return (p - q, q);\\n            return (unsafeSub(p, q) - 1, q);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `2 ^ 256 * xh + xl - y`, where `2 ^ 256 * xh + xl >= y`\\n     */\\n    function sub512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 y\\n    ) private pure returns (uint256, uint256) {\\n        unchecked {\\n            if (xl >= y) return (xh, xl - y);\\n            return (xh - 1, unsafeSub(xl, y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `(2 ^ 256 * xh + xl) / pow2n`, where `xl` is divisible by `pow2n`\\n     */\\n    function div512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 pow2n\\n    ) private pure returns (uint256) {\\n        unchecked {\\n            uint256 pow2nInv = unsafeAdd(unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n            return unsafeMul(xh, pow2nInv) | (xl / pow2n); // `(xh << (256 - n)) | (xl >> n)`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the inverse of `d` modulo `2 ^ 256`, where `d` is congruent to `1` modulo `2`\\n     */\\n    function inv256(uint256 d) private pure returns (uint256) {\\n        unchecked {\\n            // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n            uint256 x = 1;\\n            for (uint256 i = 0; i < 8; ++i)\\n                x = unsafeMul(x, unsafeSub(2, unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n            return x;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2433205309bedeec21e98639f6e1b9ae4b72bddfd16d3c7caa23f0bedd74c07a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nuint256 constant MAX_VAL = type(uint256).max;\\n\\n// reverts on overflow\\nfunction safeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    return x + y;\\n}\\n\\n// does not revert on overflow\\nfunction unsafeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x + y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeSub(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x - y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeMul(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x * y;\\n    }\\n}\\n\\n// does not overflow\\nfunction mulModMax(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, MAX_VAL);\\n    }\\n}\\n\\n// does not overflow\\nfunction mulMod(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z\\n) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x998fcec9a910b59ed67db5af0939b271f062585a8c16a614b529197ed86d0a8d\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/vMath.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nimport {FixedPointMathLib} from \\\"./FixedPointMathLib.sol\\\";\\nimport {IntegralMath} from \\\"./IntegralMath.sol\\\";\\n\\nlibrary vMath {\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function min(uint256[] calldata array) external pure returns (uint256) {\\n        uint256 min = array[0];\\n        for (uint8 i = 1; i < array.length; i++) {\\n            if (min > array[i]) {\\n                min = array[i];\\n            }\\n        }\\n        return min;\\n    }\\n\\n    function product(uint256[] calldata nums) external pure returns (uint256) {\\n        uint256 product = nums[0];\\n        for (uint256 i = 1; i < nums.length; i++) {\\n            product *= nums[i];\\n        }\\n        return product;\\n    }\\n\\n    //limited to curve pools only, either 2 or 3 assets (mostly 2)\\n    function geometric_mean(uint8 n, uint256 product)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        if (n == 2) {\\n            return FixedPointMathLib.sqrt(product);\\n        } else {\\n            //n == 3\\n            return IntegralMath.floorCbrt(product);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x771260414afb50c4937cc8185436eadf2292162955a4ea25cb1b8405d9a0e0fb\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/oracles/interfaces/ICurveOracle.sol":{"ICurveOracle":{"abi":[{"inputs":[{"internalType":"address","name":"curve_pool","type":"address"},{"internalType":"uint256[]","name":"prices","type":"uint256[]"}],"name":"get_price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"get_price(address,uint256[])":"6dcb6a32"}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curve_pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"get_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/interfaces/ICurveOracle.sol\":\"ICurveOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/interfaces/ICurveOracle.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurveOracle {\\n    function get_price(address curve_pool, uint256[] memory prices)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xdda871f8372f09487237b4047dbbcc88810eb55c357b2e91e13a068e043d4179\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/oracles/interfaces/ICurvePoolV1.sol":{"ICurvePool":{"abi":[{"inputs":[],"name":"get_virtual_price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"get_virtual_price()":"bb7b8b80"}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/interfaces/ICurvePoolV1.sol\":\"ICurvePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/interfaces/ICurvePoolV1.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x58f8992dae5fdd0d425f8fc86d7cb3f59e61ba73ccc1111c281645d48dad4a72\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/oracles/interfaces/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the token decimals."},"getOwner()":{"details":"Returns the bep token owner."},"name()":{"details":"Returns the token name."},"symbol()":{"details":"Returns the token symbol."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","getOwner()":"893d20e8","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the token decimals.\"},\"getOwner()\":{\"details\":\"Returns the bep token owner.\"},\"name()\":{\"details\":\"Returns the token name.\"},\"symbol()\":{\"details\":\"Returns the token symbol.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x647c6703e37aa5feb0eac5d74f41edb481254bc120e470e336561297b47999a8\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/oracles/libs/FixedPointMathLib.sol":{"FixedPointMathLib":{"abi":[],"devdoc":{"author":"Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e20bfde21414dfb255a704c16abb1718d0f80e57300c22a7e4508c11a2bc6d164736f6c63430008000033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E KECCAK256 0xBF 0xDE 0x21 COINBASE 0x4D 0xFB 0x25 GAS PUSH17 0x4C16ABB1718D0F80E57300C22A7E4508C1 BYTE 0x2B 0xC6 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ","sourceMap":"338:7688:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;338:7688:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e20bfde21414dfb255a704c16abb1718d0f80e57300c22a7e4508c11a2bc6d164736f6c63430008000033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E KECCAK256 0xBF 0xDE 0x21 COINBASE 0x4D 0xFB 0x25 GAS PUSH17 0x4C16ABB1718D0F80E57300C22A7E4508C1 BYTE 0x2B 0xC6 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ","sourceMap":"338:7688:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"divWadDown(uint256,uint256)":"infinite","divWadUp(uint256,uint256)":"infinite","mulDivDown(uint256,uint256,uint256)":"infinite","mulDivUp(uint256,uint256,uint256)":"infinite","mulWadDown(uint256,uint256)":"infinite","mulWadUp(uint256,uint256)":"infinite","rpow(uint256,uint256,uint256)":"infinite","sqrt(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Arithmetic library with operations for fixed-point numbers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/libs/FixedPointMathLib.sol\":\"FixedPointMathLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/libs/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc1552fe037c973c1ab30f607708735de7626eb22dcf6b2a02f2a39fa5d2b965\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Arithmetic library with operations for fixed-point numbers.","version":1}}},"contracts/oracles/libs/IntegralMath.sol":{"IntegralMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e97615149fe09ecb2ccaa29667e8c1d7873d089867c0adc7be6701c595e2bf9b64736f6c63430008000033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 PUSH23 0x15149FE09ECB2CCAA29667E8C1D7873D089867C0ADC7BE PUSH8 0x1C595E2BF9B6473 PUSH16 0x6C634300080000330000000000000000 ","sourceMap":"99:5952:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;99:5952:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e97615149fe09ecb2ccaa29667e8c1d7873d089867c0adc7be6701c595e2bf9b64736f6c63430008000033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 PUSH23 0x15149FE09ECB2CCAA29667E8C1D7873D089867C0ADC7BE PUSH8 0x1C595E2BF9B6473 PUSH16 0x6C634300080000330000000000000000 ","sourceMap":"99:5952:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"ceilCbrt(uint256)":"infinite","ceilSqrt(uint256)":"infinite","div512(uint256,uint256,uint256)":"infinite","floorCbrt(uint256)":"infinite","floorLog2(uint256)":"infinite","floorSqrt(uint256)":"infinite","inv256(uint256)":"infinite","mul512(uint256,uint256)":"infinite","mulDivC(uint256,uint256,uint256)":"infinite","mulDivF(uint256,uint256,uint256)":"infinite","roundDiv(uint256,uint256)":"infinite","sub512(uint256,uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/libs/IntegralMath.sol\":\"IntegralMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/libs/IntegralMath.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Uint.sol\\\";\\n\\nlibrary IntegralMath {\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the binary logarithm of `n`\\n     */\\n    function floorLog2(uint256 n) internal pure returns (uint8) {\\n        unchecked {\\n            uint8 res = 0;\\n\\n            if (n < 256) {\\n                // at most 8 iterations\\n                while (n > 1) {\\n                    n >>= 1;\\n                    res += 1;\\n                }\\n            } else {\\n                // exactly 8 iterations\\n                for (uint8 s = 128; s > 0; s >>= 1) {\\n                    if (n >= 1 << s) {\\n                        n >>= s;\\n                        res |= s;\\n                    }\\n                }\\n            }\\n\\n            return res;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the square root of `n`\\n     */\\n    function floorSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n > 0) {\\n                uint256 x = n / 2 + 1;\\n                uint256 y = (x + n / x) / 2;\\n                while (x > y) {\\n                    x = y;\\n                    y = (x + n / x) / 2;\\n                }\\n                return x;\\n            }\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the square root of `n`\\n     */\\n    function ceilSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorSqrt(n);\\n            return x**2 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the cubic root of `n`\\n     */\\n    function floorCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = 0;\\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\n                x <<= 1;\\n                uint256 z = 3 * x * (x + 1) + 1;\\n                if (n / y >= z) {\\n                    n -= y * z;\\n                    x += 1;\\n                }\\n            }\\n            return x;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the cubic root of `n`\\n     */\\n    function ceilCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorCbrt(n);\\n            return x**3 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the nearest integer to the quotient of `n` and `d` (or `n / d`)\\n     */\\n    function roundDiv(uint256 n, uint256 d) internal pure returns (uint256) {\\n        unchecked {\\n            return n / d + (n % d) / (d - d / 2);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            (uint256 xyh, uint256 xyl) = mul512(x, y);\\n            if (xyh == 0) {\\n                // `x * y < 2 ^ 256`\\n                return xyl / z;\\n            }\\n            if (xyh < z) {\\n                // `x * y / z < 2 ^ 256`\\n                uint256 m = mulMod(x, y, z); // `m = x * y % z`\\n                (uint256 nh, uint256 nl) = sub512(xyh, xyl, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n                if (nh == 0) {\\n                    // `n < 2 ^ 256`\\n                    return nl / z;\\n                }\\n                uint256 p = unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n                uint256 q = div512(nh, nl, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n                uint256 r = inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n                return unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n            }\\n            revert(); // `x * y / z >= 2 ^ 256`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 w = mulDivF(x, y, z);\\n            if (mulMod(x, y, z) > 0) return safeAdd(w, 1);\\n            return w;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        unchecked {\\n            uint256 p = mulModMax(x, y);\\n            uint256 q = unsafeMul(x, y);\\n            if (p >= q) return (p - q, q);\\n            return (unsafeSub(p, q) - 1, q);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `2 ^ 256 * xh + xl - y`, where `2 ^ 256 * xh + xl >= y`\\n     */\\n    function sub512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 y\\n    ) private pure returns (uint256, uint256) {\\n        unchecked {\\n            if (xl >= y) return (xh, xl - y);\\n            return (xh - 1, unsafeSub(xl, y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `(2 ^ 256 * xh + xl) / pow2n`, where `xl` is divisible by `pow2n`\\n     */\\n    function div512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 pow2n\\n    ) private pure returns (uint256) {\\n        unchecked {\\n            uint256 pow2nInv = unsafeAdd(unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n            return unsafeMul(xh, pow2nInv) | (xl / pow2n); // `(xh << (256 - n)) | (xl >> n)`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the inverse of `d` modulo `2 ^ 256`, where `d` is congruent to `1` modulo `2`\\n     */\\n    function inv256(uint256 d) private pure returns (uint256) {\\n        unchecked {\\n            // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n            uint256 x = 1;\\n            for (uint256 i = 0; i < 8; ++i)\\n                x = unsafeMul(x, unsafeSub(2, unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n            return x;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2433205309bedeec21e98639f6e1b9ae4b72bddfd16d3c7caa23f0bedd74c07a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nuint256 constant MAX_VAL = type(uint256).max;\\n\\n// reverts on overflow\\nfunction safeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    return x + y;\\n}\\n\\n// does not revert on overflow\\nfunction unsafeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x + y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeSub(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x - y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeMul(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x * y;\\n    }\\n}\\n\\n// does not overflow\\nfunction mulModMax(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, MAX_VAL);\\n    }\\n}\\n\\n// does not overflow\\nfunction mulMod(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z\\n) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x998fcec9a910b59ed67db5af0939b271f062585a8c16a614b529197ed86d0a8d\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/oracles/libs/vMath.sol":{"vMath":{"abi":[{"inputs":[{"internalType":"uint8","name":"n","type":"uint8"},{"internalType":"uint256","name":"product","type":"uint256"}],"name":"geometric_mean","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"array","type":"uint256[]"}],"name":"min","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"nums","type":"uint256[]"}],"name":"product","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"61048861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80638e5fede814610050578063d834e61914610079578063f43b9abe1461008c575b600080fd5b61006361005e36600461033a565b61009f565b60405161007091906103d9565b60405180910390f35b61006361008736600461033a565b61012b565b61006361009a3660046103a9565b6101da565b600080838360008181106100c357634e487b7160e01b600052603260045260246000fd5b9050602002013590506000600190505b83811015610121578484828181106100fb57634e487b7160e01b600052603260045260246000fd5b905060200201358261010d91906103e2565b91508061011981610401565b9150506100d3565b5090505b92915050565b6000808383600081811061014f57634e487b7160e01b600052603260045260246000fd5b9050602002013590506000600190505b60ff81168411156101215784848260ff1681811061018d57634e487b7160e01b600052603260045260246000fd5b905060200201358211156101c85784848260ff168181106101be57634e487b7160e01b600052603260045260246000fd5b9050602002013591505b806101d28161041c565b91505061015f565b60008260ff16600214156101f8576101f182610201565b9050610125565b6101f1826102da565b600181600160801b811061021a5760409190911b9060801c5b6801000000000000000081106102355760209190911b9060401c5b640100000000811061024c5760109190911b9060201c5b6201000081106102615760089190911b9060101c5b61010081106102755760049190911b9060081c5b601081106102885760029190911b9060041c5b60088110610297578160011b91505b5080820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c808204818110156102d4578091505b50919050565b600080600160ff1b5b801561033357600191821b918281018302600302018082868161031657634e487b7160e01b600052601260045260246000fd5b041061032a57808202850394506001830192505b5060031c6102e3565b5092915050565b6000806020838503121561034c578182fd5b823567ffffffffffffffff80821115610363578384fd5b818501915085601f830112610376578384fd5b813581811115610384578485fd5b8660208083028501011115610397578485fd5b60209290920196919550909350505050565b600080604083850312156103bb578081fd5b823560ff811681146103cb578182fd5b946020939093013593505050565b90815260200190565b60008160001904831182151516156103fc576103fc61043c565b500290565b60006000198214156104155761041561043c565b5060010190565b600060ff821660ff8114156104335761043361043c565b60010192915050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220546a8d78aae6409dd6fb516754d5b05b208459d12e15e1c22a8c186b030bc55764736f6c63430008000033","opcodes":"PUSH2 0x488 PUSH2 0x3A PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E5FEDE8 EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xD834E619 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0xF43B9ABE EQ PUSH2 0x8C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x63 PUSH2 0x5E CALLDATASIZE PUSH1 0x4 PUSH2 0x33A JUMP JUMPDEST PUSH2 0x9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x63 PUSH2 0x87 CALLDATASIZE PUSH1 0x4 PUSH2 0x33A JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH2 0x63 PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x3A9 JUMP JUMPDEST PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP4 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xC3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 SWAP1 POP JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x121 JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0xFB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0x10D SWAP2 SWAP1 PUSH2 0x3E2 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x119 DUP2 PUSH2 0x401 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD3 JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP4 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x14F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 SWAP1 POP JUMPDEST PUSH1 0xFF DUP2 AND DUP5 GT ISZERO PUSH2 0x121 JUMPI DUP5 DUP5 DUP3 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x18D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0x1C8 JUMPI DUP5 DUP5 DUP3 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x1BE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP2 POP JUMPDEST DUP1 PUSH2 0x1D2 DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x15F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xFF AND PUSH1 0x2 EQ ISZERO PUSH2 0x1F8 JUMPI PUSH2 0x1F1 DUP3 PUSH2 0x201 JUMP JUMPDEST SWAP1 POP PUSH2 0x125 JUMP JUMPDEST PUSH2 0x1F1 DUP3 PUSH2 0x2DA JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x1 PUSH1 0x80 SHL DUP2 LT PUSH2 0x21A JUMPI PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x80 SHR JUMPDEST PUSH9 0x10000000000000000 DUP2 LT PUSH2 0x235 JUMPI PUSH1 0x20 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x40 SHR JUMPDEST PUSH5 0x100000000 DUP2 LT PUSH2 0x24C JUMPI PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x20 SHR JUMPDEST PUSH3 0x10000 DUP2 LT PUSH2 0x261 JUMPI PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x10 SHR JUMPDEST PUSH2 0x100 DUP2 LT PUSH2 0x275 JUMPI PUSH1 0x4 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x8 SHR JUMPDEST PUSH1 0x10 DUP2 LT PUSH2 0x288 JUMPI PUSH1 0x2 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x4 SHR JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0x297 JUMPI DUP2 PUSH1 0x1 SHL SWAP2 POP JUMPDEST POP DUP1 DUP3 DIV ADD PUSH1 0x1 SWAP1 DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD SWAP1 SHR DUP1 DUP3 DIV DUP2 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI DUP1 SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0xFF SHL JUMPDEST DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x1 SWAP2 DUP3 SHL SWAP2 DUP3 DUP2 ADD DUP4 MUL PUSH1 0x3 MUL ADD DUP1 DUP3 DUP7 DUP2 PUSH2 0x316 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV LT PUSH2 0x32A JUMPI DUP1 DUP3 MUL DUP6 SUB SWAP5 POP PUSH1 0x1 DUP4 ADD SWAP3 POP JUMPDEST POP PUSH1 0x3 SHR PUSH2 0x2E3 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x363 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x376 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x384 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x397 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3CB JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3FC JUMPI PUSH2 0x3FC PUSH2 0x43C JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x415 JUMPI PUSH2 0x415 PUSH2 0x43C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x433 JUMPI PUSH2 0x433 PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD PUSH11 0x8D78AAE6409DD6FB516754 0xD5 0xB0 JUMPDEST KECCAK256 DUP5 MSIZE 0xD1 0x2E ISZERO 0xE1 0xC2 0x2A DUP13 XOR PUSH12 0x30BC55764736F6C63430008 STOP STOP CALLER ","sourceMap":"135:978:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;135:978:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1859:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"119:561:12","statements":[{"body":{"nodeType":"YulBlock","src":"165:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"174:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"182:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:12"},"nodeType":"YulFunctionCall","src":"167:22:12"},"nodeType":"YulExpressionStatement","src":"167:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"140:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"149:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"136:3:12"},"nodeType":"YulFunctionCall","src":"136:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"161:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"132:3:12"},"nodeType":"YulFunctionCall","src":"132:32:12"},"nodeType":"YulIf","src":"129:2:12"},{"nodeType":"YulVariableDeclaration","src":"200:37:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"227:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"214:12:12"},"nodeType":"YulFunctionCall","src":"214:23:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"204:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"246:28:12","value":{"kind":"number","nodeType":"YulLiteral","src":"256:18:12","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"250:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"301:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"310:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"318:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"303:6:12"},"nodeType":"YulFunctionCall","src":"303:22:12"},"nodeType":"YulExpressionStatement","src":"303:22:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"289:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"297:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"286:2:12"},"nodeType":"YulFunctionCall","src":"286:14:12"},"nodeType":"YulIf","src":"283:2:12"},{"nodeType":"YulVariableDeclaration","src":"336:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"350:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"361:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"346:3:12"},"nodeType":"YulFunctionCall","src":"346:22:12"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"340:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"416:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"425:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"433:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"418:6:12"},"nodeType":"YulFunctionCall","src":"418:22:12"},"nodeType":"YulExpressionStatement","src":"418:22:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"395:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"399:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"391:3:12"},"nodeType":"YulFunctionCall","src":"391:13:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"406:7:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"387:3:12"},"nodeType":"YulFunctionCall","src":"387:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"380:6:12"},"nodeType":"YulFunctionCall","src":"380:35:12"},"nodeType":"YulIf","src":"377:2:12"},{"nodeType":"YulVariableDeclaration","src":"451:30:12","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"478:2:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"465:12:12"},"nodeType":"YulFunctionCall","src":"465:16:12"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"455:6:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"508:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"517:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"525:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"510:6:12"},"nodeType":"YulFunctionCall","src":"510:22:12"},"nodeType":"YulExpressionStatement","src":"510:22:12"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"496:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"504:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"493:2:12"},"nodeType":"YulFunctionCall","src":"493:14:12"},"nodeType":"YulIf","src":"490:2:12"},{"body":{"nodeType":"YulBlock","src":"593:26:12","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"602:6:12"},{"name":"value0","nodeType":"YulIdentifier","src":"610:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"595:6:12"},"nodeType":"YulFunctionCall","src":"595:22:12"},"nodeType":"YulExpressionStatement","src":"595:22:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"557:2:12"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"565:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"573:2:12","type":"","value":"32"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"561:3:12"},"nodeType":"YulFunctionCall","src":"561:15:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"553:3:12"},"nodeType":"YulFunctionCall","src":"553:24:12"},{"kind":"number","nodeType":"YulLiteral","src":"579:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"549:3:12"},"nodeType":"YulFunctionCall","src":"549:33:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"584:7:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"546:2:12"},"nodeType":"YulFunctionCall","src":"546:46:12"},"nodeType":"YulIf","src":"543:2:12"},{"nodeType":"YulAssignment","src":"628:21:12","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"642:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"646:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"638:3:12"},"nodeType":"YulFunctionCall","src":"638:11:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"628:6:12"}]},{"nodeType":"YulAssignment","src":"658:16:12","value":{"name":"length","nodeType":"YulIdentifier","src":"668:6:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"658:6:12"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"77:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"88:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"100:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"108:6:12","type":""}],"src":"14:666:12"},{"body":{"nodeType":"YulBlock","src":"770:272:12","statements":[{"body":{"nodeType":"YulBlock","src":"816:26:12","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"825:6:12"},{"name":"value1","nodeType":"YulIdentifier","src":"833:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"818:6:12"},"nodeType":"YulFunctionCall","src":"818:22:12"},"nodeType":"YulExpressionStatement","src":"818:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"791:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"800:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"787:3:12"},"nodeType":"YulFunctionCall","src":"787:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"812:2:12","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"783:3:12"},"nodeType":"YulFunctionCall","src":"783:32:12"},"nodeType":"YulIf","src":"780:2:12"},{"nodeType":"YulVariableDeclaration","src":"851:36:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"877:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"864:12:12"},"nodeType":"YulFunctionCall","src":"864:23:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"855:5:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"935:26:12","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"944:6:12"},{"name":"value1","nodeType":"YulIdentifier","src":"952:6:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"937:6:12"},"nodeType":"YulFunctionCall","src":"937:22:12"},"nodeType":"YulExpressionStatement","src":"937:22:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"909:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"920:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"927:4:12","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"916:3:12"},"nodeType":"YulFunctionCall","src":"916:16:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"906:2:12"},"nodeType":"YulFunctionCall","src":"906:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"899:6:12"},"nodeType":"YulFunctionCall","src":"899:35:12"},"nodeType":"YulIf","src":"896:2:12"},{"nodeType":"YulAssignment","src":"970:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"980:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"970:6:12"}]},{"nodeType":"YulAssignment","src":"994:42:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1021:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1032:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1017:3:12"},"nodeType":"YulFunctionCall","src":"1017:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1004:12:12"},"nodeType":"YulFunctionCall","src":"1004:32:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"994:6:12"}]}]},"name":"abi_decode_tuple_t_uint8t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"728:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"739:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"751:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"759:6:12","type":""}],"src":"685:357:12"},{"body":{"nodeType":"YulBlock","src":"1156:76:12","statements":[{"nodeType":"YulAssignment","src":"1166:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1178:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1189:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1174:3:12"},"nodeType":"YulFunctionCall","src":"1174:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1166:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1208:9:12"},{"name":"value0","nodeType":"YulIdentifier","src":"1219:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1201:6:12"},"nodeType":"YulFunctionCall","src":"1201:25:12"},"nodeType":"YulExpressionStatement","src":"1201:25:12"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1125:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1136:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1147:4:12","type":""}],"src":"1047:185:12"},{"body":{"nodeType":"YulBlock","src":"1289:116:12","statements":[{"body":{"nodeType":"YulBlock","src":"1348:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1350:16:12"},"nodeType":"YulFunctionCall","src":"1350:18:12"},"nodeType":"YulExpressionStatement","src":"1350:18:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1320:1:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1313:6:12"},"nodeType":"YulFunctionCall","src":"1313:9:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1306:6:12"},"nodeType":"YulFunctionCall","src":"1306:17:12"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"1328:1:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1339:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1335:3:12"},"nodeType":"YulFunctionCall","src":"1335:6:12"},{"name":"x","nodeType":"YulIdentifier","src":"1343:1:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1331:3:12"},"nodeType":"YulFunctionCall","src":"1331:14:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1325:2:12"},"nodeType":"YulFunctionCall","src":"1325:21:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1302:3:12"},"nodeType":"YulFunctionCall","src":"1302:45:12"},"nodeType":"YulIf","src":"1299:2:12"},{"nodeType":"YulAssignment","src":"1379:20:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1394:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"1397:1:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1390:3:12"},"nodeType":"YulFunctionCall","src":"1390:9:12"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"1379:7:12"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1268:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"1271:1:12","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"1277:7:12","type":""}],"src":"1237:168:12"},{"body":{"nodeType":"YulBlock","src":"1457:88:12","statements":[{"body":{"nodeType":"YulBlock","src":"1488:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1490:16:12"},"nodeType":"YulFunctionCall","src":"1490:18:12"},"nodeType":"YulExpressionStatement","src":"1490:18:12"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1473:5:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1484:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1480:3:12"},"nodeType":"YulFunctionCall","src":"1480:6:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1470:2:12"},"nodeType":"YulFunctionCall","src":"1470:17:12"},"nodeType":"YulIf","src":"1467:2:12"},{"nodeType":"YulAssignment","src":"1519:20:12","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1530:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"1537:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1526:3:12"},"nodeType":"YulFunctionCall","src":"1526:13:12"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1519:3:12"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1439:5:12","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1449:3:12","type":""}],"src":"1410:135:12"},{"body":{"nodeType":"YulBlock","src":"1595:130:12","statements":[{"nodeType":"YulVariableDeclaration","src":"1605:31:12","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1624:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"1631:4:12","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1620:3:12"},"nodeType":"YulFunctionCall","src":"1620:16:12"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1609:7:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"1666:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1668:16:12"},"nodeType":"YulFunctionCall","src":"1668:18:12"},"nodeType":"YulExpressionStatement","src":"1668:18:12"}]},"condition":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1651:7:12"},{"kind":"number","nodeType":"YulLiteral","src":"1660:4:12","type":"","value":"0xff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1648:2:12"},"nodeType":"YulFunctionCall","src":"1648:17:12"},"nodeType":"YulIf","src":"1645:2:12"},{"nodeType":"YulAssignment","src":"1697:22:12","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1708:7:12"},{"kind":"number","nodeType":"YulLiteral","src":"1717:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1704:3:12"},"nodeType":"YulFunctionCall","src":"1704:15:12"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1697:3:12"}]}]},"name":"increment_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1577:5:12","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1587:3:12","type":""}],"src":"1550:175:12"},{"body":{"nodeType":"YulBlock","src":"1762:95:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1779:1:12","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1786:3:12","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1791:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1782:3:12"},"nodeType":"YulFunctionCall","src":"1782:20:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1772:6:12"},"nodeType":"YulFunctionCall","src":"1772:31:12"},"nodeType":"YulExpressionStatement","src":"1772:31:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1819:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1822:4:12","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1812:6:12"},"nodeType":"YulFunctionCall","src":"1812:15:12"},"nodeType":"YulExpressionStatement","src":"1812:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1843:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1846:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1836:6:12"},"nodeType":"YulFunctionCall","src":"1836:15:12"},"nodeType":"YulExpressionStatement","src":"1836:15:12"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"1730:127:12"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value0, value0) }\n        if gt(add(add(_2, mul(length, 32)), 32), dataEnd) { revert(value0, value0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_uint8t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(value1, value1) }\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80638e5fede814610050578063d834e61914610079578063f43b9abe1461008c575b600080fd5b61006361005e36600461033a565b61009f565b60405161007091906103d9565b60405180910390f35b61006361008736600461033a565b61012b565b61006361009a3660046103a9565b6101da565b600080838360008181106100c357634e487b7160e01b600052603260045260246000fd5b9050602002013590506000600190505b83811015610121578484828181106100fb57634e487b7160e01b600052603260045260246000fd5b905060200201358261010d91906103e2565b91508061011981610401565b9150506100d3565b5090505b92915050565b6000808383600081811061014f57634e487b7160e01b600052603260045260246000fd5b9050602002013590506000600190505b60ff81168411156101215784848260ff1681811061018d57634e487b7160e01b600052603260045260246000fd5b905060200201358211156101c85784848260ff168181106101be57634e487b7160e01b600052603260045260246000fd5b9050602002013591505b806101d28161041c565b91505061015f565b60008260ff16600214156101f8576101f182610201565b9050610125565b6101f1826102da565b600181600160801b811061021a5760409190911b9060801c5b6801000000000000000081106102355760209190911b9060401c5b640100000000811061024c5760109190911b9060201c5b6201000081106102615760089190911b9060101c5b61010081106102755760049190911b9060081c5b601081106102885760029190911b9060041c5b60088110610297578160011b91505b5080820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c808204818110156102d4578091505b50919050565b600080600160ff1b5b801561033357600191821b918281018302600302018082868161031657634e487b7160e01b600052601260045260246000fd5b041061032a57808202850394506001830192505b5060031c6102e3565b5092915050565b6000806020838503121561034c578182fd5b823567ffffffffffffffff80821115610363578384fd5b818501915085601f830112610376578384fd5b813581811115610384578485fd5b8660208083028501011115610397578485fd5b60209290920196919550909350505050565b600080604083850312156103bb578081fd5b823560ff811681146103cb578182fd5b946020939093013593505050565b90815260200190565b60008160001904831182151516156103fc576103fc61043c565b500290565b60006000198214156104155761041561043c565b5060010190565b600060ff821660ff8114156104335761043361043c565b60010192915050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220546a8d78aae6409dd6fb516754d5b05b208459d12e15e1c22a8c186b030bc55764736f6c63430008000033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E5FEDE8 EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xD834E619 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0xF43B9ABE EQ PUSH2 0x8C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x63 PUSH2 0x5E CALLDATASIZE PUSH1 0x4 PUSH2 0x33A JUMP JUMPDEST PUSH2 0x9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x70 SWAP2 SWAP1 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x63 PUSH2 0x87 CALLDATASIZE PUSH1 0x4 PUSH2 0x33A JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH2 0x63 PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x3A9 JUMP JUMPDEST PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP4 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xC3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 SWAP1 POP JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x121 JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0xFB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0x10D SWAP2 SWAP1 PUSH2 0x3E2 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x119 DUP2 PUSH2 0x401 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD3 JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP4 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x14F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 SWAP1 POP JUMPDEST PUSH1 0xFF DUP2 AND DUP5 GT ISZERO PUSH2 0x121 JUMPI DUP5 DUP5 DUP3 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x18D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0x1C8 JUMPI DUP5 DUP5 DUP3 PUSH1 0xFF AND DUP2 DUP2 LT PUSH2 0x1BE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP2 POP JUMPDEST DUP1 PUSH2 0x1D2 DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x15F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xFF AND PUSH1 0x2 EQ ISZERO PUSH2 0x1F8 JUMPI PUSH2 0x1F1 DUP3 PUSH2 0x201 JUMP JUMPDEST SWAP1 POP PUSH2 0x125 JUMP JUMPDEST PUSH2 0x1F1 DUP3 PUSH2 0x2DA JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x1 PUSH1 0x80 SHL DUP2 LT PUSH2 0x21A JUMPI PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x80 SHR JUMPDEST PUSH9 0x10000000000000000 DUP2 LT PUSH2 0x235 JUMPI PUSH1 0x20 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x40 SHR JUMPDEST PUSH5 0x100000000 DUP2 LT PUSH2 0x24C JUMPI PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x20 SHR JUMPDEST PUSH3 0x10000 DUP2 LT PUSH2 0x261 JUMPI PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x10 SHR JUMPDEST PUSH2 0x100 DUP2 LT PUSH2 0x275 JUMPI PUSH1 0x4 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x8 SHR JUMPDEST PUSH1 0x10 DUP2 LT PUSH2 0x288 JUMPI PUSH1 0x2 SWAP2 SWAP1 SWAP2 SHL SWAP1 PUSH1 0x4 SHR JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0x297 JUMPI DUP2 PUSH1 0x1 SHL SWAP2 POP JUMPDEST POP DUP1 DUP3 DIV ADD PUSH1 0x1 SWAP1 DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD DUP2 SHR DUP1 DUP4 DIV ADD SWAP1 SHR DUP1 DUP3 DIV DUP2 DUP2 LT ISZERO PUSH2 0x2D4 JUMPI DUP1 SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0xFF SHL JUMPDEST DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x1 SWAP2 DUP3 SHL SWAP2 DUP3 DUP2 ADD DUP4 MUL PUSH1 0x3 MUL ADD DUP1 DUP3 DUP7 DUP2 PUSH2 0x316 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV LT PUSH2 0x32A JUMPI DUP1 DUP3 MUL DUP6 SUB SWAP5 POP PUSH1 0x1 DUP4 ADD SWAP3 POP JUMPDEST POP PUSH1 0x3 SHR PUSH2 0x2E3 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x363 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x376 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x384 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x397 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3CB JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3FC JUMPI PUSH2 0x3FC PUSH2 0x43C JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x415 JUMPI PUSH2 0x415 PUSH2 0x43C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x433 JUMPI PUSH2 0x433 PUSH2 0x43C JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD PUSH11 0x8D78AAE6409DD6FB516754 0xD5 0xB0 JUMPDEST KECCAK256 DUP5 MSIZE 0xD1 0x2E ISZERO 0xE1 0xC2 0x2A DUP13 XOR PUSH12 0x30BC55764736F6C63430008 STOP STOP CALLER ","sourceMap":"135:978:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;513:234;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;236:271;;;;;;:::i;:::-;;:::i;820:291::-;;;;;;:::i;:::-;;:::i;513:234::-;578:7;597:15;615:4;;620:1;615:7;;;;;-1:-1:-1;;;615:7:11;;;;;;;;;;;;;;;597:25;;637:9;649:1;637:13;;632:85;652:15;;;632:85;;;699:4;;704:1;699:7;;;;;-1:-1:-1;;;699:7:11;;;;;;;;;;;;;;;688:18;;;;;:::i;:::-;;-1:-1:-1;669:3:11;;;;:::i;:::-;;;;632:85;;;-1:-1:-1;733:7:11;-1:-1:-1;513:234:11;;;;;:::o;236:271::-;298:7;317:11;331:5;;337:1;331:8;;;;;-1:-1:-1;;;331:8:11;;;;;;;;;;;;;;;317:22;;354:7;364:1;354:11;;349:132;367:16;;;;-1:-1:-1;349:132:11;;;414:5;;420:1;414:8;;;;;;;-1:-1:-1;;;414:8:11;;;;;;;;;;;;;;;408:3;:14;404:67;;;448:5;;454:1;448:8;;;;;;;-1:-1:-1;;;448:8:11;;;;;;;;;;;;;;;442:14;;404:67;385:3;;;;:::i;:::-;;;;349:132;;820:291;917:7;944:1;:6;;949:1;944:6;940:165;;;973:31;996:7;973:22;:31::i;:::-;966:38;;;;940:165;1063:31;1086:7;1063:22;:31::i;5908:2116:8:-;6043:1;6127;-1:-1:-1;;;6220:42:8;;6210:2;;6354;6350:10;;;;;6291:3;6287:11;6210:2;6435:19;6432:1;6429:26;6419:2;;6545;6541:10;;;;;6484:2;6480:10;6419:2;6626:11;6623:1;6620:18;6610:2;;6728;6724:10;;;;;6667:2;6663:10;6610:2;6809:7;6806:1;6803:14;6793:2;;6907:1;6903:9;;;;;6846:2;6842:10;6793:2;6986:5;6983:1;6980:12;6970:2;;7080:1;7076:9;;;;;7021:1;7017:9;6970:2;7159:4;7156:1;7153:11;7143:2;;7252:1;7248:9;;;;;7193:1;7189:9;7143:2;7331:3;7328:1;7325:10;7315:2;;7408:1;7405;7401:9;7396:14;;7315:2;-1:-1:-1;7515:9:8;;;7508:17;7505:1;7501:25;;;7558:9;;;7551:17;7544:25;;7601:9;;;7594:17;7587:25;;7644:9;;;7637:17;7630:25;;7687:9;;;7680:17;7673:25;;7730:9;;;7723:17;7716:25;;7773:9;;;7766:17;7759:25;;7868:9;;;7943:17;;;7940:2;;;7984:10;7979:15;;7940:2;;5986:2032;;;:::o;1731:405:9:-;1784:7;;-1:-1:-1;;;1854:244:9;1881:5;;1854:244;;1921:1;1915:7;;;;1961:5;;;1952:15;;:1;:15;:19;;1997:1;1993;1997;1993:5;;-1:-1:-1;;;1993:5:9;;;;;;;;;;:10;1989:95;;2036:1;2032;:5;2027:10;;;;2064:1;2059:6;;;;1989:95;-1:-1:-1;1894:1:9;1888:7;1854:244;;;-1:-1:-1;2118:1:9;1731:405;-1:-1:-1;;1731:405:9:o;14:666:12:-;;;161:2;149:9;140:7;136:23;132:32;129:2;;;182:6;174;167:22;129:2;227:9;214:23;256:18;297:2;289:6;286:14;283:2;;;318:6;310;303:22;283:2;361:6;350:9;346:22;336:32;;406:7;399:4;395:2;391:13;387:27;377:2;;433:6;425;418:22;377:2;478;465:16;504:2;496:6;493:14;490:2;;;525:6;517;510:22;490:2;584:7;579:2;573;565:6;561:15;557:2;553:24;549:33;546:46;543:2;;;610:6;602;595:22;543:2;646;638:11;;;;;668:6;;-1:-1:-1;119:561:12;;-1:-1:-1;;;;119:561:12:o;685:357::-;;;812:2;800:9;791:7;787:23;783:32;780:2;;;833:6;825;818:22;780:2;877:9;864:23;927:4;920:5;916:16;909:5;906:27;896:2;;952:6;944;937:22;896:2;980:5;1032:2;1017:18;;;;1004:32;;-1:-1:-1;;;770:272:12:o;1047:185::-;1201:25;;;1189:2;1174:18;;1156:76::o;1237:168::-;;1343:1;1339;1335:6;1331:14;1328:1;1325:21;1320:1;1313:9;1306:17;1302:45;1299:2;;;1350:18;;:::i;:::-;-1:-1:-1;1390:9:12;;1289:116::o;1410:135::-;;-1:-1:-1;;1470:17:12;;1467:2;;;1490:18;;:::i;:::-;-1:-1:-1;1537:1:12;1526:13;;1457:88::o;1550:175::-;;1631:4;1624:5;1620:16;1660:4;1651:7;1648:17;1645:2;;;1668:18;;:::i;:::-;1717:1;1704:15;;1595:130;-1:-1:-1;;1595:130:12:o;1730:127::-;1791:10;1786:3;1782:20;1779:1;1772:31;1822:4;1819:1;1812:15;1846:4;1843:1;1836:15"},"gasEstimates":{"creation":{"codeDepositCost":"232000","executionCost":"306","totalCost":"232306"},"external":{"geometric_mean(uint8,uint256)":"infinite","min(uint256[])":"infinite","product(uint256[])":"infinite"}},"methodIdentifiers":{"geometric_mean(uint8,uint256)":"f43b9abe","min(uint256[])":"d834e619","product(uint256[])":"8e5fede8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"n\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"product\",\"type\":\"uint256\"}],\"name\":\"geometric_mean\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nums\",\"type\":\"uint256[]\"}],\"name\":\"product\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/libs/vMath.sol\":\"vMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracles/libs/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(\\n                and(\\n                    iszero(iszero(denominator)),\\n                    or(iszero(x), eq(div(z, x), y))\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc1552fe037c973c1ab30f607708735de7626eb22dcf6b2a02f2a39fa5d2b965\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracles/libs/IntegralMath.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Uint.sol\\\";\\n\\nlibrary IntegralMath {\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the binary logarithm of `n`\\n     */\\n    function floorLog2(uint256 n) internal pure returns (uint8) {\\n        unchecked {\\n            uint8 res = 0;\\n\\n            if (n < 256) {\\n                // at most 8 iterations\\n                while (n > 1) {\\n                    n >>= 1;\\n                    res += 1;\\n                }\\n            } else {\\n                // exactly 8 iterations\\n                for (uint8 s = 128; s > 0; s >>= 1) {\\n                    if (n >= 1 << s) {\\n                        n >>= s;\\n                        res |= s;\\n                    }\\n                }\\n            }\\n\\n            return res;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the square root of `n`\\n     */\\n    function floorSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n > 0) {\\n                uint256 x = n / 2 + 1;\\n                uint256 y = (x + n / x) / 2;\\n                while (x > y) {\\n                    x = y;\\n                    y = (x + n / x) / 2;\\n                }\\n                return x;\\n            }\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the square root of `n`\\n     */\\n    function ceilSqrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorSqrt(n);\\n            return x**2 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to the cubic root of `n`\\n     */\\n    function floorCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = 0;\\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\n                x <<= 1;\\n                uint256 z = 3 * x * (x + 1) + 1;\\n                if (n / y >= z) {\\n                    n -= y * z;\\n                    x += 1;\\n                }\\n            }\\n            return x;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to the cubic root of `n`\\n     */\\n    function ceilCbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = floorCbrt(n);\\n            return x**3 == n ? x : x + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the nearest integer to the quotient of `n` and `d` (or `n / d`)\\n     */\\n    function roundDiv(uint256 n, uint256 d) internal pure returns (uint256) {\\n        unchecked {\\n            return n / d + (n % d) / (d - d / 2);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the largest integer smaller than or equal to `x * y / z`\\n     */\\n    function mulDivF(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            (uint256 xyh, uint256 xyl) = mul512(x, y);\\n            if (xyh == 0) {\\n                // `x * y < 2 ^ 256`\\n                return xyl / z;\\n            }\\n            if (xyh < z) {\\n                // `x * y / z < 2 ^ 256`\\n                uint256 m = mulMod(x, y, z); // `m = x * y % z`\\n                (uint256 nh, uint256 nl) = sub512(xyh, xyl, m); // `n = x * y - m` hence `n / z = floor(x * y / z)`\\n                if (nh == 0) {\\n                    // `n < 2 ^ 256`\\n                    return nl / z;\\n                }\\n                uint256 p = unsafeSub(0, z) & z; // `p` is the largest power of 2 which `z` is divisible by\\n                uint256 q = div512(nh, nl, p); // `n` is divisible by `p` because `n` is divisible by `z` and `z` is divisible by `p`\\n                uint256 r = inv256(z / p); // `z / p = 1 mod 2` hence `inverse(z / p) = 1 mod 2 ^ 256`\\n                return unsafeMul(q, r); // `q * r = (n / p) * inverse(z / p) = n / z`\\n            }\\n            revert(); // `x * y / z >= 2 ^ 256`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the smallest integer larger than or equal to `x * y / z`\\n     */\\n    function mulDivC(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 w = mulDivF(x, y, z);\\n            if (mulMod(x, y, z) > 0) return safeAdd(w, 1);\\n            return w;\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `x * y`\\n     */\\n    function mul512(uint256 x, uint256 y)\\n        private\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        unchecked {\\n            uint256 p = mulModMax(x, y);\\n            uint256 q = unsafeMul(x, y);\\n            if (p >= q) return (p - q, q);\\n            return (unsafeSub(p, q) - 1, q);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `2 ^ 256 * xh + xl - y`, where `2 ^ 256 * xh + xl >= y`\\n     */\\n    function sub512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 y\\n    ) private pure returns (uint256, uint256) {\\n        unchecked {\\n            if (xl >= y) return (xh, xl - y);\\n            return (xh - 1, unsafeSub(xl, y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the value of `(2 ^ 256 * xh + xl) / pow2n`, where `xl` is divisible by `pow2n`\\n     */\\n    function div512(\\n        uint256 xh,\\n        uint256 xl,\\n        uint256 pow2n\\n    ) private pure returns (uint256) {\\n        unchecked {\\n            uint256 pow2nInv = unsafeAdd(unsafeSub(0, pow2n) / pow2n, 1); // `1 << (256 - n)`\\n            return unsafeMul(xh, pow2nInv) | (xl / pow2n); // `(xh << (256 - n)) | (xl >> n)`\\n        }\\n    }\\n\\n    /**\\n     * @dev Compute the inverse of `d` modulo `2 ^ 256`, where `d` is congruent to `1` modulo `2`\\n     */\\n    function inv256(uint256 d) private pure returns (uint256) {\\n        unchecked {\\n            // approximate the root of `f(x) = 1 / x - d` using the newton\\u2013raphson convergence method\\n            uint256 x = 1;\\n            for (uint256 i = 0; i < 8; ++i)\\n                x = unsafeMul(x, unsafeSub(2, unsafeMul(x, d))); // `x = x * (2 - x * d) mod 2 ^ 256`\\n            return x;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2433205309bedeec21e98639f6e1b9ae4b72bddfd16d3c7caa23f0bedd74c07a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.0;\\n\\nuint256 constant MAX_VAL = type(uint256).max;\\n\\n// reverts on overflow\\nfunction safeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    return x + y;\\n}\\n\\n// does not revert on overflow\\nfunction unsafeAdd(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x + y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeSub(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x - y;\\n    }\\n}\\n\\n// does not revert on overflow\\nfunction unsafeMul(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return x * y;\\n    }\\n}\\n\\n// does not overflow\\nfunction mulModMax(uint256 x, uint256 y) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, MAX_VAL);\\n    }\\n}\\n\\n// does not overflow\\nfunction mulMod(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z\\n) pure returns (uint256) {\\n    unchecked {\\n        return mulmod(x, y, z);\\n    }\\n}\\n\",\"keccak256\":\"0x998fcec9a910b59ed67db5af0939b271f062585a8c16a614b529197ed86d0a8d\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/oracles/libs/vMath.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nimport {FixedPointMathLib} from \\\"./FixedPointMathLib.sol\\\";\\nimport {IntegralMath} from \\\"./IntegralMath.sol\\\";\\n\\nlibrary vMath {\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function min(uint256[] calldata array) external pure returns (uint256) {\\n        uint256 min = array[0];\\n        for (uint8 i = 1; i < array.length; i++) {\\n            if (min > array[i]) {\\n                min = array[i];\\n            }\\n        }\\n        return min;\\n    }\\n\\n    function product(uint256[] calldata nums) external pure returns (uint256) {\\n        uint256 product = nums[0];\\n        for (uint256 i = 1; i < nums.length; i++) {\\n            product *= nums[i];\\n        }\\n        return product;\\n    }\\n\\n    //limited to curve pools only, either 2 or 3 assets (mostly 2)\\n    function geometric_mean(uint8 n, uint256 product)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        if (n == 2) {\\n            return FixedPointMathLib.sqrt(product);\\n        } else {\\n            //n == 3\\n            return IntegralMath.floorCbrt(product);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x771260414afb50c4937cc8185436eadf2292162955a4ea25cb1b8405d9a0e0fb\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}