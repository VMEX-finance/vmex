/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ConstantTokens } from "./ConstantTokens";

export class ConstantTokensFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ConstantTokens> {
    return super.deploy(overrides || {}) as Promise<ConstantTokens>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConstantTokens {
    return super.attach(address) as ConstantTokens;
  }
  connect(signer: Signer): ConstantTokensFactory {
    return super.connect(signer) as ConstantTokensFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConstantTokens {
    return new Contract(address, _abi, signerOrProvider) as ConstantTokens;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokenNames",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610300604052737fc66500c84a76ad7e9c93437bfc5ac33e2ddae96080908152730d8775f648430679a709e98d2b0cb6250d2887ef60a052734fabb145d64652a948d72533023f6e7a623c7c5360c052736b175474e89094c44da98b954eedeac495271d0f60e05273f629cbd94d3791c9250152bd8dfbdf380e2a3b9c6101005273defa4e8a7bcba345f687a2f1456f5edd9ce972026101205273514910771af9ca656af840dff83e8264ecf986ca61014052730f5d2fb29fb7d3cfee444a200298f468908cc94261016052739f8f72aa9304c8b593d555f12ef6589cc3a579a26101805273408e41876cccdc0f92210600ef50372656052a386101a05273c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f6101c0527357ab1ec28d129707052df4df418d58a2d46d5f516101e0526e085d4780b73119b644ae5ecd22b37661020052731f9840a85d5af5bf1d1762f925bdaddc4201f9846102205273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486102405273dac17f958d2ee523a2206206994597c13d831ec761026052732260fac5e5542a773aa44fbcfedf7c193bc2c59961028052730bc529c00c6401aef6d220be8c6ea1667f6ad93e6102a05273e41d2489571d322189246dafa5ebde1f4699f4986102c05273f256cc7847e919fac9b808cc216cac87ccf2f47a6102e05261020090600090601461045e565b50604080516102c08101825260046102808201818152634141564560e01b6102a084015282528251808401845260038082526210905560ea1b602083810191909152808501929092528451808601865283815263109554d160e21b8184015284860152845180860186528181526244414960e81b818401526060850152845180860186528181526222a72560e91b81840152608085015284518086018652818152624b4e4360e81b8184015260a085015284518086018652838152634c494e4b60e01b8184015260c085015284518086018652838152634d414e4160e01b8184015260e0850152845180860186528181526226a5a960e91b8184015261010085015284518086018652818152622922a760e91b8184015261012085015284518086018652818152620a69cb60eb1b81840152610140850152845180860186528381526314d554d160e21b818401526101608501528451808601865283815263151554d160e21b818401526101808501528451808601865281815262554e4960e81b818401526101a085015284518086018652838152635553444360e01b818401526101c085015284518086018652838152631554d11560e21b818401526101e085015284518086018652928352635742544360e01b83830152610200840192909252835180850185528281526259464960e81b8183015261022084015283518085018552918252620b4a4b60eb1b828201526102408301919091528251808401909352600683526578535553484960d01b9083015261026081019190915261044b90601490816104b6565b5034801561045857600080fd5b50610622565b82601481019282156104a6579160200282015b828111156104a657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610471565b506104b2929150610502565b5090565b82601481019282156104f6579160200282015b828111156104f657825180516104e6918491602090910190610517565b50916020019190600101906104c9565b506104b292915061058b565b5b808211156104b25760008155600101610503565b828054610523906105e7565b90600052602060002090601f01602090048101928261054557600085556104a6565b82601f1061055e57805160ff19168380011785556104a6565b828001600101855582156104a6579182015b828111156104a6578251825591602001919060010190610570565b808211156104b257600061059f82826105a8565b5060010161058b565b5080546105b4906105e7565b6000825580601f106105c657506105e4565b601f0160209004906000526020600020908101906105e49190610502565b50565b6002810460018216806105fb57607f821691505b6020821081141561061c57634e487b7160e01b600052602260045260246000fd5b50919050565b610234806106316000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063310495ab1461003b5780634f64b2be14610064575b600080fd5b61004e610049366004610144565b610084565b60405161005b9190610170565b60405180910390f35b610077610072366004610144565b610124565b60405161005b919061015c565b6014816014811061009457600080fd5b0180549091506100a3906101c3565b80601f01602080910402602001604051908101604052809291908181526020018280546100cf906101c3565b801561011c5780601f106100f15761010080835404028352916020019161011c565b820191906000526020600020905b8154815290600101906020018083116100ff57829003601f168201915b505050505081565b6000816014811061013457600080fd5b01546001600160a01b0316905081565b600060208284031215610155578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6000602080835283518082850152825b8181101561019c57858101830151858201604001528201610180565b818111156101ad5783604083870101525b50601f01601f1916929092016040019392505050565b6002810460018216806101d757607f821691505b602082108114156101f857634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a98744d7ed23ff635690dcd9cea95737cd0977ebcbc651eac00e831a2c9509ff64736f6c63430008000033";
