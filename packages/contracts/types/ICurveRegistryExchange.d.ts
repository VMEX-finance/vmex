/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICurveRegistryExchangeInterface extends ethers.utils.Interface {
  functions: {
    "exchange(address,address,address,uint256,uint256,address)": FunctionFragment;
    "get_best_rate(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exchange",
    values: [string, string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_best_rate",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_best_rate",
    data: BytesLike
  ): Result;

  events: {};
}

export class ICurveRegistryExchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICurveRegistryExchangeInterface;

  functions: {
    exchange(
      pool: string,
      from: string,
      to: string,
      amount: BigNumberish,
      expected: BigNumberish,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "exchange(address,address,address,uint256,uint256,address)"(
      pool: string,
      from: string,
      to: string,
      amount: BigNumberish,
      expected: BigNumberish,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    get_best_rate(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "get_best_rate(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;
  };

  exchange(
    pool: string,
    from: string,
    to: string,
    amount: BigNumberish,
    expected: BigNumberish,
    receiver: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "exchange(address,address,address,uint256,uint256,address)"(
    pool: string,
    from: string,
    to: string,
    amount: BigNumberish,
    expected: BigNumberish,
    receiver: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  get_best_rate(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
  }>;

  "get_best_rate(address,address,uint256)"(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
  }>;

  callStatic: {
    exchange(
      pool: string,
      from: string,
      to: string,
      amount: BigNumberish,
      expected: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange(address,address,address,uint256,uint256,address)"(
      pool: string,
      from: string,
      to: string,
      amount: BigNumberish,
      expected: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_best_rate(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "get_best_rate(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    exchange(
      pool: string,
      from: string,
      to: string,
      amount: BigNumberish,
      expected: BigNumberish,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "exchange(address,address,address,uint256,uint256,address)"(
      pool: string,
      from: string,
      to: string,
      amount: BigNumberish,
      expected: BigNumberish,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    get_best_rate(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get_best_rate(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exchange(
      pool: string,
      from: string,
      to: string,
      amount: BigNumberish,
      expected: BigNumberish,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "exchange(address,address,address,uint256,uint256,address)"(
      pool: string,
      from: string,
      to: string,
      amount: BigNumberish,
      expected: BigNumberish,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    get_best_rate(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get_best_rate(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
