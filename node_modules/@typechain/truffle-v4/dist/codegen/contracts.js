"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.codegenContract = void 0;
const typechain_1 = require("typechain");
const lodash_1 = require("lodash");
const types_1 = require("./types");
const events_1 = require("./events");
function codegenContract(contract) {
    return `
import { BigNumber } from "bignumber.js";

${codegenContractInterface(contract)}

${events_1.codegenEventsDeclarations(contract)}
${events_1.codegenAllPossibleEvents(contract)}

${codegenContractInstanceInterface(contract)}
  `;
}
exports.codegenContract = codegenContract;
function codegenContractInterface(c) {
    return `
export interface ${c.name}Contract extends Truffle.Contract<${c.name}Instance> {
  ${c.constructor && c.constructor[0]
        ? `"new"(${types_1.codegenInputTypes(c.constructor[0].inputs)} meta?: Truffle.TransactionDetails): Promise<${c.name}Instance>;`
        : `"new"(meta?: Truffle.TransactionDetails): Promise<${c.name}Instance>;`}
}
`;
}
function codegenContractInstanceInterface(c) {
    return `
export interface ${c.name}Instance extends Truffle.ContractInstance {
  ${lodash_1.values(c.functions)
        .map((v) => v[0])
        .map(generateFunction)
        .join('\n')}
}
  `;
}
function generateFunction(fn) {
    if (typechain_1.isConstant(fn) || typechain_1.isConstantFn(fn)) {
        return generateConstantFunction(fn);
    }
    return `
  ${generateFunctionDocumentation(fn.documentation)}
  ${fn.name}: {
    (${types_1.codegenInputTypes(fn.inputs)} txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>;
  call(${types_1.codegenInputTypes(fn.inputs)} txDetails?: Truffle.TransactionDetails): Promise<${types_1.codegenOutputTypes(fn.outputs)}>;
  sendTransaction(${types_1.codegenInputTypes(fn.inputs)} txDetails?: Truffle.TransactionDetails): Promise<string>;
  estimateGas(${types_1.codegenInputTypes(fn.inputs)} txDetails?: Truffle.TransactionDetails): Promise<number>;
  }
`;
}
function generateConstantFunction(fn) {
    return `
  ${generateFunctionDocumentation(fn.documentation)}
  ${fn.name}(${types_1.codegenInputTypes(fn.inputs)} txDetails?: Truffle.TransactionDetails): Promise<${types_1.codegenOutputTypes(fn.outputs)}>;
`;
}
function generateFunctionDocumentation(doc) {
    if (!doc)
        return '';
    let docString = '/**';
    if (doc.details)
        docString += `\n * ${doc.details}`;
    if (doc.notice)
        docString += `\n * ${doc.notice}`;
    const params = Object.entries(doc.params || {});
    if (params.length) {
        params.forEach(([key, value]) => {
            docString += `\n * @param ${key} ${value}`;
        });
    }
    if (doc.return)
        docString += `\n * @returns ${doc.return}`;
    docString += '\n */';
    return docString;
}
//# sourceMappingURL=contracts.js.map