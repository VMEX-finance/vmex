/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ILendingPoolInterface extends ethers.utils.Interface {
  functions: {
    "borrow(address,uint8,uint256,uint256,uint16,address)": FunctionFragment;
    "deposit(address,uint8,bool,uint256,address,uint16)": FunctionFragment;
    "editTrancheMultiplier(uint8,uint256,uint256,uint256)": FunctionFragment;
    "finalizeTransfer(address,uint8,address,address,uint256,uint256,uint256)": FunctionFragment;
    "flashLoan(address,tuple[],uint256[],uint256[],address,bytes,uint16)": FunctionFragment;
    "getAddressesProvider()": FunctionFragment;
    "getAssetData(address)": FunctionFragment;
    "getConfiguration(address,uint8)": FunctionFragment;
    "getReserveData(address,uint8)": FunctionFragment;
    "getReserveNormalizedIncome(address,uint8)": FunctionFragment;
    "getReserveNormalizedVariableDebt(address,uint8)": FunctionFragment;
    "getReservesList()": FunctionFragment;
    "getTrancheMultiplier(uint8)": FunctionFragment;
    "getUserAccountData(address,uint8)": FunctionFragment;
    "getUserConfiguration(address)": FunctionFragment;
    "initReserve(address,address,address,address,address,uint8)": FunctionFragment;
    "liquidationCall(address,address,uint8,address,uint256,bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "rebalanceStableBorrowRate(address,uint8,address)": FunctionFragment;
    "repay(address,uint8,uint256,uint256,address)": FunctionFragment;
    "setAssetData(address,uint8,bool,bool,uint8)": FunctionFragment;
    "setConfiguration(address,uint8,uint256)": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "setReserveInterestRateStrategyAddress(address,uint8,address)": FunctionFragment;
    "setUserUseReserveAsCollateral(address,uint8,bool)": FunctionFragment;
    "swapBorrowRateMode(address,uint8,uint256)": FunctionFragment;
    "withdraw(address,uint8,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, boolean, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editTrancheMultiplier",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeTransfer",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [
      string,
      { tranche: BigNumberish; asset: string }[],
      BigNumberish[],
      BigNumberish[],
      string,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveNormalizedIncome",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveNormalizedVariableDebt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrancheMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserConfiguration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initReserve",
    values: [string, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [string, string, BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceStableBorrowRate",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetData",
    values: [string, BigNumberish, boolean, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfiguration",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setReserveInterestRateStrategyAddress",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBorrowRateMode",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editTrancheMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveNormalizedIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveNormalizedVariableDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrancheMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReserveInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint8,address,address,uint256,uint16)": EventFragment;
    "FlashLoan(address,address,address,uint256,uint256,uint16)": EventFragment;
    "LiquidationCall(address,address,address,uint256,uint256,address,bool)": EventFragment;
    "Paused()": EventFragment;
    "RebalanceStableBorrowRate(address,address)": EventFragment;
    "Repay(address,address,address,uint256)": EventFragment;
    "ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ReserveUsedAsCollateralDisabled(address,address)": EventFragment;
    "ReserveUsedAsCollateralEnabled(address,address)": EventFragment;
    "Swap(address,address,uint256)": EventFragment;
    "Unpaused()": EventFragment;
    "Withdraw(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceStableBorrowRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDataUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralEnabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class ILendingPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ILendingPoolInterface;

  functions: {
    borrow(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(address,uint8,uint256,uint256,uint16,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      asset: string,
      tranche: BigNumberish,
      isCollateral: boolean,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint8,bool,uint256,address,uint16)"(
      asset: string,
      tranche: BigNumberish,
      isCollateral: boolean,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    editTrancheMultiplier(
      tranche: BigNumberish,
      _liquidityRateMultiplier: BigNumberish,
      _variableBorrowRateMultiplier: BigNumberish,
      _stableBorrowRateMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "editTrancheMultiplier(uint8,uint256,uint256,uint256)"(
      tranche: BigNumberish,
      _liquidityRateMultiplier: BigNumberish,
      _variableBorrowRateMultiplier: BigNumberish,
      _stableBorrowRateMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalizeTransfer(
      asset: string,
      tranche: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeTransfer(address,uint8,address,address,uint256,uint256,uint256)"(
      asset: string,
      tranche: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    flashLoan(
      receiverAddress: string,
      assets: { tranche: BigNumberish; asset: string }[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flashLoan(address,tuple[],uint256[],uint256[],address,bytes,uint16)"(
      receiverAddress: string,
      assets: { tranche: BigNumberish; asset: string }[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAddressesProvider(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getAddressesProvider()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getAssetData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        collateralRisk: number;
        isLendable: boolean;
        isAllowedCollateralInHigherTranches: boolean;
        assetType: number;
        0: number;
        1: boolean;
        2: boolean;
        3: number;
      };
    }>;

    "getAssetData(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        collateralRisk: number;
        isLendable: boolean;
        isAllowedCollateralInHigherTranches: boolean;
        assetType: number;
        0: number;
        1: boolean;
        2: boolean;
        3: number;
      };
    }>;

    getConfiguration(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    "getConfiguration(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    getReserveData(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        configuration: { data: BigNumber; 0: BigNumber };
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        currentLiquidityRate: BigNumber;
        currentVariableBorrowRate: BigNumber;
        currentStableBorrowRate: BigNumber;
        lastUpdateTimestamp: number;
        aTokenAddress: string;
        stableDebtTokenAddress: string;
        variableDebtTokenAddress: string;
        interestRateStrategyAddress: string;
        id: number;
        tranche: number;
        0: { data: BigNumber; 0: BigNumber };
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: string;
        8: string;
        9: string;
        10: string;
        11: number;
        12: number;
      };
    }>;

    "getReserveData(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        configuration: { data: BigNumber; 0: BigNumber };
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        currentLiquidityRate: BigNumber;
        currentVariableBorrowRate: BigNumber;
        currentStableBorrowRate: BigNumber;
        lastUpdateTimestamp: number;
        aTokenAddress: string;
        stableDebtTokenAddress: string;
        variableDebtTokenAddress: string;
        interestRateStrategyAddress: string;
        id: number;
        tranche: number;
        0: { data: BigNumber; 0: BigNumber };
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: string;
        8: string;
        9: string;
        10: string;
        11: number;
        12: number;
      };
    }>;

    getReserveNormalizedIncome(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getReserveNormalizedIncome(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReserveNormalizedVariableDebt(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getReserveNormalizedVariableDebt(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReservesList(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "getReservesList()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    getTrancheMultiplier(
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        liquidityRateMultiplier: BigNumber;
        variableBorrowRateMultiplier: BigNumber;
        stableBorrowRateMultiplier: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "getTrancheMultiplier(uint8)"(
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        liquidityRateMultiplier: BigNumber;
        variableBorrowRateMultiplier: BigNumber;
        stableBorrowRateMultiplier: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    getUserAccountData(
      user: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralETH: BigNumber;
      totalDebtETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "getUserAccountData(address,uint8)"(
      user: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralETH: BigNumber;
      totalDebtETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getUserConfiguration(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    "getUserConfiguration(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    initReserve(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initReserve(address,address,address,address,address,uint8)"(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      tranche: BigNumberish,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidationCall(address,address,uint8,address,uint256,bool)"(
      collateralAsset: string,
      debtAsset: string,
      tranche: BigNumberish,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    rebalanceStableBorrowRate(
      asset: string,
      tranche: BigNumberish,
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rebalanceStableBorrowRate(address,uint8,address)"(
      asset: string,
      tranche: BigNumberish,
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repay(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repay(address,uint8,uint256,uint256,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAssetData(
      asset: string,
      _risk: BigNumberish,
      _isLendable: boolean,
      _allowedHigherTranche: boolean,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAssetData(address,uint8,bool,bool,uint8)"(
      asset: string,
      _risk: BigNumberish,
      _isLendable: boolean,
      _allowedHigherTranche: boolean,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setConfiguration(
      reserve: string,
      tranche: BigNumberish,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConfiguration(address,uint8,uint256)"(
      reserve: string,
      tranche: BigNumberish,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPause(val: boolean, overrides?: Overrides): Promise<ContractTransaction>;

    "setPause(bool)"(
      val: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveInterestRateStrategyAddress(
      reserve: string,
      tranche: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReserveInterestRateStrategyAddress(address,uint8,address)"(
      reserve: string,
      tranche: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUserUseReserveAsCollateral(
      asset: string,
      tranche: BigNumberish,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUserUseReserveAsCollateral(address,uint8,bool)"(
      asset: string,
      tranche: BigNumberish,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapBorrowRateMode(
      asset: string,
      tranche: BigNumberish,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapBorrowRateMode(address,uint8,uint256)"(
      asset: string,
      tranche: BigNumberish,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint8,uint256,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  borrow(
    asset: string,
    tranche: BigNumberish,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    referralCode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(address,uint8,uint256,uint256,uint16,address)"(
    asset: string,
    tranche: BigNumberish,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    referralCode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    asset: string,
    tranche: BigNumberish,
    isCollateral: boolean,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint8,bool,uint256,address,uint16)"(
    asset: string,
    tranche: BigNumberish,
    isCollateral: boolean,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  editTrancheMultiplier(
    tranche: BigNumberish,
    _liquidityRateMultiplier: BigNumberish,
    _variableBorrowRateMultiplier: BigNumberish,
    _stableBorrowRateMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "editTrancheMultiplier(uint8,uint256,uint256,uint256)"(
    tranche: BigNumberish,
    _liquidityRateMultiplier: BigNumberish,
    _variableBorrowRateMultiplier: BigNumberish,
    _stableBorrowRateMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalizeTransfer(
    asset: string,
    tranche: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    balanceFromAfter: BigNumberish,
    balanceToBefore: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeTransfer(address,uint8,address,address,uint256,uint256,uint256)"(
    asset: string,
    tranche: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    balanceFromAfter: BigNumberish,
    balanceToBefore: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  flashLoan(
    receiverAddress: string,
    assets: { tranche: BigNumberish; asset: string }[],
    amounts: BigNumberish[],
    modes: BigNumberish[],
    onBehalfOf: string,
    params: BytesLike,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flashLoan(address,tuple[],uint256[],uint256[],address,bytes,uint16)"(
    receiverAddress: string,
    assets: { tranche: BigNumberish; asset: string }[],
    amounts: BigNumberish[],
    modes: BigNumberish[],
    onBehalfOf: string,
    params: BytesLike,
    referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAddressesProvider(overrides?: CallOverrides): Promise<string>;

  "getAddressesProvider()"(overrides?: CallOverrides): Promise<string>;

  getAssetData(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{
    collateralRisk: number;
    isLendable: boolean;
    isAllowedCollateralInHigherTranches: boolean;
    assetType: number;
    0: number;
    1: boolean;
    2: boolean;
    3: number;
  }>;

  "getAssetData(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<{
    collateralRisk: number;
    isLendable: boolean;
    isAllowedCollateralInHigherTranches: boolean;
    assetType: number;
    0: number;
    1: boolean;
    2: boolean;
    3: number;
  }>;

  getConfiguration(
    asset: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  "getConfiguration(address,uint8)"(
    asset: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  getReserveData(
    asset: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    configuration: { data: BigNumber; 0: BigNumber };
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    currentLiquidityRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    lastUpdateTimestamp: number;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    id: number;
    tranche: number;
    0: { data: BigNumber; 0: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: string;
    8: string;
    9: string;
    10: string;
    11: number;
    12: number;
  }>;

  "getReserveData(address,uint8)"(
    asset: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    configuration: { data: BigNumber; 0: BigNumber };
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    currentLiquidityRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    lastUpdateTimestamp: number;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    id: number;
    tranche: number;
    0: { data: BigNumber; 0: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: string;
    8: string;
    9: string;
    10: string;
    11: number;
    12: number;
  }>;

  getReserveNormalizedIncome(
    asset: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getReserveNormalizedIncome(address,uint8)"(
    asset: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveNormalizedVariableDebt(
    asset: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getReserveNormalizedVariableDebt(address,uint8)"(
    asset: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReservesList(overrides?: CallOverrides): Promise<string[]>;

  "getReservesList()"(overrides?: CallOverrides): Promise<string[]>;

  getTrancheMultiplier(
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    liquidityRateMultiplier: BigNumber;
    variableBorrowRateMultiplier: BigNumber;
    stableBorrowRateMultiplier: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getTrancheMultiplier(uint8)"(
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    liquidityRateMultiplier: BigNumber;
    variableBorrowRateMultiplier: BigNumber;
    stableBorrowRateMultiplier: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getUserAccountData(
    user: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalCollateralETH: BigNumber;
    totalDebtETH: BigNumber;
    availableBorrowsETH: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "getUserAccountData(address,uint8)"(
    user: string,
    tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    totalCollateralETH: BigNumber;
    totalDebtETH: BigNumber;
    availableBorrowsETH: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  getUserConfiguration(
    user: string,
    overrides?: CallOverrides
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  "getUserConfiguration(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  initReserve(
    reserve: string,
    aTokenAddress: string,
    stableDebtAddress: string,
    variableDebtAddress: string,
    interestRateStrategyAddress: string,
    tranche: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initReserve(address,address,address,address,address,uint8)"(
    reserve: string,
    aTokenAddress: string,
    stableDebtAddress: string,
    variableDebtAddress: string,
    interestRateStrategyAddress: string,
    tranche: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidationCall(
    collateralAsset: string,
    debtAsset: string,
    tranche: BigNumberish,
    user: string,
    debtToCover: BigNumberish,
    receiveAToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidationCall(address,address,uint8,address,uint256,bool)"(
    collateralAsset: string,
    debtAsset: string,
    tranche: BigNumberish,
    user: string,
    debtToCover: BigNumberish,
    receiveAToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  rebalanceStableBorrowRate(
    asset: string,
    tranche: BigNumberish,
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rebalanceStableBorrowRate(address,uint8,address)"(
    asset: string,
    tranche: BigNumberish,
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repay(
    asset: string,
    tranche: BigNumberish,
    amount: BigNumberish,
    rateMode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repay(address,uint8,uint256,uint256,address)"(
    asset: string,
    tranche: BigNumberish,
    amount: BigNumberish,
    rateMode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAssetData(
    asset: string,
    _risk: BigNumberish,
    _isLendable: boolean,
    _allowedHigherTranche: boolean,
    _assetType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAssetData(address,uint8,bool,bool,uint8)"(
    asset: string,
    _risk: BigNumberish,
    _isLendable: boolean,
    _allowedHigherTranche: boolean,
    _assetType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setConfiguration(
    reserve: string,
    tranche: BigNumberish,
    configuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConfiguration(address,uint8,uint256)"(
    reserve: string,
    tranche: BigNumberish,
    configuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPause(val: boolean, overrides?: Overrides): Promise<ContractTransaction>;

  "setPause(bool)"(
    val: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveInterestRateStrategyAddress(
    reserve: string,
    tranche: BigNumberish,
    rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReserveInterestRateStrategyAddress(address,uint8,address)"(
    reserve: string,
    tranche: BigNumberish,
    rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUserUseReserveAsCollateral(
    asset: string,
    tranche: BigNumberish,
    useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUserUseReserveAsCollateral(address,uint8,bool)"(
    asset: string,
    tranche: BigNumberish,
    useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapBorrowRateMode(
    asset: string,
    tranche: BigNumberish,
    rateMode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapBorrowRateMode(address,uint8,uint256)"(
    asset: string,
    tranche: BigNumberish,
    rateMode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    asset: string,
    tranche: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint8,uint256,address)"(
    asset: string,
    tranche: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    borrow(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(address,uint8,uint256,uint256,uint16,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      asset: string,
      tranche: BigNumberish,
      isCollateral: boolean,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint8,bool,uint256,address,uint16)"(
      asset: string,
      tranche: BigNumberish,
      isCollateral: boolean,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editTrancheMultiplier(
      tranche: BigNumberish,
      _liquidityRateMultiplier: BigNumberish,
      _variableBorrowRateMultiplier: BigNumberish,
      _stableBorrowRateMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "editTrancheMultiplier(uint8,uint256,uint256,uint256)"(
      tranche: BigNumberish,
      _liquidityRateMultiplier: BigNumberish,
      _variableBorrowRateMultiplier: BigNumberish,
      _stableBorrowRateMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeTransfer(
      asset: string,
      tranche: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeTransfer(address,uint8,address,address,uint256,uint256,uint256)"(
      asset: string,
      tranche: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashLoan(
      receiverAddress: string,
      assets: { tranche: BigNumberish; asset: string }[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "flashLoan(address,tuple[],uint256[],uint256[],address,bytes,uint16)"(
      receiverAddress: string,
      assets: { tranche: BigNumberish; asset: string }[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressesProvider(overrides?: CallOverrides): Promise<string>;

    "getAddressesProvider()"(overrides?: CallOverrides): Promise<string>;

    getAssetData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      collateralRisk: number;
      isLendable: boolean;
      isAllowedCollateralInHigherTranches: boolean;
      assetType: number;
      0: number;
      1: boolean;
      2: boolean;
      3: number;
    }>;

    "getAssetData(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<{
      collateralRisk: number;
      isLendable: boolean;
      isAllowedCollateralInHigherTranches: boolean;
      assetType: number;
      0: number;
      1: boolean;
      2: boolean;
      3: number;
    }>;

    getConfiguration(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    "getConfiguration(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    getReserveData(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      configuration: { data: BigNumber; 0: BigNumber };
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      currentLiquidityRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      lastUpdateTimestamp: number;
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      interestRateStrategyAddress: string;
      id: number;
      tranche: number;
      0: { data: BigNumber; 0: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: string;
      8: string;
      9: string;
      10: string;
      11: number;
      12: number;
    }>;

    "getReserveData(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      configuration: { data: BigNumber; 0: BigNumber };
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      currentLiquidityRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      lastUpdateTimestamp: number;
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      interestRateStrategyAddress: string;
      id: number;
      tranche: number;
      0: { data: BigNumber; 0: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: string;
      8: string;
      9: string;
      10: string;
      11: number;
      12: number;
    }>;

    getReserveNormalizedIncome(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveNormalizedIncome(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveNormalizedVariableDebt(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservesList(overrides?: CallOverrides): Promise<string[]>;

    "getReservesList()"(overrides?: CallOverrides): Promise<string[]>;

    getTrancheMultiplier(
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityRateMultiplier: BigNumber;
      variableBorrowRateMultiplier: BigNumber;
      stableBorrowRateMultiplier: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getTrancheMultiplier(uint8)"(
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityRateMultiplier: BigNumber;
      variableBorrowRateMultiplier: BigNumber;
      stableBorrowRateMultiplier: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getUserAccountData(
      user: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralETH: BigNumber;
      totalDebtETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "getUserAccountData(address,uint8)"(
      user: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralETH: BigNumber;
      totalDebtETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getUserConfiguration(
      user: string,
      overrides?: CallOverrides
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    "getUserConfiguration(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    initReserve(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initReserve(address,address,address,address,address,uint8)"(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      tranche: BigNumberish,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidationCall(address,address,uint8,address,uint256,bool)"(
      collateralAsset: string,
      debtAsset: string,
      tranche: BigNumberish,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    rebalanceStableBorrowRate(
      asset: string,
      tranche: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "rebalanceStableBorrowRate(address,uint8,address)"(
      asset: string,
      tranche: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repay(address,uint8,uint256,uint256,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetData(
      asset: string,
      _risk: BigNumberish,
      _isLendable: boolean,
      _allowedHigherTranche: boolean,
      _assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAssetData(address,uint8,bool,bool,uint8)"(
      asset: string,
      _risk: BigNumberish,
      _isLendable: boolean,
      _allowedHigherTranche: boolean,
      _assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfiguration(
      reserve: string,
      tranche: BigNumberish,
      configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setConfiguration(address,uint8,uint256)"(
      reserve: string,
      tranche: BigNumberish,
      configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(val: boolean, overrides?: CallOverrides): Promise<void>;

    "setPause(bool)"(val: boolean, overrides?: CallOverrides): Promise<void>;

    setReserveInterestRateStrategyAddress(
      reserve: string,
      tranche: BigNumberish,
      rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserveInterestRateStrategyAddress(address,uint8,address)"(
      reserve: string,
      tranche: BigNumberish,
      rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserUseReserveAsCollateral(
      asset: string,
      tranche: BigNumberish,
      useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUserUseReserveAsCollateral(address,uint8,bool)"(
      asset: string,
      tranche: BigNumberish,
      useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapBorrowRateMode(
      asset: string,
      tranche: BigNumberish,
      rateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapBorrowRateMode(address,uint8,uint256)"(
      asset: string,
      tranche: BigNumberish,
      rateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(address,uint8,uint256,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Deposit(
      reserve: string | null,
      tranche: null,
      user: null,
      onBehalfOf: string | null,
      amount: null,
      referral: BigNumberish | null
    ): EventFilter;

    FlashLoan(
      target: string | null,
      initiator: string | null,
      asset: string | null,
      amount: null,
      premium: null,
      referralCode: null
    ): EventFilter;

    LiquidationCall(
      collateralAsset: string | null,
      debtAsset: string | null,
      user: string | null,
      debtToCover: null,
      liquidatedCollateralAmount: null,
      liquidator: null,
      receiveAToken: null
    ): EventFilter;

    Paused(): EventFilter;

    RebalanceStableBorrowRate(
      reserve: string | null,
      user: string | null
    ): EventFilter;

    Repay(
      reserve: string | null,
      user: string | null,
      repayer: string | null,
      amount: null
    ): EventFilter;

    ReserveDataUpdated(
      reserve: string | null,
      liquidityRate: null,
      stableBorrowRate: null,
      variableBorrowRate: null,
      liquidityIndex: null,
      variableBorrowIndex: null
    ): EventFilter;

    ReserveUsedAsCollateralDisabled(
      reserve: string | null,
      user: string | null
    ): EventFilter;

    ReserveUsedAsCollateralEnabled(
      reserve: string | null,
      user: string | null
    ): EventFilter;

    Swap(
      reserve: string | null,
      user: string | null,
      rateMode: null
    ): EventFilter;

    Unpaused(): EventFilter;

    Withdraw(
      reserve: string | null,
      user: string | null,
      to: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    borrow(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(address,uint8,uint256,uint256,uint16,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      asset: string,
      tranche: BigNumberish,
      isCollateral: boolean,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint8,bool,uint256,address,uint16)"(
      asset: string,
      tranche: BigNumberish,
      isCollateral: boolean,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    editTrancheMultiplier(
      tranche: BigNumberish,
      _liquidityRateMultiplier: BigNumberish,
      _variableBorrowRateMultiplier: BigNumberish,
      _stableBorrowRateMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "editTrancheMultiplier(uint8,uint256,uint256,uint256)"(
      tranche: BigNumberish,
      _liquidityRateMultiplier: BigNumberish,
      _variableBorrowRateMultiplier: BigNumberish,
      _stableBorrowRateMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalizeTransfer(
      asset: string,
      tranche: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeTransfer(address,uint8,address,address,uint256,uint256,uint256)"(
      asset: string,
      tranche: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    flashLoan(
      receiverAddress: string,
      assets: { tranche: BigNumberish; asset: string }[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flashLoan(address,tuple[],uint256[],uint256[],address,bytes,uint16)"(
      receiverAddress: string,
      assets: { tranche: BigNumberish; asset: string }[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAddressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "getAddressesProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetData(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAssetData(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfiguration(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConfiguration(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveData(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedIncome(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveNormalizedIncome(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveNormalizedVariableDebt(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservesList(overrides?: CallOverrides): Promise<BigNumber>;

    "getReservesList()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTrancheMultiplier(
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTrancheMultiplier(uint8)"(
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAccountData(
      user: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserAccountData(address,uint8)"(
      user: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserConfiguration(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserConfiguration(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initReserve(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initReserve(address,address,address,address,address,uint8)"(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      tranche: BigNumberish,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidationCall(address,address,uint8,address,uint256,bool)"(
      collateralAsset: string,
      debtAsset: string,
      tranche: BigNumberish,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceStableBorrowRate(
      asset: string,
      tranche: BigNumberish,
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rebalanceStableBorrowRate(address,uint8,address)"(
      asset: string,
      tranche: BigNumberish,
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repay(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repay(address,uint8,uint256,uint256,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAssetData(
      asset: string,
      _risk: BigNumberish,
      _isLendable: boolean,
      _allowedHigherTranche: boolean,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAssetData(address,uint8,bool,bool,uint8)"(
      asset: string,
      _risk: BigNumberish,
      _isLendable: boolean,
      _allowedHigherTranche: boolean,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setConfiguration(
      reserve: string,
      tranche: BigNumberish,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConfiguration(address,uint8,uint256)"(
      reserve: string,
      tranche: BigNumberish,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPause(val: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setPause(bool)"(val: boolean, overrides?: Overrides): Promise<BigNumber>;

    setReserveInterestRateStrategyAddress(
      reserve: string,
      tranche: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReserveInterestRateStrategyAddress(address,uint8,address)"(
      reserve: string,
      tranche: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      asset: string,
      tranche: BigNumberish,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUserUseReserveAsCollateral(address,uint8,bool)"(
      asset: string,
      tranche: BigNumberish,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapBorrowRateMode(
      asset: string,
      tranche: BigNumberish,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapBorrowRateMode(address,uint8,uint256)"(
      asset: string,
      tranche: BigNumberish,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint8,uint256,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(address,uint8,uint256,uint256,uint16,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      asset: string,
      tranche: BigNumberish,
      isCollateral: boolean,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint8,bool,uint256,address,uint16)"(
      asset: string,
      tranche: BigNumberish,
      isCollateral: boolean,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    editTrancheMultiplier(
      tranche: BigNumberish,
      _liquidityRateMultiplier: BigNumberish,
      _variableBorrowRateMultiplier: BigNumberish,
      _stableBorrowRateMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "editTrancheMultiplier(uint8,uint256,uint256,uint256)"(
      tranche: BigNumberish,
      _liquidityRateMultiplier: BigNumberish,
      _variableBorrowRateMultiplier: BigNumberish,
      _stableBorrowRateMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalizeTransfer(
      asset: string,
      tranche: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeTransfer(address,uint8,address,address,uint256,uint256,uint256)"(
      asset: string,
      tranche: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiverAddress: string,
      assets: { tranche: BigNumberish; asset: string }[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flashLoan(address,tuple[],uint256[],uint256[],address,bytes,uint16)"(
      receiverAddress: string,
      assets: { tranche: BigNumberish; asset: string }[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAddressesProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddressesProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAssetData(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfiguration(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConfiguration(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserveData(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveNormalizedIncome(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserveNormalizedIncome(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveNormalizedVariableDebt(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserveNormalizedVariableDebt(address,uint8)"(
      asset: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservesList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReservesList()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrancheMultiplier(
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTrancheMultiplier(uint8)"(
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAccountData(
      user: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserAccountData(address,uint8)"(
      user: string,
      tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserConfiguration(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserConfiguration(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initReserve(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initReserve(address,address,address,address,address,uint8)"(
      reserve: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      tranche: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      tranche: BigNumberish,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidationCall(address,address,uint8,address,uint256,bool)"(
      collateralAsset: string,
      debtAsset: string,
      tranche: BigNumberish,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalanceStableBorrowRate(
      asset: string,
      tranche: BigNumberish,
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rebalanceStableBorrowRate(address,uint8,address)"(
      asset: string,
      tranche: BigNumberish,
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repay(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repay(address,uint8,uint256,uint256,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAssetData(
      asset: string,
      _risk: BigNumberish,
      _isLendable: boolean,
      _allowedHigherTranche: boolean,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAssetData(address,uint8,bool,bool,uint8)"(
      asset: string,
      _risk: BigNumberish,
      _isLendable: boolean,
      _allowedHigherTranche: boolean,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setConfiguration(
      reserve: string,
      tranche: BigNumberish,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConfiguration(address,uint8,uint256)"(
      reserve: string,
      tranche: BigNumberish,
      configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPause(
      val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPause(bool)"(
      val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveInterestRateStrategyAddress(
      reserve: string,
      tranche: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReserveInterestRateStrategyAddress(address,uint8,address)"(
      reserve: string,
      tranche: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUserUseReserveAsCollateral(
      asset: string,
      tranche: BigNumberish,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUserUseReserveAsCollateral(address,uint8,bool)"(
      asset: string,
      tranche: BigNumberish,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapBorrowRateMode(
      asset: string,
      tranche: BigNumberish,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapBorrowRateMode(address,uint8,uint256)"(
      asset: string,
      tranche: BigNumberish,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint8,uint256,address)"(
      asset: string,
      tranche: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
