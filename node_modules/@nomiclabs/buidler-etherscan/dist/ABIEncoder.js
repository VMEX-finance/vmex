"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugins_1 = require("@nomiclabs/buidler/plugins");
const pluginContext_1 = require("./pluginContext");
async function encodeArguments(abi, contractFilename, contractName, constructorArguments) {
    const { Interface } = await Promise.resolve().then(() => __importStar(require("@ethersproject/abi")));
    const contractInterface = new Interface(abi);
    let deployArgumentsEncoded;
    try {
        deployArgumentsEncoded = contractInterface
            .encodeDeploy(constructorArguments)
            .replace("0x", "");
    }
    catch (error) {
        const { isABIArgumentLengthError, isABIArgumentTypeError, isABIArgumentOverflowError, } = await Promise.resolve().then(() => __importStar(require("./ABITypes")));
        if (isABIArgumentLengthError(error)) {
            // TODO: add a list of types and constructor arguments to the error message?
            const message = `The constructor for ${contractFilename}:${contractName} has ${error.count.types} parameters
but ${error.count.values} arguments were provided instead.`;
            throw new plugins_1.NomicLabsBuidlerPluginError(pluginContext_1.pluginName, message, error);
        }
        if (isABIArgumentTypeError(error)) {
            const message = `Value ${error.value} cannot be encoded for the parameter ${error.argument}.
Encoder error reason: ${error.reason}`;
            throw new plugins_1.NomicLabsBuidlerPluginError(pluginContext_1.pluginName, message, error);
        }
        if (isABIArgumentOverflowError(error)) {
            const message = `Value ${error.value} is not a safe integer and cannot be encoded.
Use a string instead of a plain number.
Encoder error reason: ${error.fault} fault in ${error.operation}`;
            throw new plugins_1.NomicLabsBuidlerPluginError(pluginContext_1.pluginName, message, error);
        }
        // Should be unreachable.
        throw error;
    }
    return deployArgumentsEncoded;
}
exports.encodeArguments = encodeArguments;
//# sourceMappingURL=ABIEncoder.js.map