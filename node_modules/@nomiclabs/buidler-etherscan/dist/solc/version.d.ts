/// <reference types="node" />
export interface CompilersList {
    releases: {
        [version: string]: string;
    };
    latestRelease: string;
}
export declare class SolcVersionNumber {
    readonly major: number;
    readonly minor: number;
    readonly patch: number;
    constructor(major: number, minor: number, patch: number);
    getLongVersion(): Promise<string>;
    toString(): string;
}
export declare enum InferralType {
    EXACT = 0,
    METADATA_PRESENT_VERSION_ABSENT = 1,
    METADATA_ABSENT = 2
}
interface SolcVersionRange {
    inferralType: InferralType;
    /**
     * @returns true if the version is included in the range.
     */
    isIncluded(version: SolcVersionNumber): boolean;
    toString(): string;
}
export declare function getVersionNumber(shortVersion: string): SolcVersionNumber;
export declare function inferSolcVersion(bytecode: Buffer): Promise<SolcVersionRange>;
export declare function getVersions(): Promise<CompilersList>;
export {};
//# sourceMappingURL=version.d.ts.map