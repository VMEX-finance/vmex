import { Network } from 'defender-base-client';
export declare type Address = string;
export declare type BigUInt = string | number;
export declare type Hex = string;
export declare type Speed = 'safeLow' | 'average' | 'fast' | 'fastest';
export declare type Status = 'pending' | 'sent' | 'submitted' | 'inmempool' | 'mined' | 'confirmed' | 'failed';
export interface SendBaseTransactionRequest {
    to?: Address;
    value?: BigUInt;
    data?: Hex;
    gasLimit: BigUInt;
    validUntil?: string;
}
export interface SendSpeedTransactionRequest extends SendBaseTransactionRequest {
    speed: Speed;
}
export interface SendLegacyTransactionRequest extends SendBaseTransactionRequest {
    gasPrice: BigUInt;
}
export interface SendEIP1559TransactionRequest extends SendBaseTransactionRequest {
    maxFeePerGas: BigUInt;
    maxPriorityFeePerGas: BigUInt;
}
export declare type RelayerTransactionPayload = SendBaseTransactionRequest | SendSpeedTransactionRequest | SendLegacyTransactionRequest | SendEIP1559TransactionRequest;
export interface SignMessagePayload {
    message: Hex;
}
export interface SignTypedDataPayload {
    domainSeparator: Hex;
    hashStructMessage: Hex;
}
export interface SignedMessagePayload {
    sig: Hex;
    r: Hex;
    s: Hex;
    v: number;
}
export interface RelayerGetResponse {
    relayerId: string;
    name: string;
    address: string;
    network: Network;
    paused: boolean;
    createdAt: string;
    pendingTxCost: string;
    minBalance: BigUInt;
    policies: UpdateRelayerPoliciesRequest;
    stackResourceId?: string;
}
export interface RelayerModel extends RelayerGetResponse {
}
export interface RelayerListResponse {
    items: RelayerGetResponse[];
    txsQuotaUsage: number;
}
export interface CreateRelayerRequest {
    name: string;
    useAddressFromRelayerId?: string;
    network: Network;
    minBalance: BigUInt;
    policies?: UpdateRelayerPoliciesRequest;
    stackResourceId?: string;
}
export interface UpdateRelayerPoliciesRequest {
    gasPriceCap?: BigUInt;
    whitelistReceivers?: Address[];
    EIP1559Pricing?: boolean;
}
export interface UpdateRelayerRequest {
    name?: string;
    policies?: UpdateRelayerPoliciesRequest;
    minBalance?: BigUInt;
}
export interface RelayerApiKey {
    keyId: string;
    relayerId: string;
    secretKey?: string;
    apiKey: string;
    createdAt: string;
    stackResourceId?: string;
}
export interface DeleteRelayerApiKeyResponse {
    message: string;
}
interface RelayerTransactionBase {
    transactionId: string;
    hash: string;
    to: Address;
    from: Address;
    value?: string;
    data?: string;
    speed: Speed;
    gasLimit: number;
    nonce: number;
    status: Status;
    chainId: number;
    validUntil: string;
}
interface RelayerLegacyTransaction extends RelayerTransactionBase {
    gasPrice: number;
}
interface RelayerEIP1559Transaction extends RelayerTransactionBase {
    maxPriorityFeePerGas: number;
    maxFeePerGas: number;
}
export declare type RelayerTransaction = RelayerLegacyTransaction | RelayerEIP1559Transaction;
export declare type RelayerParams = ApiRelayerParams | AutotaskRelayerParams;
export declare type ApiRelayerParams = {
    apiKey: string;
    apiSecret: string;
};
export declare type AutotaskRelayerParams = {
    credentials: string;
    relayerARN: string;
};
export declare type JsonRpcResponse = {
    id: number | null;
    jsonrpc: '2.0';
    result: any;
    error?: {
        code: number;
        message: string;
        data?: string;
    };
};
export declare type JsonRpcRequest = {
    id: number;
    jsonrpc: '2.0';
    method: string;
    params: string[];
};
export declare function isLegacyTx<TransactionLikeType>(tx: TransactionLikeType): tx is TransactionLikeType & {
    gasPrice: NonNullable<unknown>;
};
export declare function isEIP1559Tx<TransactionLikeType>(tx: TransactionLikeType): tx is TransactionLikeType & {
    maxPriorityFeePerGas: NonNullable<unknown>;
    maxFeePerGas: NonNullable<unknown>;
};
export declare type ListTransactionsRequest = {
    status?: 'pending' | 'mined' | 'failed';
    since?: Date;
    limit?: number;
};
export interface IRelayer {
    getRelayer(): Promise<RelayerGetResponse>;
    sendTransaction(payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionById(id: string, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionByNonce(nonce: number, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    query(id: string): Promise<RelayerTransaction>;
    list(criteria?: ListTransactionsRequest): Promise<RelayerTransaction[]>;
    sign(payload: SignMessagePayload): Promise<SignedMessagePayload>;
    signTypedData(payload: SignTypedDataPayload): Promise<SignedMessagePayload>;
    call(method: string, params: string[]): Promise<JsonRpcResponse>;
}
export declare function isRelayer(params: any): params is Relayer;
export declare class Relayer implements IRelayer {
    private relayer;
    constructor(credentials: RelayerParams);
    getRelayer(): Promise<RelayerGetResponse>;
    sign(payload: SignMessagePayload): Promise<SignedMessagePayload>;
    signTypedData(payload: SignTypedDataPayload): Promise<SignedMessagePayload>;
    sendTransaction(payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionById(id: string, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionByNonce(nonce: number, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    query(id: string): Promise<RelayerTransaction>;
    list(criteria?: ListTransactionsRequest): Promise<RelayerTransaction[]>;
    call(method: string, params: string[]): Promise<JsonRpcResponse>;
}
export {};
//# sourceMappingURL=relayer.d.ts.map