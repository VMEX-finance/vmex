/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BaseRewardPoolInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "earned(address)": FunctionFragment;
    "extraRewards(uint256)": FunctionFragment;
    "extraRewardsLength()": FunctionFragment;
    "getReward()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeAll()": FunctionFragment;
    "withdraw(uint256,bool)": FunctionFragment;
    "withdrawAll(bool)": FunctionFragment;
    "withdrawAllAndUnwrap(bool)": FunctionFragment;
    "withdrawAndUnwrap(uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "extraRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extraRewardsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stakeAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllAndUnwrap",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndUnwrap",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extraRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraRewardsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllAndUnwrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndUnwrap",
    data: BytesLike
  ): Result;

  events: {};
}

export class BaseRewardPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BaseRewardPoolInterface;

  functions: {
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    extraRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "extraRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    extraRewardsLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "extraRewardsLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getReward()"(overrides?: Overrides): Promise<ContractTransaction>;

    "getReward(address,bool)"(
      _account: string,
      _claimExtras: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeAll(overrides?: Overrides): Promise<ContractTransaction>;

    "stakeAll()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,bool)"(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(
      claim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAll(bool)"(
      claim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAllAndUnwrap(
      claim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAllAndUnwrap(bool)"(
      claim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAndUnwrap(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAndUnwrap(uint256,bool)"(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "earned(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  extraRewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "extraRewards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  extraRewardsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "extraRewardsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  "getReward()"(overrides?: Overrides): Promise<ContractTransaction>;

  "getReward(address,bool)"(
    _account: string,
    _claimExtras: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeAll(overrides?: Overrides): Promise<ContractTransaction>;

  "stakeAll()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    claim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,bool)"(
    amount: BigNumberish,
    claim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(
    claim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAll(bool)"(
    claim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAllAndUnwrap(
    claim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAllAndUnwrap(bool)"(
    claim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAndUnwrap(
    amount: BigNumberish,
    claim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAndUnwrap(uint256,bool)"(
    amount: BigNumberish,
    claim: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "extraRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    extraRewardsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "extraRewardsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getReward()"(overrides?: CallOverrides): Promise<boolean>;

    "getReward(address,bool)"(
      _account: string,
      _claimExtras: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakeAll(overrides?: CallOverrides): Promise<boolean>;

    "stakeAll()"(overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      amount: BigNumberish,
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdraw(uint256,bool)"(
      amount: BigNumberish,
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawAll(claim: boolean, overrides?: CallOverrides): Promise<void>;

    "withdrawAll(bool)"(
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllAndUnwrap(
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAllAndUnwrap(bool)"(
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndUnwrap(
      amount: BigNumberish,
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawAndUnwrap(uint256,bool)"(
      amount: BigNumberish,
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extraRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraRewardsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "extraRewardsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getReward()"(overrides?: Overrides): Promise<BigNumber>;

    "getReward(address,bool)"(
      _account: string,
      _claimExtras: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeAll(overrides?: Overrides): Promise<BigNumber>;

    "stakeAll()"(overrides?: Overrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,bool)"(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(claim: boolean, overrides?: Overrides): Promise<BigNumber>;

    "withdrawAll(bool)"(
      claim: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAllAndUnwrap(
      claim: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAllAndUnwrap(bool)"(
      claim: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAndUnwrap(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAndUnwrap(uint256,bool)"(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extraRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraRewardsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extraRewardsLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReward()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "getReward(address,bool)"(
      _account: string,
      _claimExtras: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeAll(overrides?: Overrides): Promise<PopulatedTransaction>;

    "stakeAll()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,bool)"(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      claim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAll(bool)"(
      claim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAllAndUnwrap(
      claim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAllAndUnwrap(bool)"(
      claim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAndUnwrap(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAndUnwrap(uint256,bool)"(
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
