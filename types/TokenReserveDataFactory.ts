/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TokenReserveData } from "./TokenReserveData";

export class TokenReserveDataFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    provider: string,
    user: string,
    overrides?: Overrides
  ): Promise<TokenReserveData> {
    return super.deploy(
      provider,
      user,
      overrides || {}
    ) as Promise<TokenReserveData>;
  }
  getDeployTransaction(
    provider: string,
    user: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(provider, user, overrides || {});
  }
  attach(address: string): TokenReserveData {
    return super.attach(address) as TokenReserveData;
  }
  connect(signer: Signer): TokenReserveDataFactory {
    return super.connect(signer) as TokenReserveDataFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenReserveData {
    return new Contract(address, _abi, signerOrProvider) as TokenReserveData;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getType",
    outputs: [
      {
        components: [
          {
            internalType: "string[22]",
            name: "tokens",
            type: "string[22]",
          },
          {
            internalType: "uint256[22]",
            name: "balances",
            type: "uint256[22]",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "tranche",
                type: "uint8",
              },
              {
                internalType: "uint256[22]",
                name: "income",
                type: "uint256[22]",
              },
              {
                internalType: "uint256[22]",
                name: "debt",
                type: "uint256[22]",
              },
            ],
            internalType: "struct Tranche[3]",
            name: "data",
            type: "tuple[3]",
          },
        ],
        internalType: "struct TokenReserveDataStruct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000d2138038062000d21833981016040819052620000349162000b03565b6200003e620009f0565b620000536200013660201b620000591760201c565b81600001819052506200007182620003c060201b620002e11760201c565b602082015260005b60038160ff1610156200010757600080620000a083876200047060201b620003761760201c565b9150915060405180606001604052808460ff1681526020018381526020018281525084604001518460ff1660038110620000ea57634e487b7160e01b600052603260045260246000fd5b602002015250819050620000fe8162000ce7565b91505062000079565b506000816040516020016200011d919062000c08565b6040516020818303038152906040529050805181602001f35b6200014062000a28565b50604080516103008101825260046102c08201818152634141564560e01b6102e084015282528251808401845260038082526210905560ea1b602083810191909152808501929092528451808601865283815263109554d160e21b8184015284860152845180860186528181526244414960e81b818401526060850152845180860186528181526222a72560e91b81840152608085015284518086018652818152624b4e4360e81b8184015260a085015284518086018652838152634c494e4b60e01b8184015260c085015284518086018652838152634d414e4160e01b8184015260e0850152845180860186528181526226a5a960e91b8184015261010085015284518086018652818152622922a760e91b8184015261012085015284518086018652818152620a69cb60eb1b81840152610140850152845180860186528381526314d554d160e21b818401526101608501528451808601865283815263151554d160e21b818401526101808501528451808601865281815262554e4960e81b818401526101a085015284518086018652838152635553444360e01b818401526101c085015284518086018652838152631554d11560e21b818401526101e085015284518086018652838152635742544360e01b8184015261020085015284518086018652928352630ae8aa8960e31b83830152610220840192909252835180850185528281526259464960e81b8183015261024084015283518085018552918252620b4a4b60eb1b8282015261026083019190915282518084018452600681526578535553484960d01b818301526102808301528251808401909352600a8352696372763363727970746f60b01b908301526102a081019190915290565b620003ca62000a51565b6000620003e16200070760201b620005e01760201c565b9050620003ed62000a51565b60005b601681101562000466576200042b858483601681106200042057634e487b7160e01b600052603260045260246000fd5b602002015162000964565b8282601681106200044c57634e487b7160e01b600052603260045260246000fd5b6020020152806200045d8162000cc9565b915050620003f0565b509150505b919050565b6200047a62000a51565b6200048462000a51565b60006200049b6200070760201b620005e01760201c565b9050620004a762000a51565b620004b162000a51565b6000866001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620004ed57600080fd5b505afa15801562000502573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000528919062000ae6565b905060005b60168160ff161015620006f957816001600160a01b031663776f6891868360ff16601681106200056d57634e487b7160e01b600052603260045260246000fd5b60200201518b6040518363ffffffff1660e01b81526004016200059292919062000bec565b60206040518083038186803b158015620005ab57600080fd5b505afa158015620005c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e6919062000b3a565b848260ff16601681106200060a57634e487b7160e01b600052603260045260246000fd5b60200201526001600160a01b03821663013351ef8660ff8416601681106200064257634e487b7160e01b600052603260045260246000fd5b60200201518b6040518363ffffffff1660e01b81526004016200066792919062000bec565b60206040518083038186803b1580156200068057600080fd5b505afa15801562000695573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006bb919062000b3a565b838260ff1660168110620006df57634e487b7160e01b600052603260045260246000fd5b602002015280620006f08162000ce7565b9150506200052d565b509197909650945050505050565b6200071162000a51565b50604080516102c081018252737fc66500c84a76ad7e9c93437bfc5ac33e2ddae98152730d8775f648430679a709e98d2b0cb6250d2887ef6020820152734fabb145d64652a948d72533023f6e7a623c7c5391810191909152736b175474e89094c44da98b954eedeac495271d0f606082015273f629cbd94d3791c9250152bd8dfbdf380e2a3b9c608082015273dd974d5c2e2928dea5f71b9825b8b646686bd20060a082015273514910771af9ca656af840dff83e8264ecf986ca60c0820152730f5d2fb29fb7d3cfee444a200298f468908cc94260e0820152739f8f72aa9304c8b593d555f12ef6589cc3a579a261010082015273408e41876cccdc0f92210600ef50372656052a3861012082015273c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f6101408201527357ab1ec28d129707052df4df418d58a2d46d5f516101608201526e085d4780b73119b644ae5ecd22b376610180820152731f9840a85d5af5bf1d1762f925bdaddc4201f9846101a082015273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486101c082015273dac17f958d2ee523a2206206994597c13d831ec76101e0820152732260fac5e5542a773aa44fbcfedf7c193bc2c59961020082015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610220820152730bc529c00c6401aef6d220be8c6ea1667f6ad93e61024082015273e41d2489571d322189246dafa5ebde1f4699f498610260820152738798249c2e607446efb7ad49ec89dd1865ff427261028082015273c4ad29ba4b3c580e6d59105fff484999997675ff6102a082015290565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906200099590869060040162000bd8565b60206040518083038186803b158015620009ae57600080fd5b505afa158015620009c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e9919062000b3a565b9392505050565b604051806060016040528062000a0562000a28565b815260200162000a1462000a51565b815260200162000a2362000a70565b905290565b604051806102c001604052806016905b606081526020019060019003908162000a385790505090565b604051806102c001604052806016906020820280368337509192915050565b60405180606001604052806003905b62000a8962000aa0565b81526020019060019003908162000a7f5790505090565b6040518060600160405280600060ff16815260200162000abf62000a51565b815260200162000a2362000a51565b80516001600160a01b03811681146200046b57600080fd5b60006020828403121562000af8578081fd5b620009e98262000ace565b6000806040838503121562000b16578081fd5b62000b218362000ace565b915062000b316020840162000ace565b90509250929050565b60006020828403121562000b4c578081fd5b5051919050565b8060005b600381101562000bad57815160ff815116855260208082015162000b7e8288018262000bb3565b506040820151915062000b966102e087018362000bb3565b6105a0959095019492909201915060010162000b57565b50505050565b8060005b601681101562000bad57815184526020938401939091019060010162000bb7565b6001600160a01b0391909116815260200190565b6001600160a01b0392909216825260ff16602082015260400190565b602080825282516113c083830152600091906116a08401906113e08501845b601681101562000c93578684036113df1901825282518051808652875b8181101562000c6157828101880151878201890152870162000c44565b8181111562000c7257888883890101525b50601f01601f19169490940185019350918401919084019060010162000c27565b505050908401519062000caa604085018362000bb3565b6040850151915062000cc161030085018362000b53565b949350505050565b600060001982141562000ce05762000ce062000d0a565b5060010190565b600060ff821660ff81141562000d015762000d0162000d0a565b60010192915050565b634e487b7160e01b600052601160045260246000fdfe";
