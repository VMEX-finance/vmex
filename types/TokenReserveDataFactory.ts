/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TokenReserveData } from "./TokenReserveData";

export class TokenReserveDataFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    provider: string,
    token: string,
    overrides?: Overrides
  ): Promise<TokenReserveData> {
    return super.deploy(
      provider,
      token,
      overrides || {}
    ) as Promise<TokenReserveData>;
  }
  getDeployTransaction(
    provider: string,
    token: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(provider, token, overrides || {});
  }
  attach(address: string): TokenReserveData {
    return super.attach(address) as TokenReserveData;
  }
  connect(signer: Signer): TokenReserveDataFactory {
    return super.connect(signer) as TokenReserveDataFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenReserveData {
    return new Contract(address, _abi, signerOrProvider) as TokenReserveData;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getType",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "data",
                type: "uint256",
              },
            ],
            internalType: "struct DataTypes.ReserveConfigurationMap",
            name: "configuration",
            type: "tuple",
          },
          {
            internalType: "uint128",
            name: "liquidityIndex",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "variableBorrowIndex",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "currentLiquidityRate",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "currentVariableBorrowRate",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "currentStableBorrowRate",
            type: "uint128",
          },
          {
            internalType: "uint40",
            name: "lastUpdateTimestamp",
            type: "uint40",
          },
          {
            internalType: "address",
            name: "aTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "stableDebtTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "variableDebtTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "interestRateStrategyAddress",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "tranche",
            type: "uint8",
          },
        ],
        internalType: "struct DataTypes.ReserveData[3]",
        name: "",
        type: "tuple[3]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000800380380620008008339810160408190526200003491620004d5565b6200003e62000374565b6040518060600160405280846001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200008357600080fd5b505afa15801562000098573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000be9190620004b1565b6001600160a01b0316633629e3cd8560006040518363ffffffff1660e01b8152600401620000ee9291906200065c565b6101a06040518083038186803b1580156200010857600080fd5b505afa1580156200011d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014391906200050c565b8152602001846001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200018257600080fd5b505afa15801562000197573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001bd9190620004b1565b6001600160a01b0316633629e3cd8560016040518363ffffffff1660e01b8152600401620001ed9291906200065c565b6101a06040518083038186803b1580156200020757600080fd5b505afa1580156200021c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024291906200050c565b8152602001846001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200028157600080fd5b505afa15801562000296573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002bc9190620004b1565b6001600160a01b0316633629e3cd8560026040518363ffffffff1660e01b8152600401620002ec9291906200065c565b6101a06040518083038186803b1580156200030657600080fd5b505afa1580156200031b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034191906200050c565b81525090506000816040516020016200035b919062000678565b6040516020818303038152906040529050805181602001f35b60405180606001604052806003905b6200038d620003a4565b815260200190600190039081620003835790505090565b604051806101a00160405280620003ba62000419565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820181905261016082018190526101809091015290565b6040518060200160405280600081525090565b80516001600160a01b03811681146200044457600080fd5b919050565b6000602082840312156200045b578081fd5b620004676020620007c7565b9151825250919050565b80516001600160801b03811681146200044457600080fd5b805164ffffffffff811681146200044457600080fd5b805160ff811681146200044457600080fd5b600060208284031215620004c3578081fd5b620004ce826200042c565b9392505050565b60008060408385031215620004e8578081fd5b620004f3836200042c565b915062000503602084016200042c565b90509250929050565b60006101a080838503121562000520578182fd5b6200052b81620007c7565b905062000539848462000449565b8152620005496020840162000471565b60208201526200055c6040840162000471565b60408201526200056f6060840162000471565b6060820152620005826080840162000471565b60808201526200059560a0840162000471565b60a0820152620005a860c0840162000489565b60c0820152620005bb60e084016200042c565b60e0820152610100620005d08185016200042c565b90820152610120620005e48482016200042c565b90820152610140620005f88482016200042c565b908201526101606200060c8482016200049f565b90820152610180620006208482016200049f565b908201529392505050565b6001600160a01b03169052565b519052565b6001600160801b03169052565b64ffffffffff169052565b60ff169052565b6001600160a01b0392909216825260ff16602082015260400190565b6104e08101818360005b6003811015620007be5781516200069b84825162000638565b602080820151620006af828701826200063d565b50604080830151620006c4828801826200063d565b5050606080830151620006da828801826200063d565b5050608080830151620006f0828801826200063d565b505060a08083015162000706828801826200063d565b505060c0808301516200071c828801826200064a565b505060e08083015162000732828801826200062b565b50506101008083015162000749828801826200062b565b50506101208083015162000760828801826200062b565b50506101408083015162000777828801826200062b565b5050610160808301516200078e8288018262000655565b50506101809182015191620007a68682018462000655565b506101a0949094019392909201915060010162000682565b50505092915050565b6040518181016001600160401b0381118282101715620007f757634e487b7160e01b600052604160045260246000fd5b60405291905056fe";
