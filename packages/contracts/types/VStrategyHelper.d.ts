/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VStrategyHelperInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "checkForHighestPayingToken(address[],uint256[])": FunctionFragment;
    "computeSwapPath(address,address)": FunctionFragment;
    "crvToken()": FunctionFragment;
    "cvxToken()": FunctionFragment;
    "ethNative()": FunctionFragment;
    "getExtraRewardsTokens(IBaseRewardsPool)": FunctionFragment;
    "getFixedArraySizeFour(uint256[])": FunctionFragment;
    "getFixedArraySizeThree(uint256[])": FunctionFragment;
    "getFixedArraySizeTwo(uint256[])": FunctionFragment;
    "getLiquidityAmountsArray(uint256,uint256,uint256)": FunctionFragment;
    "getLiquidityAmountsArrayIncludingEth(uint256,uint256,uint256)": FunctionFragment;
    "min(uint256[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkForHighestPayingToken",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "computeSwapPath",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "crvToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "cvxToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "ethNative", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExtraRewardsTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedArraySizeFour",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedArraySizeThree",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedArraySizeTwo",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityAmountsArray",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityAmountsArrayIncludingEth",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "min", values: [BigNumberish[]]): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkForHighestPayingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeSwapPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cvxToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethNative", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExtraRewardsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedArraySizeFour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedArraySizeThree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedArraySizeTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityAmountsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityAmountsArrayIncludingEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "min", data: BytesLike): Result;

  events: {};
}

export class VStrategyHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VStrategyHelperInterface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    checkForHighestPayingToken(
      poolTokens: string[],
      amountsInPool: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      highestPayingToken: string;
      index: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "checkForHighestPayingToken(address[],uint256[])"(
      poolTokens: string[],
      amountsInPool: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      highestPayingToken: string;
      index: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    computeSwapPath(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      0: string[];
    }>;

    "computeSwapPath(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<{
      path: string[];
      0: string[];
    }>;

    crvToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "crvToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    cvxToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "cvxToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ethNative(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ethNative()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getExtraRewardsTokens(
      baseRewardsPool: string,
      overrides?: CallOverrides
    ): Promise<{
      extraRewardsTokens: string[];
      0: string[];
    }>;

    "getExtraRewardsTokens(IBaseRewardsPool)"(
      baseRewardsPool: string,
      overrides?: CallOverrides
    ): Promise<{
      extraRewardsTokens: string[];
      0: string[];
    }>;

    getFixedArraySizeFour(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    "getFixedArraySizeFour(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    getFixedArraySizeThree(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber];
    }>;

    "getFixedArraySizeThree(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber];
    }>;

    getFixedArraySizeTwo(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber];
    }>;

    "getFixedArraySizeTwo(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber];
    }>;

    getLiquidityAmountsArray(
      n: BigNumberish,
      amountToken: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    "getLiquidityAmountsArray(uint256,uint256,uint256)"(
      n: BigNumberish,
      amountToken: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amounts: BigNumber[];
      0: BigNumber[];
    }>;

    getLiquidityAmountsArrayIncludingEth(
      index: BigNumberish,
      amountEth: BigNumberish,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amounts: [BigNumber, BigNumber];
      0: [BigNumber, BigNumber];
    }>;

    "getLiquidityAmountsArrayIncludingEth(uint256,uint256,uint256)"(
      index: BigNumberish,
      amountEth: BigNumberish,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amounts: [BigNumber, BigNumber];
      0: [BigNumber, BigNumber];
    }>;

    min(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "min(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  checkForHighestPayingToken(
    poolTokens: string[],
    amountsInPool: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    highestPayingToken: string;
    index: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "checkForHighestPayingToken(address[],uint256[])"(
    poolTokens: string[],
    amountsInPool: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    highestPayingToken: string;
    index: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  computeSwapPath(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "computeSwapPath(address,address)"(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  crvToken(overrides?: CallOverrides): Promise<string>;

  "crvToken()"(overrides?: CallOverrides): Promise<string>;

  cvxToken(overrides?: CallOverrides): Promise<string>;

  "cvxToken()"(overrides?: CallOverrides): Promise<string>;

  ethNative(overrides?: CallOverrides): Promise<string>;

  "ethNative()"(overrides?: CallOverrides): Promise<string>;

  getExtraRewardsTokens(
    baseRewardsPool: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getExtraRewardsTokens(IBaseRewardsPool)"(
    baseRewardsPool: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getFixedArraySizeFour(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  "getFixedArraySizeFour(uint256[])"(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getFixedArraySizeThree(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getFixedArraySizeThree(uint256[])"(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getFixedArraySizeTwo(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getFixedArraySizeTwo(uint256[])"(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getLiquidityAmountsArray(
    n: BigNumberish,
    amountToken: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getLiquidityAmountsArray(uint256,uint256,uint256)"(
    n: BigNumberish,
    amountToken: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLiquidityAmountsArrayIncludingEth(
    index: BigNumberish,
    amountEth: BigNumberish,
    amountToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getLiquidityAmountsArrayIncludingEth(uint256,uint256,uint256)"(
    index: BigNumberish,
    amountEth: BigNumberish,
    amountToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  min(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "min(uint256[])"(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    checkForHighestPayingToken(
      poolTokens: string[],
      amountsInPool: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      highestPayingToken: string;
      index: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "checkForHighestPayingToken(address[],uint256[])"(
      poolTokens: string[],
      amountsInPool: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      highestPayingToken: string;
      index: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    computeSwapPath(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "computeSwapPath(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    crvToken(overrides?: CallOverrides): Promise<string>;

    "crvToken()"(overrides?: CallOverrides): Promise<string>;

    cvxToken(overrides?: CallOverrides): Promise<string>;

    "cvxToken()"(overrides?: CallOverrides): Promise<string>;

    ethNative(overrides?: CallOverrides): Promise<string>;

    "ethNative()"(overrides?: CallOverrides): Promise<string>;

    getExtraRewardsTokens(
      baseRewardsPool: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getExtraRewardsTokens(IBaseRewardsPool)"(
      baseRewardsPool: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getFixedArraySizeFour(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getFixedArraySizeFour(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getFixedArraySizeThree(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getFixedArraySizeThree(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getFixedArraySizeTwo(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getFixedArraySizeTwo(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getLiquidityAmountsArray(
      n: BigNumberish,
      amountToken: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getLiquidityAmountsArray(uint256,uint256,uint256)"(
      n: BigNumberish,
      amountToken: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLiquidityAmountsArrayIncludingEth(
      index: BigNumberish,
      amountEth: BigNumberish,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getLiquidityAmountsArrayIncludingEth(uint256,uint256,uint256)"(
      index: BigNumberish,
      amountEth: BigNumberish,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    min(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "min(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkForHighestPayingToken(
      poolTokens: string[],
      amountsInPool: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkForHighestPayingToken(address[],uint256[])"(
      poolTokens: string[],
      amountsInPool: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeSwapPath(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeSwapPath(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crvToken(overrides?: CallOverrides): Promise<BigNumber>;

    "crvToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    cvxToken(overrides?: CallOverrides): Promise<BigNumber>;

    "cvxToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethNative(overrides?: CallOverrides): Promise<BigNumber>;

    "ethNative()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExtraRewardsTokens(
      baseRewardsPool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExtraRewardsTokens(IBaseRewardsPool)"(
      baseRewardsPool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedArraySizeFour(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFixedArraySizeFour(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedArraySizeThree(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFixedArraySizeThree(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedArraySizeTwo(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFixedArraySizeTwo(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityAmountsArray(
      n: BigNumberish,
      amountToken: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityAmountsArray(uint256,uint256,uint256)"(
      n: BigNumberish,
      amountToken: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityAmountsArrayIncludingEth(
      index: BigNumberish,
      amountEth: BigNumberish,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityAmountsArrayIncludingEth(uint256,uint256,uint256)"(
      index: BigNumberish,
      amountEth: BigNumberish,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    min(array: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    "min(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkForHighestPayingToken(
      poolTokens: string[],
      amountsInPool: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkForHighestPayingToken(address[],uint256[])"(
      poolTokens: string[],
      amountsInPool: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeSwapPath(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeSwapPath(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crvToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crvToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cvxToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cvxToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethNative()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtraRewardsTokens(
      baseRewardsPool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExtraRewardsTokens(IBaseRewardsPool)"(
      baseRewardsPool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedArraySizeFour(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFixedArraySizeFour(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedArraySizeThree(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFixedArraySizeThree(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedArraySizeTwo(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFixedArraySizeTwo(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityAmountsArray(
      n: BigNumberish,
      amountToken: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityAmountsArray(uint256,uint256,uint256)"(
      n: BigNumberish,
      amountToken: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityAmountsArrayIncludingEth(
      index: BigNumberish,
      amountEth: BigNumberish,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityAmountsArrayIncludingEth(uint256,uint256,uint256)"(
      index: BigNumberish,
      amountEth: BigNumberish,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    min(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "min(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
