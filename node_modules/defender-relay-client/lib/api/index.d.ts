import { BaseApiClient } from 'defender-base-client';
import { ApiRelayerParams, IRelayer, JsonRpcResponse, ListTransactionsRequest, RelayerGetResponse, RelayerTransaction, RelayerTransactionPayload, SignedMessagePayload, SignTypedDataPayload, SignMessagePayload, CreateRelayerRequest, RelayerListResponse, UpdateRelayerRequest, RelayerApiKey, DeleteRelayerApiKeyResponse } from '../relayer';
export declare const RelaySignerApiUrl: () => string;
export declare class RelayClient extends BaseApiClient {
    protected getPoolId(): string;
    protected getPoolClientId(): string;
    protected getApiUrl(): string;
    get(relayerId: string): Promise<RelayerGetResponse>;
    list(): Promise<RelayerListResponse>;
    create(relayer: CreateRelayerRequest): Promise<RelayerGetResponse>;
    update(relayerId: string, relayerUpdateParams: UpdateRelayerRequest): Promise<RelayerGetResponse>;
    private updatePolicies;
    createKey(relayerId: string, stackResourceId?: string): Promise<RelayerApiKey>;
    listKeys(relayerId: string): Promise<RelayerApiKey[]>;
    deleteKey(relayerId: string, keyId: string): Promise<DeleteRelayerApiKeyResponse>;
}
export declare class ApiRelayer extends BaseApiClient implements IRelayer {
    private jsonRpcRequestNextId;
    constructor(params: ApiRelayerParams);
    protected getPoolId(): string;
    protected getPoolClientId(): string;
    protected getApiUrl(): string;
    getRelayer(): Promise<RelayerGetResponse>;
    sendTransaction(payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionById(id: string, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    replaceTransactionByNonce(nonce: number, payload: RelayerTransactionPayload): Promise<RelayerTransaction>;
    signTypedData(payload: SignTypedDataPayload): Promise<SignedMessagePayload>;
    sign(payload: SignMessagePayload): Promise<SignedMessagePayload>;
    query(id: string): Promise<RelayerTransaction>;
    list(criteria?: ListTransactionsRequest): Promise<RelayerTransaction[]>;
    call(method: string, params: string[]): Promise<JsonRpcResponse>;
}
//# sourceMappingURL=index.d.ts.map