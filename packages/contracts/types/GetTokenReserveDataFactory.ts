/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { GetTokenReserveData } from "./GetTokenReserveData";

export class GetTokenReserveDataFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    pool: string,
    tranche: BigNumberish,
    overrides?: Overrides
  ): Promise<GetTokenReserveData> {
    return super.deploy(
      pool,
      tranche,
      overrides || {}
    ) as Promise<GetTokenReserveData>;
  }
  getDeployTransaction(
    pool: string,
    tranche: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(pool, tranche, overrides || {});
  }
  attach(address: string): GetTokenReserveData {
    return super.attach(address) as GetTokenReserveData;
  }
  connect(signer: Signer): GetTokenReserveDataFactory {
    return super.connect(signer) as GetTokenReserveDataFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GetTokenReserveData {
    return new Contract(address, _abi, signerOrProvider) as GetTokenReserveData;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "tranche",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getType",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "data",
                    type: "uint256",
                  },
                ],
                internalType: "struct DataTypes.ReserveConfigurationMap",
                name: "configuration",
                type: "tuple",
              },
              {
                internalType: "uint128",
                name: "liquidityIndex",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "variableBorrowIndex",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "currentLiquidityRate",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "currentVariableBorrowRate",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "currentStableBorrowRate",
                type: "uint128",
              },
              {
                internalType: "uint40",
                name: "lastUpdateTimestamp",
                type: "uint40",
              },
              {
                internalType: "address",
                name: "aTokenAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "stableDebtTokenAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "variableDebtTokenAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "interestRateStrategyAddress",
                type: "address",
              },
              {
                internalType: "uint8",
                name: "id",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "trancheId",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "trancheRisk",
                type: "uint8",
              },
              {
                internalType: "bool",
                name: "canBeCollateral",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "collateralCap",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "hasStrategy",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "usingGovernanceSetInterestRate",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "governanceSetInterestRate",
                type: "uint256",
              },
            ],
            internalType: "struct DataTypes.ReserveData",
            name: "reserveData",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "collateralRisk",
                type: "uint8",
              },
              {
                internalType: "bool",
                name: "isAllowedCollateralInHigherTranches",
                type: "bool",
              },
              {
                internalType: "enum DataTypes.ReserveAssetType",
                name: "assetType",
                type: "uint8",
              },
            ],
            internalType: "struct DataTypes.AssetData",
            name: "assetData",
            type: "tuple",
          },
        ],
        internalType: "struct TokenData[22]",
        name: "",
        type: "tuple[22]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "";
