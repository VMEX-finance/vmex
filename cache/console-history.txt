main()
}
//registry has get_virtual_price_from_lp_token, maybe we can just use this
await curvePool.connect(signer).get_virtual_price();
var curvePool = new ethers.Contract(curvePoolAdd,curvePoolAbi);
]
    "function get_virtual_price() external view returns (uint256)"
var curvePoolAbi = [
var curvePoolAdd = '0xD51a44d3FaE010294C616388b506AcdA1bfAAE46';
var curveOracle = new ethers.Contract(curveOracleAdd,curveOracleAbi);
]
    "function get_price(address pool, uint256[] memory prices) external view returns (uint256)"
var curveOracleAbi = [
var curveOracleAdd = await addressesProvider.getCurvePriceOracle();
await aave_oracle.connect(signer).getAssetPrice('0xdAC17F958D2ee523a2206206994597C13D831ec7') //USDT price is 
var aave_oracle = new ethers.Contract(aave_oracleAdd,oracleabi);
var aave_oracleAdd = await addressesProvider.getAavePriceOracle();
[1]
var num_coins = await registry.connect(signer).get_n_coins(pool)
await registry.connect(signer).get_virtual_price_from_lp_token('0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF') //this works
await registry.connect(signer).get_virtual_price_from_lp_token('0xc4AD29ba4B3c580e6D59105FFf484999997675Ff') //this does not
await registry.connect(signer).pool_list(0)
// WE NEED TO USE THIS: pool address should be 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46 though. But this address doesn't work with get_n_coins. This virtual price is 1021497750009951736
//pool address from above is 0x80466c64868E1ab14a1Ddf27A676C3fcBE638Fe5. This virtual price is 1019476472238204403
var pool = await registry.connect(signer).get_pool_from_lp_token('0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF') //this returns the right pool address
await registry.connect(signer).get_pool_from_lp_token('0xc4AD29ba4B3c580e6D59105FFf484999997675Ff') //this returns zero address
//but the issue with using 0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF is that the deposit address doesn't give this as the token. Need to find a deposit address that gives this as the token
//this returns 0 address since we should really be using 0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF
var pool = await registry.connect(signer).get_pool_from_lp_token(CurveToken.address) 
var registry = new ethers.Contract(registryAdd,registryAbi);
]
   "function get_virtual_price_from_lp_token(address a) external view returns (uint256)"
   "function pool_list(uint256 x) external view returns (address)",
   "function get_underlying_coins(address a) external view returns (address[8] memory)",
    "function get_n_coins(address a) external view returns (uint256[2] memory)",
    "function get_pool_from_lp_token(address a) external view returns (address)",
var registryAbi = [
var registryAdd = await curveAddressProvider.connect(signer).get_registry();
var curveAddressProvider = new ethers.Contract(curveAddressProviderAddress,curveAddressProviderAbi);
]
    "function get_registry() external view returns (address)",
var curveAddressProviderAbi = [
var curveAddressProviderAddress = await addressesProvider.getCurveAddressProvider();
//This is actually the right answer in wei (have to divide by 10^18 first)
//596885100691044998108101827164204760
await oracle.connect(signer).getAssetPrice(CurveToken.address);
await oracle.connect(signer).getFallbackOracle();
var oracle = new ethers.Contract(oracleadd,oracleabi)
]
    "function getFallbackOracle() external view returns (address)"
    "function getAssetPrice(address asset) public view returns (uint256)",
var oracleabi = [
var oracleadd = await addressesProvider.getPriceOracle(ad.assetType)
var ad = await lendingPool.getAssetData(CurveToken.address)
var addressesProvider = await contractGetters.getLendingPoolAddressesProvider()
//test getPriceOracle
await lendingPool.connect(signer).getUserAccountData(signer.address,2)
await dataProv.getUserReserveData(myWETH.address,2,emergency.address)
await dataProv.getReserveData(myWETH.address,2)
await dataProv.getUserReserveData(CurveToken.address,1,signer.address)
await dataProv.getReserveData(CurveToken.address,1)
var dataProv = await contractGetters.getAaveProtocolDataProvider()
await lendingPool.connect(signer).getReserveData(CurveToken.address, 2)
await myWETH.connect(signer).balanceOf(atokenAdd)
atokenAdd = atokenAdd.aTokenAddress
var atokenAdd = await lendingPool.getReserveData(myWETH.address,2) //
/************************************************************************************/
/****************** debugging  **********************/ 
/************************************************************************************/
await dataProv.getUserReserveData(CurveToken.address,0,signer.address)
await dataProv.getReserveData(CurveToken.address,0)
var dataProv = await contractGetters.getAaveProtocolDataProvider()
await lendingPool.connect(signer).setUserUseReserveAsCollateral(CurveToken.address, 0, true);  //revert expected
await lendingPool.connect(signer).getUserAccountData(signer.address,0)
await lendingPool.connect(signer).transferTranche(CurveToken.address, 1, 0, ethers.utils.parseEther("1")); 
await lendingPool.connect(signer).deposit(CurveToken.address, 1, ethers.utils.parseUnits('1'), await signer.getAddress(), '0'); 
await lendingPool.connect(signer).withdraw(CurveToken.address, 1, ethers.utils.parseEther("1"),signer.address); 
await CurveToken.connect(signer).balanceOf(signer.address)
/************************************************************************************/
/****************** moving tokens around **********************/ 
/************************************************************************************/
await lendingPool.connect(signer).borrow(myWETH.address, 1, ethers.utils.parseEther("0.01"), 1, '0', await signer.getAddress()); //borrow 500 USDT from tranche 2, 1 means stable rate
await lendingPool.connect(signer).getUserAccountData(signer.address,1)
await lendingPool.connect(signer).setUserUseReserveAsCollateral(CurveToken.address, 1, true); 
await lendingPool.connect(signer).deposit(CurveToken.address, 1, ethers.utils.parseUnits('1'), await signer.getAddress(), '0'); 
/************************************************************************************/
/****************** deposit curve LP token to pool and then borrow WETH  **********************/ 
/************************************************************************************/
// await lendingPoolConfig.connect(signer).activateReserve(CurveToken.address, 2)
// await lendingPoolConfig.connect(signer).unfreezeReserve(CurveToken.address, 2)
await CurveToken.connect(signer).approve(lendingPool.address,ethers.utils.parseEther("100000.0"))
await CurveToken.connect(signer).balanceOf(signer.address)
var CurveToken = new ethers.Contract(CurveTokenAdd,CurveTokenAddabi)
];
    "function withdraw(uint wad) public"
    "function deposit() public payable",
    "function transferFrom(address from, address to, uint256 value) external returns (bool success)",
    "function transfer(address to, uint256 value) external returns (bool success)",
    "function totalSupply() external view returns (uint256 totalTokensIssued)",
    "function symbol() external view returns (string memory tokenSymbol)",
    "function name() external view returns (string memory tokenName)",
    "function decimals() external view returns (uint8 decimalPlaces)",
    "function balanceOf(address owner) external view returns (uint256 balance)",
    "function approve(address spender, uint256 value) external returns (bool success)",
    "function allowance(address owner, address spender) external view returns (uint256 remaining)",
var CurveTokenAddabi = [
var CurveTokenAdd = "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490"
await triCryptoDeposit.connect(signer).add_liquidity(amounts,ethers.utils.parseEther("0.1"))
// await triCryptoDeposit.connect(signer).calc_token_amount([10**2, 10**2,10**2],true)
await DAI.connect(signer).approve(triCryptoDeposit.address,ethers.utils.parseEther("10"))
var amounts = [ethers.utils.parseEther("10"),ethers.utils.parseEther("0"),ethers.utils.parseEther("0")]
var triCryptoDeposit = new ethers.Contract(triCryptoDepositAdd,triCryptoDepositAbi)
]
    "function calc_token_amount(uint256[3] _amounts,bool deposit) external view"
    "function add_liquidity(uint256[3] _amounts,uint256 _min_mint_amount) external",
var triCryptoDepositAbi = [
var triCryptoDepositAdd = "0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7" 
/************************************************************************************/
/******************  get LP tokens **********************/ 
/************************************************************************************/
await DAI.connect(signer).balanceOf(signer.address)
await UNISWAP_ROUTER_CONTRACT.connect(signer).swapExactETHForTokens(ethers.utils.parseEther("1000000.0"), path, signer.address, deadline,options)
var options = {value: ethers.utils.parseEther("1000.0")}
//emergency deposits 100 WETH to pool to provide liquidity
const deadline = Math.floor(Date.now() / 1000) + 60 * 20; // 20 minutes from the current Unix time
const path = [myWETH.address, DAI.address];
const UNISWAP_ROUTER_CONTRACT = new ethers.Contract(UNISWAP_ROUTER_ADDRESS, UNISWAP_ROUTER_ABI)
const UNISWAP_ROUTER_ABI = fs.readFileSync("./localhost_tests/uniswapAbi.json").toString()
const UNISWAP_ROUTER_ADDRESS = "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
/************************************************************************************/
/******************  Uniswap ETH for DAI  **********************/ 
/************************************************************************************/
await lendingPool.connect(emergency).deposit(myWETH.address, 1, ethers.utils.parseUnits('100'), await emergency.getAddress(), '0'); 
await myWETH.connect(emergency).approve(lendingPool.address,ethers.utils.parseEther("100.0"))
await myWETH.connect(emergency).balanceOf(signer.address);
await myWETH.connect(emergency).deposit(options);
var options = {value: ethers.utils.parseEther("100.0")}
//emergency deposits 100 WETH to pool to provide liquidity
await myWETH.connect(signer).balanceOf(signer.address);
await myWETH.connect(signer).deposit(options);
//give signer 1 WETH so he can get LP tokens
var options = {value: ethers.utils.parseEther("1.0")}
const myWETH = new ethers.Contract(WETHadd,WETHabi)
const DAI = new ethers.Contract(DAIadd,DAI_ABI)
const DAI_ABI = fs.readFileSync("./localhost_tests/DAI_ABI.json").toString()
const DAIadd = "0x6B175474E89094C44Da98b954EedeAC495271d0F"
];
    "function withdraw(uint wad) public"
    "function deposit() public payable",
    "function transferFrom(address from, address to, uint256 value) external returns (bool success)",
    "function transfer(address to, uint256 value) external returns (bool success)",
    "function totalSupply() external view returns (uint256 totalTokensIssued)",
    "function symbol() external view returns (string memory tokenSymbol)",
    "function name() external view returns (string memory tokenName)",
    "function decimals() external view returns (uint8 decimalPlaces)",
    "function balanceOf(address owner) external view returns (uint256 balance)",
    "function approve(address spender, uint256 value) external returns (bool success)",
    "function allowance(address owner, address spender) external view returns (uint256 remaining)",
const WETHabi = [
const WETHadd = "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
/************************************************************************************/
/****************** give WETH to users **********************/ 
/************************************************************************************/
await lendingPoolConfig.connect(emergency).setPoolPause(false)
const lendingPoolConfig = await contractGetters.getLendingPoolConfiguratorProxy()
/************************************************************************************/
/****************** unpause lending pools **********************/ 
/************************************************************************************/
const emergency = (await ethers.getSigners())[1]
var signer = await contractGetters.getFirstSigner();
// Load the first signer
    const lendingPool = await contractGetters.getLendingPool();
    const contractHelpers = require('./helpers/contracts-helpers');
    const contractGetters = require('./helpers/contracts-getters');
    // Import getters to instance any Aave contract
    await run("set-DRE")
    // Load the HRE into helpers to access signers
// );
//     18
//     "0x6B175474E89094C44Da98b954EedeAC495271d0F",
//     '',
// const DAI = new Token(
const fs = require('fs');
    // Our code will go here
async function main () {
// scripts/index.js
import { ethers } from "ethers";
.then(() => process.exit(0))
main()
}
//registry has get_virtual_price_from_lp_token, maybe we can just use this
await curvePool.connect(signer).get_virtual_price();
var curvePool = new ethers.Contract(curvePoolAdd,curvePoolAbi);
]
    "function get_virtual_price() external view returns (uint256)"
var curvePoolAbi = [
var curvePoolAdd = '0xD51a44d3FaE010294C616388b506AcdA1bfAAE46';
var curveOracle = new ethers.Contract(curveOracleAdd,curveOracleAbi);
]
    "function get_price(address pool, uint256[] memory prices) external view returns (uint256)"
var curveOracleAbi = [
var curveOracleAdd = await addressesProvider.getCurvePriceOracle();
await aave_oracle.connect(signer).getAssetPrice('0xdAC17F958D2ee523a2206206994597C13D831ec7') //USDT price is 
var aave_oracle = new ethers.Contract(aave_oracleAdd,oracleabi);
var aave_oracleAdd = await addressesProvider.getAavePriceOracle();
[1]
var num_coins = await registry.connect(signer).get_n_coins(pool)
await registry.connect(signer).get_virtual_price_from_lp_token('0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF') //this works
await registry.connect(signer).get_virtual_price_from_lp_token('0xc4AD29ba4B3c580e6D59105FFf484999997675Ff') //this does not
await registry.connect(signer).pool_list(0)
// WE NEED TO USE THIS: pool address should be 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46 though. But this address doesn't work with get_n_coins. This virtual price is 1021497750009951736
//pool address from above is 0x80466c64868E1ab14a1Ddf27A676C3fcBE638Fe5. This virtual price is 1019476472238204403
var pool = await registry.connect(signer).get_pool_from_lp_token('0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF') //this returns the right pool address
await registry.connect(signer).get_pool_from_lp_token('0xc4AD29ba4B3c580e6D59105FFf484999997675Ff') //this returns zero address
//but the issue with using 0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF is that the deposit address doesn't give this as the token. Need to find a deposit address that gives this as the token
//this returns 0 address since we should really be using 0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF
var pool = await registry.connect(signer).get_pool_from_lp_token(CurveToken.address) 
var registry = new ethers.Contract(registryAdd,registryAbi);
]
   "function get_virtual_price_from_lp_token(address a) external view returns (uint256)"
   "function pool_list(uint256 x) external view returns (address)",
   "function get_underlying_coins(address a) external view returns (address[8] memory)",
    "function get_n_coins(address a) external view returns (uint256[2] memory)",
    "function get_pool_from_lp_token(address a) external view returns (address)",
var registryAbi = [
var registryAdd = await curveAddressProvider.connect(signer).get_registry();
var curveAddressProvider = new ethers.Contract(curveAddressProviderAddress,curveAddressProviderAbi);
]
    "function get_registry() external view returns (address)",
var curveAddressProviderAbi = [
var curveAddressProviderAddress = await addressesProvider.getCurveAddressProvider();
//This is actually the right answer in wei (have to divide by 10^18 first)
//596885100691044998108101827164204760
await oracle.connect(signer).getAssetPrice(CurveToken.address);
await oracle.connect(signer).getFallbackOracle();
var oracle = new ethers.Contract(oracleadd,oracleabi)
]
    "function getFallbackOracle() external view returns (address)"
    "function getAssetPrice(address asset) public view returns (uint256)",
var oracleabi = [
var oracleadd = await addressesProvider.getPriceOracle(ad.assetType)
var ad = await lendingPool.getAssetData(CurveToken.address)
var addressesProvider = await contractGetters.getLendingPoolAddressesProvider()
//test getPriceOracle
await lendingPool.connect(signer).getUserAccountData(signer.address,2)
await dataProv.getUserReserveData(myWETH.address,2,emergency.address)
await dataProv.getReserveData(myWETH.address,2)
await dataProv.getUserReserveData(CurveToken.address,1,signer.address)
await dataProv.getReserveData(CurveToken.address,1)
var dataProv = await contractGetters.getAaveProtocolDataProvider()
await lendingPool.connect(signer).getReserveData(CurveToken.address, 2)
await myWETH.connect(signer).balanceOf(atokenAdd)
atokenAdd = atokenAdd.aTokenAddress
var atokenAdd = await lendingPool.getReserveData(myWETH.address,2) //
/************************************************************************************/
/****************** debugging  **********************/ 
/************************************************************************************/
await dataProv.getUserReserveData(CurveToken.address,0,signer.address)
await dataProv.getReserveData(CurveToken.address,0)
var dataProv = await contractGetters.getAaveProtocolDataProvider()
await lendingPool.connect(signer).setUserUseReserveAsCollateral(CurveToken.address, 0, true);  //revert expected
await lendingPool.connect(signer).getUserAccountData(signer.address,0)
await lendingPool.connect(signer).transferTranche(CurveToken.address, 1, 0, ethers.utils.parseEther("1")); 
await lendingPool.connect(signer).deposit(CurveToken.address, 1, ethers.utils.parseUnits('1'), await signer.getAddress(), '0'); 
await lendingPool.connect(signer).withdraw(CurveToken.address, 1, ethers.utils.parseEther("1"),signer.address); 
await CurveToken.connect(signer).balanceOf(signer.address)
/************************************************************************************/
/****************** moving tokens around **********************/ 
/************************************************************************************/
await lendingPool.connect(signer).borrow(myWETH.address, 1, ethers.utils.parseEther("0.01"), 1, '0', await signer.getAddress()); //borrow 500 USDT from tranche 2, 1 means stable rate
await lendingPool.connect(signer).getUserAccountData(signer.address,1)
await lendingPool.connect(signer).setUserUseReserveAsCollateral(CurveToken.address, 1, true); 
await lendingPool.connect(signer).deposit(CurveToken.address, 1, ethers.utils.parseUnits('1'), await signer.getAddress(), '0'); 
/************************************************************************************/
/****************** deposit curve LP token to pool and then borrow WETH  **********************/ 
/************************************************************************************/
// await lendingPoolConfig.connect(signer).activateReserve(CurveToken.address, 2)
// await lendingPoolConfig.connect(signer).unfreezeReserve(CurveToken.address, 2)
await CurveToken.connect(signer).approve(lendingPool.address,ethers.utils.parseEther("100000.0"))
await CurveToken.connect(signer).balanceOf(signer.address)
var CurveToken = new ethers.Contract(CurveTokenAdd,CurveTokenAddabi)
];
    "function withdraw(uint wad) public"
    "function deposit() public payable",
    "function transferFrom(address from, address to, uint256 value) external returns (bool success)",
    "function transfer(address to, uint256 value) external returns (bool success)",
    "function totalSupply() external view returns (uint256 totalTokensIssued)",
    "function symbol() external view returns (string memory tokenSymbol)",
    "function name() external view returns (string memory tokenName)",
    "function decimals() external view returns (uint8 decimalPlaces)",
    "function balanceOf(address owner) external view returns (uint256 balance)",
    "function approve(address spender, uint256 value) external returns (bool success)",
    "function allowance(address owner, address spender) external view returns (uint256 remaining)",
var CurveTokenAddabi = [
var CurveTokenAdd = "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490"
await triCryptoDeposit.connect(signer).add_liquidity(amounts,ethers.utils.parseEther("0.1"))
// await triCryptoDeposit.connect(signer).calc_token_amount([10**2, 10**2,10**2],true)
await DAI.connect(signer).approve(triCryptoDeposit.address,ethers.utils.parseEther("10"))
var amounts = [ethers.utils.parseEther("10"),ethers.utils.parseEther("0"),ethers.utils.parseEther("0")]
var triCryptoDeposit = new ethers.Contract(triCryptoDepositAdd,triCryptoDepositAbi)
]
    "function calc_token_amount(uint256[3] _amounts,bool deposit) external view"
    "function add_liquidity(uint256[3] _amounts,uint256 _min_mint_amount) external",
var triCryptoDepositAbi = [
var triCryptoDepositAdd = "0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7" 
/************************************************************************************/
/******************  get LP tokens **********************/ 
/************************************************************************************/
await DAI.connect(signer).balanceOf(signer.address)
await UNISWAP_ROUTER_CONTRACT.connect(signer).swapExactETHForTokens(ethers.utils.parseEther("1000000.0"), path, signer.address, deadline,options)
var options = {value: ethers.utils.parseEther("1000.0")}
//emergency deposits 100 WETH to pool to provide liquidity
const deadline = Math.floor(Date.now() / 1000) + 60 * 20; // 20 minutes from the current Unix time
const path = [myWETH.address, DAI.address];
const UNISWAP_ROUTER_CONTRACT = new ethers.Contract(UNISWAP_ROUTER_ADDRESS, UNISWAP_ROUTER_ABI)
const UNISWAP_ROUTER_ABI = fs.readFileSync("./localhost_tests/uniswapAbi.json").toString()
const UNISWAP_ROUTER_ADDRESS = "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
/************************************************************************************/
/******************  Uniswap ETH for DAI  **********************/ 
/************************************************************************************/
await lendingPool.connect(emergency).deposit(myWETH.address, 1, ethers.utils.parseUnits('100'), await emergency.getAddress(), '0'); 
await myWETH.connect(emergency).approve(lendingPool.address,ethers.utils.parseEther("100.0"))
await myWETH.connect(emergency).balanceOf(signer.address);
await myWETH.connect(emergency).deposit(options);
var options = {value: ethers.utils.parseEther("100.0")}
//emergency deposits 100 WETH to pool to provide liquidity
await myWETH.connect(signer).balanceOf(signer.address);
await myWETH.connect(signer).deposit(options);
//give signer 1 WETH so he can get LP tokens
var options = {value: ethers.utils.parseEther("1.0")}
const myWETH = new ethers.Contract(WETHadd,WETHabi)
const DAI = new ethers.Contract(DAIadd,DAI_ABI)
const DAI_ABI = fs.readFileSync("./localhost_tests/DAI_ABI.json").toString()
const DAIadd = "0x6B175474E89094C44Da98b954EedeAC495271d0F"
];
    "function withdraw(uint wad) public"
    "function deposit() public payable",
    "function transferFrom(address from, address to, uint256 value) external returns (bool success)",
    "function transfer(address to, uint256 value) external returns (bool success)",
    "function totalSupply() external view returns (uint256 totalTokensIssued)",
    "function symbol() external view returns (string memory tokenSymbol)",
    "function name() external view returns (string memory tokenName)",
    "function decimals() external view returns (uint8 decimalPlaces)",
    "function balanceOf(address owner) external view returns (uint256 balance)",
    "function approve(address spender, uint256 value) external returns (bool success)",
    "function allowance(address owner, address spender) external view returns (uint256 remaining)",
const WETHabi = [
const WETHadd = "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
/************************************************************************************/
/****************** give WETH to users **********************/ 
/************************************************************************************/
await lendingPoolConfig.connect(emergency).setPoolPause(false)
const lendingPoolConfig = await contractGetters.getLendingPoolConfiguratorProxy()
/************************************************************************************/
/****************** unpause lending pools **********************/ 
/************************************************************************************/
const emergency = (await ethers.getSigners())[1]
var signer = await contractGetters.getFirstSigner();
// Load the first signer
    const lendingPool = await contractGetters.getLendingPool();
    const contractHelpers = require('./helpers/contracts-helpers');
    const contractGetters = require('./helpers/contracts-getters');
    // Import getters to instance any Aave contract
    await run("set-DRE")
    // Load the HRE into helpers to access signers
// );
//     18
//     "0x6B175474E89094C44Da98b954EedeAC495271d0F",
//     '',
// const DAI = new Token(
const fs = require('fs');
async function main () {
import { ethers } from "ethers";
    console.error(error);
.catch(error => {
.then(() => process.exit(0))
main()
}
//registry has get_virtual_price_from_lp_token, maybe we can just use this
await curvePool.connect(signer).get_virtual_price();
var curvePool = new ethers.Contract(curvePoolAdd,curvePoolAbi);
]
    "function get_virtual_price() external view returns (uint256)"
var curvePoolAbi = [
var curvePoolAdd = '0xD51a44d3FaE010294C616388b506AcdA1bfAAE46';
var curveOracle = new ethers.Contract(curveOracleAdd,curveOracleAbi);
]
    "function get_price(address pool, uint256[] memory prices) external view returns (uint256)"
var curveOracleAbi = [
var curveOracleAdd = await addressesProvider.getCurvePriceOracle();
await aave_oracle.connect(signer).getAssetPrice('0xdAC17F958D2ee523a2206206994597C13D831ec7') //USDT price is 
var aave_oracle = new ethers.Contract(aave_oracleAdd,oracleabi);
var aave_oracleAdd = await addressesProvider.getAavePriceOracle();
[1]
var num_coins = await registry.connect(signer).get_n_coins(pool)
await registry.connect(signer).get_virtual_price_from_lp_token('0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF') //this works
await registry.connect(signer).get_virtual_price_from_lp_token('0xc4AD29ba4B3c580e6D59105FFf484999997675Ff') //this does not
await registry.connect(signer).pool_list(0)
// WE NEED TO USE THIS: pool address should be 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46 though. But this address doesn't work with get_n_coins. This virtual price is 1021497750009951736
//pool address from above is 0x80466c64868E1ab14a1Ddf27A676C3fcBE638Fe5. This virtual price is 1019476472238204403
var pool = await registry.connect(signer).get_pool_from_lp_token('0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF') //this returns the right pool address
await registry.connect(signer).get_pool_from_lp_token('0xc4AD29ba4B3c580e6D59105FFf484999997675Ff') //this returns zero address
//but the issue with using 0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF is that the deposit address doesn't give this as the token. Need to find a deposit address that gives this as the token
//this returns 0 address since we should really be using 0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF
var pool = await registry.connect(signer).get_pool_from_lp_token(CurveToken.address) 
var registry = new ethers.Contract(registryAdd,registryAbi);
]
   "function get_virtual_price_from_lp_token(address a) external view returns (uint256)"
   "function pool_list(uint256 x) external view returns (address)",
   "function get_underlying_coins(address a) external view returns (address[8] memory)",
    "function get_n_coins(address a) external view returns (uint256[2] memory)",
    "function get_pool_from_lp_token(address a) external view returns (address)",
var registryAbi = [
var registryAdd = await curveAddressProvider.connect(signer).get_registry();
var curveAddressProvider = new ethers.Contract(curveAddressProviderAddress,curveAddressProviderAbi);
]
    "function get_registry() external view returns (address)",
var curveAddressProviderAbi = [
var curveAddressProviderAddress = await addressesProvider.getCurveAddressProvider();
//This is actually the right answer in wei (have to divide by 10^18 first)
//596885100691044998108101827164204760
await oracle.connect(signer).getAssetPrice(CurveToken.address);
await oracle.connect(signer).getFallbackOracle();
var oracle = new ethers.Contract(oracleadd,oracleabi)
]
    "function getFallbackOracle() external view returns (address)"
    "function getAssetPrice(address asset) public view returns (uint256)",
var oracleabi = [
var oracleadd = await addressesProvider.getPriceOracle(ad.assetType)
var ad = await lendingPool.getAssetData(CurveToken.address)
var addressesProvider = await contractGetters.getLendingPoolAddressesProvider()
//test getPriceOracle
await lendingPool.connect(signer).getUserAccountData(signer.address,2)
await dataProv.getUserReserveData(myWETH.address,2,emergency.address)
await dataProv.getReserveData(myWETH.address,2)
await dataProv.getUserReserveData(CurveToken.address,1,signer.address)
await dataProv.getReserveData(CurveToken.address,1)
var dataProv = await contractGetters.getAaveProtocolDataProvider()
await lendingPool.connect(signer).getReserveData(CurveToken.address, 2)
await myWETH.connect(signer).balanceOf(atokenAdd)
atokenAdd = atokenAdd.aTokenAddress
var atokenAdd = await lendingPool.getReserveData(myWETH.address,2) //
/************************************************************************************/
/****************** debugging  **********************/ 
/************************************************************************************/
await dataProv.getUserReserveData(CurveToken.address,0,signer.address)
await dataProv.getReserveData(CurveToken.address,0)
var dataProv = await contractGetters.getAaveProtocolDataProvider()
await lendingPool.connect(signer).setUserUseReserveAsCollateral(CurveToken.address, 0, true);  //revert expected
await lendingPool.connect(signer).getUserAccountData(signer.address,0)
await lendingPool.connect(signer).transferTranche(CurveToken.address, 1, 0, ethers.utils.parseEther("1")); 
await lendingPool.connect(signer).deposit(CurveToken.address, 1, ethers.utils.parseUnits('1'), await signer.getAddress(), '0'); 
await lendingPool.connect(signer).withdraw(CurveToken.address, 1, ethers.utils.parseEther("1"),signer.address); 
await CurveToken.connect(signer).balanceOf(signer.address)
/************************************************************************************/
/****************** moving tokens around **********************/ 
/************************************************************************************/
await lendingPool.connect(signer).borrow(myWETH.address, 1, ethers.utils.parseEther("0.01"), 1, '0', await signer.getAddress()); //borrow 500 USDT from tranche 2, 1 means stable rate
await lendingPool.connect(signer).getUserAccountData(signer.address,1)
await lendingPool.connect(signer).setUserUseReserveAsCollateral(CurveToken.address, 1, true); 
await lendingPool.connect(signer).deposit(CurveToken.address, 1, ethers.utils.parseUnits('1'), await signer.getAddress(), '0'); 
/************************************************************************************/
/****************** deposit curve LP token to pool and then borrow WETH  **********************/ 
/************************************************************************************/
// await lendingPoolConfig.connect(signer).activateReserve(CurveToken.address, 2)
// await lendingPoolConfig.connect(signer).unfreezeReserve(CurveToken.address, 2)
await CurveToken.connect(signer).approve(lendingPool.address,ethers.utils.parseEther("100000.0"))
await CurveToken.connect(signer).balanceOf(signer.address)
var CurveToken = new ethers.Contract(CurveTokenAdd,CurveTokenAddabi)
];
    "function withdraw(uint wad) public"
    "function deposit() public payable",
    "function transferFrom(address from, address to, uint256 value) external returns (bool success)",
    "function transfer(address to, uint256 value) external returns (bool success)",
    "function totalSupply() external view returns (uint256 totalTokensIssued)",
    "function symbol() external view returns (string memory tokenSymbol)",
    "function name() external view returns (string memory tokenName)",
    "function decimals() external view returns (uint8 decimalPlaces)",
    "function balanceOf(address owner) external view returns (uint256 balance)",
    "function approve(address spender, uint256 value) external returns (bool success)",
    "function allowance(address owner, address spender) external view returns (uint256 remaining)",
var CurveTokenAddabi = [
var CurveTokenAdd = "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490"
await triCryptoDeposit.connect(signer).add_liquidity(amounts,ethers.utils.parseEther("0.1"))
// await triCryptoDeposit.connect(signer).calc_token_amount([10**2, 10**2,10**2],true)
await DAI.connect(signer).approve(triCryptoDeposit.address,ethers.utils.parseEther("10"))
var amounts = [ethers.utils.parseEther("10"),ethers.utils.parseEther("0"),ethers.utils.parseEther("0")]
var triCryptoDeposit = new ethers.Contract(triCryptoDepositAdd,triCryptoDepositAbi)
]
    "function calc_token_amount(uint256[3] _amounts,bool deposit) external view"
    "function add_liquidity(uint256[3] _amounts,uint256 _min_mint_amount) external",
var triCryptoDepositAbi = [
var triCryptoDepositAdd = "0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7" 
/************************************************************************************/
/******************  get LP tokens **********************/ 
/************************************************************************************/
await DAI.connect(signer).balanceOf(signer.address)
await UNISWAP_ROUTER_CONTRACT.connect(signer).swapExactETHForTokens(ethers.utils.parseEther("1000000.0"), path, signer.address, deadline,options)
var options = {value: ethers.utils.parseEther("1000.0")}
//emergency deposits 100 WETH to pool to provide liquidity
const deadline = Math.floor(Date.now() / 1000) + 60 * 20; // 20 minutes from the current Unix time
const path = [myWETH.address, DAI.address];
const UNISWAP_ROUTER_CONTRACT = new ethers.Contract(UNISWAP_ROUTER_ADDRESS, UNISWAP_ROUTER_ABI)
const UNISWAP_ROUTER_ABI = fs.readFileSync("./localhost_tests/uniswapAbi.json").toString()
const UNISWAP_ROUTER_ADDRESS = "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
/************************************************************************************/
/******************  Uniswap ETH for DAI  **********************/ 
/************************************************************************************/
await lendingPool.connect(emergency).deposit(myWETH.address, 1, ethers.utils.parseUnits('100'), await emergency.getAddress(), '0'); 
await myWETH.connect(emergency).approve(lendingPool.address,ethers.utils.parseEther("100.0"))
await myWETH.connect(emergency).balanceOf(signer.address);
await myWETH.connect(emergency).deposit(options);
var options = {value: ethers.utils.parseEther("100.0")}
//emergency deposits 100 WETH to pool to provide liquidity
await myWETH.connect(signer).balanceOf(signer.address);
await myWETH.connect(signer).deposit(options);
//give signer 1 WETH so he can get LP tokens
var options = {value: ethers.utils.parseEther("1.0")}
const myWETH = new ethers.Contract(WETHadd,WETHabi)
const DAI = new ethers.Contract(DAIadd,DAI_ABI)
const DAI_ABI = fs.readFileSync("./localhost_tests/DAI_ABI.json").toString()
const DAIadd = "0x6B175474E89094C44Da98b954EedeAC495271d0F"
];
    "function withdraw(uint wad) public"
    "function deposit() public payable",
    "function transferFrom(address from, address to, uint256 value) external returns (bool success)",
    "function transfer(address to, uint256 value) external returns (bool success)",
    "function totalSupply() external view returns (uint256 totalTokensIssued)",
    "function symbol() external view returns (string memory tokenSymbol)",
    "function name() external view returns (string memory tokenName)",
    "function decimals() external view returns (uint8 decimalPlaces)",
    "function balanceOf(address owner) external view returns (uint256 balance)",
    "function approve(address spender, uint256 value) external returns (bool success)",
    "function allowance(address owner, address spender) external view returns (uint256 remaining)",
const WETHabi = [
const WETHadd = "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
/************************************************************************************/
/****************** give WETH to users **********************/ 
/************************************************************************************/
await lendingPoolConfig.connect(emergency).setPoolPause(false)
const lendingPoolConfig = await contractGetters.getLendingPoolConfiguratorProxy()
/************************************************************************************/
/****************** unpause lending pools **********************/ 
/************************************************************************************/
const emergency = (await ethers.getSigners())[1]
var signer = await contractGetters.getFirstSigner();
// Load the first signer
    const lendingPool = await contractGetters.getLendingPool();
    const contractHelpers = require('./helpers/contracts-helpers');
    const contractGetters = require('./helpers/contracts-getters');
    // Import getters to instance any Aave contract
    await run("set-DRE")
    // Load the HRE into helpers to access signers
// );
//     18
//     "0x6B175474E89094C44Da98b954EedeAC495271d0F",
//     '',
// const DAI = new Token(
const fs = require('fs');
    // Our code will go here
async function main () {
// scripts/index.js
import { ethers } from "ethers";
npx hardhat run
npx hardhatArguments
npx test
npx run
npm run
npm
npx
hardhat 
hardhatArguments
run
yield
que
;
module
deployments
npx hardhat run --network localhost localhost_tests/test-script.ts
ls
help
npx hardhat run --network localhost localhost_tests/test-script.ts
hardhat run --network localhost localhost_tests/test-script.ts
npx hardhat run --network localhost localhost_tests/test-script.ts
npx run --network localhost localhost_tests/test-script.ts
npx hardhat run --network localhost localhost_tests/test-script.ts
npm hardhat run --network localhost localhost_test/test-script.ts
npx hardhat run --network localhost localhost_test/test-script.ts