/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendingPoolConfiguratorInterface extends ethers.utils.Interface {
  functions: {
    "activateReserve(address,uint64)": FunctionFragment;
    "addNewTrancheWithReserves(tuple[],uint64,address,address)": FunctionFragment;
    "batchInitReserve(tuple[],uint64)": FunctionFragment;
    "configureReserveAsCollateral(address,uint64,uint256,uint256,uint256)": FunctionFragment;
    "deactivateReserve(address,uint64)": FunctionFragment;
    "disableBorrowingOnReserve(address,uint64)": FunctionFragment;
    "disableReserveStableRate(address,uint64)": FunctionFragment;
    "enableBorrowingOnReserve(address,uint64,bool)": FunctionFragment;
    "enableReserveStableRate(address,uint64)": FunctionFragment;
    "freezeReserve(address,uint64)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "setAssetData(address,uint8)": FunctionFragment;
    "setPoolPause(bool,uint64)": FunctionFragment;
    "setReserveFactor(address,uint64,uint256)": FunctionFragment;
    "setReserveInterestRateStrategyAddress(address,uint64,address)": FunctionFragment;
    "unfreezeReserve(address,uint64)": FunctionFragment;
    "updateAToken(tuple,uint64)": FunctionFragment;
    "updateStableDebtToken(tuple,uint64)": FunctionFragment;
    "updateVariableDebtToken(tuple,uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activateReserve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewTrancheWithReserves",
    values: [
      {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchInitReserve",
    values: [
      {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configureReserveAsCollateral",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateReserve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableBorrowingOnReserve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableReserveStableRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableBorrowingOnReserve",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "enableReserveStableRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeReserve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAssetData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPause",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveInterestRateStrategyAddress",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeReserve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAToken",
    values: [
      {
        asset: string;
        trancheId: BigNumberish;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStableDebtToken",
    values: [
      {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVariableDebtToken",
    values: [
      {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewTrancheWithReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchInitReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableBorrowingOnReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableReserveStableRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableBorrowingOnReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableReserveStableRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStableDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVariableDebtToken",
    data: BytesLike
  ): Result;

  events: {
    "ATokenUpgraded(address,address,address)": EventFragment;
    "AssetDataChanged(address,uint8)": EventFragment;
    "BorrowingDisabledOnReserve(address)": EventFragment;
    "BorrowingEnabledOnReserve(address,bool)": EventFragment;
    "CollateralConfigurationChanged(address,uint256,uint256,uint256)": EventFragment;
    "ReserveActivated(address)": EventFragment;
    "ReserveDeactivated(address)": EventFragment;
    "ReserveDecimalsChanged(address,uint256)": EventFragment;
    "ReserveFactorChanged(address,uint256)": EventFragment;
    "ReserveFrozen(address)": EventFragment;
    "ReserveInitialized(address,address,address,address,address)": EventFragment;
    "ReserveInterestRateStrategyChanged(address,address)": EventFragment;
    "ReserveUnfrozen(address)": EventFragment;
    "StableDebtTokenUpgraded(address,address,address)": EventFragment;
    "StableRateDisabledOnReserve(address)": EventFragment;
    "StableRateEnabledOnReserve(address)": EventFragment;
    "VariableDebtTokenUpgraded(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ATokenUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetDataChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowingDisabledOnReserve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowingEnabledOnReserve"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollateralConfigurationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDecimalsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveInterestRateStrategyChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveUnfrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableDebtTokenUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StableRateDisabledOnReserve"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableRateEnabledOnReserve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VariableDebtTokenUpgraded"): EventFragment;
}

export class LendingPoolConfigurator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolConfiguratorInterface;

  functions: {
    activateReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activateReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addNewTrancheWithReserves(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      admin: string,
      emergencyAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addNewTrancheWithReserves(tuple[],uint64,address,address)"(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      admin: string,
      emergencyAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    batchInitReserve(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchInitReserve(tuple[],uint64)"(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    configureReserveAsCollateral(
      asset: string,
      trancheId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "configureReserveAsCollateral(address,uint64,uint256,uint256,uint256)"(
      asset: string,
      trancheId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deactivateReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deactivateReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disableBorrowingOnReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disableBorrowingOnReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disableReserveStableRate(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disableReserveStableRate(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enableBorrowingOnReserve(
      asset: string,
      trancheId: BigNumberish,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableBorrowingOnReserve(address,uint64,bool)"(
      asset: string,
      trancheId: BigNumberish,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enableReserveStableRate(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableReserveStableRate(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    freezeReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "freezeReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAssetData(
      asset: string,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAssetData(address,uint8)"(
      asset: string,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolPause(
      val: boolean,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolPause(bool,uint64)"(
      val: boolean,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveFactor(
      asset: string,
      trancheId: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReserveFactor(address,uint64,uint256)"(
      asset: string,
      trancheId: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      trancheId: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReserveInterestRateStrategyAddress(address,uint64,address)"(
      asset: string,
      trancheId: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unfreezeReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unfreezeReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAToken((address,uint64,address,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStableDebtToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateStableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateVariableDebtToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateVariableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  activateReserve(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activateReserve(address,uint64)"(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addNewTrancheWithReserves(
    input: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      underlyingAssetName: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: BytesLike;
      assetType: BigNumberish;
      collateralCap: BigNumberish;
      hasStrategy: boolean;
      usingGovernanceSetInterestRate: boolean;
      governanceSetInterestRate: BigNumberish;
    }[],
    trancheId: BigNumberish,
    admin: string,
    emergencyAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addNewTrancheWithReserves(tuple[],uint64,address,address)"(
    input: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      underlyingAssetName: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: BytesLike;
      assetType: BigNumberish;
      collateralCap: BigNumberish;
      hasStrategy: boolean;
      usingGovernanceSetInterestRate: boolean;
      governanceSetInterestRate: BigNumberish;
    }[],
    trancheId: BigNumberish,
    admin: string,
    emergencyAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  batchInitReserve(
    input: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      underlyingAssetName: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: BytesLike;
      assetType: BigNumberish;
      collateralCap: BigNumberish;
      hasStrategy: boolean;
      usingGovernanceSetInterestRate: boolean;
      governanceSetInterestRate: BigNumberish;
    }[],
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchInitReserve(tuple[],uint64)"(
    input: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      underlyingAssetName: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: BytesLike;
      assetType: BigNumberish;
      collateralCap: BigNumberish;
      hasStrategy: boolean;
      usingGovernanceSetInterestRate: boolean;
      governanceSetInterestRate: BigNumberish;
    }[],
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  configureReserveAsCollateral(
    asset: string,
    trancheId: BigNumberish,
    ltv: BigNumberish,
    liquidationThreshold: BigNumberish,
    liquidationBonus: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "configureReserveAsCollateral(address,uint64,uint256,uint256,uint256)"(
    asset: string,
    trancheId: BigNumberish,
    ltv: BigNumberish,
    liquidationThreshold: BigNumberish,
    liquidationBonus: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deactivateReserve(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deactivateReserve(address,uint64)"(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disableBorrowingOnReserve(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disableBorrowingOnReserve(address,uint64)"(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disableReserveStableRate(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disableReserveStableRate(address,uint64)"(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enableBorrowingOnReserve(
    asset: string,
    trancheId: BigNumberish,
    stableBorrowRateEnabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableBorrowingOnReserve(address,uint64,bool)"(
    asset: string,
    trancheId: BigNumberish,
    stableBorrowRateEnabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enableReserveStableRate(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableReserveStableRate(address,uint64)"(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  freezeReserve(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "freezeReserve(address,uint64)"(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAssetData(
    asset: string,
    _assetType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAssetData(address,uint8)"(
    asset: string,
    _assetType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolPause(
    val: boolean,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolPause(bool,uint64)"(
    val: boolean,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveFactor(
    asset: string,
    trancheId: BigNumberish,
    reserveFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReserveFactor(address,uint64,uint256)"(
    asset: string,
    trancheId: BigNumberish,
    reserveFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveInterestRateStrategyAddress(
    asset: string,
    trancheId: BigNumberish,
    rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReserveInterestRateStrategyAddress(address,uint64,address)"(
    asset: string,
    trancheId: BigNumberish,
    rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unfreezeReserve(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unfreezeReserve(address,uint64)"(
    asset: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAToken(
    input: {
      asset: string;
      trancheId: BigNumberish;
      treasury: string;
      incentivesController: string;
      name: string;
      symbol: string;
      implementation: string;
      params: BytesLike;
    },
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAToken((address,uint64,address,address,string,string,address,bytes),uint64)"(
    input: {
      asset: string;
      trancheId: BigNumberish;
      treasury: string;
      incentivesController: string;
      name: string;
      symbol: string;
      implementation: string;
      params: BytesLike;
    },
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStableDebtToken(
    input: {
      asset: string;
      trancheId: BigNumberish;
      incentivesController: string;
      name: string;
      symbol: string;
      implementation: string;
      params: BytesLike;
    },
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateStableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
    input: {
      asset: string;
      trancheId: BigNumberish;
      incentivesController: string;
      name: string;
      symbol: string;
      implementation: string;
      params: BytesLike;
    },
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateVariableDebtToken(
    input: {
      asset: string;
      trancheId: BigNumberish;
      incentivesController: string;
      name: string;
      symbol: string;
      implementation: string;
      params: BytesLike;
    },
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateVariableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
    input: {
      asset: string;
      trancheId: BigNumberish;
      incentivesController: string;
      name: string;
      symbol: string;
      implementation: string;
      params: BytesLike;
    },
    trancheID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    activateReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "activateReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addNewTrancheWithReserves(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      admin: string,
      emergencyAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addNewTrancheWithReserves(tuple[],uint64,address,address)"(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      admin: string,
      emergencyAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchInitReserve(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "batchInitReserve(tuple[],uint64)"(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureReserveAsCollateral(
      asset: string,
      trancheId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "configureReserveAsCollateral(address,uint64,uint256,uint256,uint256)"(
      asset: string,
      trancheId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deactivateReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disableBorrowingOnReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "disableBorrowingOnReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disableReserveStableRate(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "disableReserveStableRate(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enableBorrowingOnReserve(
      asset: string,
      trancheId: BigNumberish,
      stableBorrowRateEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "enableBorrowingOnReserve(address,uint64,bool)"(
      asset: string,
      trancheId: BigNumberish,
      stableBorrowRateEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    enableReserveStableRate(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "enableReserveStableRate(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freezeReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "freezeReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(provider: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetData(
      asset: string,
      _assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAssetData(address,uint8)"(
      asset: string,
      _assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolPause(
      val: boolean,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolPause(bool,uint64)"(
      val: boolean,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveFactor(
      asset: string,
      trancheId: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserveFactor(address,uint64,uint256)"(
      asset: string,
      trancheId: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      trancheId: BigNumberish,
      rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserveInterestRateStrategyAddress(address,uint64,address)"(
      asset: string,
      trancheId: BigNumberish,
      rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unfreezeReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAToken((address,uint64,address,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStableDebtToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVariableDebtToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateVariableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ATokenUpgraded(
      asset: string | null,
      proxy: string | null,
      implementation: string | null
    ): EventFilter;

    AssetDataChanged(asset: string | null, _assetType: null): EventFilter;

    BorrowingDisabledOnReserve(asset: string | null): EventFilter;

    BorrowingEnabledOnReserve(
      asset: string | null,
      stableRateEnabled: null
    ): EventFilter;

    CollateralConfigurationChanged(
      asset: string | null,
      ltv: null,
      liquidationThreshold: null,
      liquidationBonus: null
    ): EventFilter;

    ReserveActivated(asset: string | null): EventFilter;

    ReserveDeactivated(asset: string | null): EventFilter;

    ReserveDecimalsChanged(asset: string | null, decimals: null): EventFilter;

    ReserveFactorChanged(asset: string | null, factor: null): EventFilter;

    ReserveFrozen(asset: string | null): EventFilter;

    ReserveInitialized(
      asset: string | null,
      aToken: string | null,
      stableDebtToken: null,
      variableDebtToken: null,
      interestRateStrategyAddress: null
    ): EventFilter;

    ReserveInterestRateStrategyChanged(
      asset: string | null,
      strategy: null
    ): EventFilter;

    ReserveUnfrozen(asset: string | null): EventFilter;

    StableDebtTokenUpgraded(
      asset: string | null,
      proxy: string | null,
      implementation: string | null
    ): EventFilter;

    StableRateDisabledOnReserve(asset: string | null): EventFilter;

    StableRateEnabledOnReserve(asset: string | null): EventFilter;

    VariableDebtTokenUpgraded(
      asset: string | null,
      proxy: string | null,
      implementation: string | null
    ): EventFilter;
  };

  estimateGas: {
    activateReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "activateReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addNewTrancheWithReserves(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      admin: string,
      emergencyAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addNewTrancheWithReserves(tuple[],uint64,address,address)"(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      admin: string,
      emergencyAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    batchInitReserve(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchInitReserve(tuple[],uint64)"(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    configureReserveAsCollateral(
      asset: string,
      trancheId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "configureReserveAsCollateral(address,uint64,uint256,uint256,uint256)"(
      asset: string,
      trancheId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deactivateReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deactivateReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    disableBorrowingOnReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disableBorrowingOnReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    disableReserveStableRate(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disableReserveStableRate(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enableBorrowingOnReserve(
      asset: string,
      trancheId: BigNumberish,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enableBorrowingOnReserve(address,uint64,bool)"(
      asset: string,
      trancheId: BigNumberish,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enableReserveStableRate(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enableReserveStableRate(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    freezeReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "freezeReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(provider: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAssetData(
      asset: string,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAssetData(address,uint8)"(
      asset: string,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolPause(
      val: boolean,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolPause(bool,uint64)"(
      val: boolean,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReserveFactor(
      asset: string,
      trancheId: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReserveFactor(address,uint64,uint256)"(
      asset: string,
      trancheId: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      trancheId: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReserveInterestRateStrategyAddress(address,uint64,address)"(
      asset: string,
      trancheId: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unfreezeReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unfreezeReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAToken((address,uint64,address,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateStableDebtToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateStableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateVariableDebtToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateVariableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activateReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addNewTrancheWithReserves(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      admin: string,
      emergencyAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addNewTrancheWithReserves(tuple[],uint64,address,address)"(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      admin: string,
      emergencyAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    batchInitReserve(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchInitReserve(tuple[],uint64)"(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        underlyingAssetName: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
        assetType: BigNumberish;
        collateralCap: BigNumberish;
        hasStrategy: boolean;
        usingGovernanceSetInterestRate: boolean;
        governanceSetInterestRate: BigNumberish;
      }[],
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    configureReserveAsCollateral(
      asset: string,
      trancheId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "configureReserveAsCollateral(address,uint64,uint256,uint256,uint256)"(
      asset: string,
      trancheId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deactivateReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deactivateReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disableBorrowingOnReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disableBorrowingOnReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disableReserveStableRate(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disableReserveStableRate(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enableBorrowingOnReserve(
      asset: string,
      trancheId: BigNumberish,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableBorrowingOnReserve(address,uint64,bool)"(
      asset: string,
      trancheId: BigNumberish,
      stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enableReserveStableRate(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableReserveStableRate(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    freezeReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "freezeReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAssetData(
      asset: string,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAssetData(address,uint8)"(
      asset: string,
      _assetType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolPause(
      val: boolean,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolPause(bool,uint64)"(
      val: boolean,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      asset: string,
      trancheId: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReserveFactor(address,uint64,uint256)"(
      asset: string,
      trancheId: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      trancheId: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReserveInterestRateStrategyAddress(address,uint64,address)"(
      asset: string,
      trancheId: BigNumberish,
      rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unfreezeReserve(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unfreezeReserve(address,uint64)"(
      asset: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAToken((address,uint64,address,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateStableDebtToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateStableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateVariableDebtToken(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateVariableDebtToken((address,uint64,address,string,string,address,bytes),uint64)"(
      input: {
        asset: string;
        trancheId: BigNumberish;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      trancheID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
