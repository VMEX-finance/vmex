"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function TimeUtils(ethers) {
    const { provider } = ethers;
    const latest = () => provider.getBlock('latest').then(b => b.timestamp);
    const increase = async (sec) => {
        const n = parseInt(`${sec}`);
        if (isNaN(n)) {
            throw Error(`Invalid number of seconds argument: ${sec}`);
        }
        const v = await provider.send('evm_increaseTime', [n]).then(parseInt);
        await provider.send('hardhat_mine', []);
        return v;
    };
    const increaseTo = async (timestamp) => {
        const n = parseInt(`${timestamp}`);
        if (isNaN(n)) {
            throw Error(`Invalid timestamp argument: ${timestamp}`);
        }
        const v = await provider.send('evm_setNextBlockTimestamp', [timestamp]).then(parseInt);
        await provider.send('hardhat_mine', []);
        return v;
    };
    const duration = {
        minutes: (n) => n * 60,
        hours: (n) => n * 60 * 60,
        days: (n) => n * 60 * 60 * 24,
        weeks: (n) => n * 60 * 60 * 24 * 7,
        years: (n) => n * 60 * 60 * 24 * 365,
    };
    return {
        latest,
        increase,
        increaseTo,
        duration,
    };
}
exports.default = TimeUtils;
//# sourceMappingURL=time.js.map