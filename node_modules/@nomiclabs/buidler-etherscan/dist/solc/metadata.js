"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugins_1 = require("@nomiclabs/buidler/plugins");
const pluginContext_1 = require("../pluginContext");
const version_1 = require("./version");
exports.METADATA_LENGTH_SIZE = 2;
// Instances of these errors are not supposed to be seen by the task.
class VersionNotFoundError extends plugins_1.NomicLabsBuidlerPluginError {
    constructor(message) {
        super(pluginContext_1.pluginName, message, undefined, true);
        Object.setPrototypeOf(this, VersionNotFoundError.prototype);
    }
}
exports.VersionNotFoundError = VersionNotFoundError;
class MetadataAbsentError extends plugins_1.NomicLabsBuidlerPluginError {
    constructor(message) {
        super(pluginContext_1.pluginName, message, undefined, true);
        Object.setPrototypeOf(this, MetadataAbsentError.prototype);
    }
}
exports.MetadataAbsentError = MetadataAbsentError;
async function readSolcVersion(bytecode) {
    let solcMetadata;
    try {
        solcMetadata = (await decodeSolcMetadata(bytecode)).solc;
    }
    catch (error) {
        throw new MetadataAbsentError("Could not decode metadata.");
    }
    if (solcMetadata instanceof Buffer) {
        const [major, minor, patch] = solcMetadata;
        return new version_1.SolcVersionNumber(major, minor, patch);
    }
    throw new VersionNotFoundError("Could not find solc version in metadata.");
}
exports.readSolcVersion = readSolcVersion;
async function decodeSolcMetadata(bytecode) {
    const metadataLength = readSolcMetadataLength(bytecode);
    // The metadata and its length are in the last few bytes.
    const metadataPayload = bytecode.slice(-metadataLength - exports.METADATA_LENGTH_SIZE, -exports.METADATA_LENGTH_SIZE);
    const { decodeFirst } = await Promise.resolve().then(() => __importStar(require("cbor")));
    // TODO: throw an error for decoding errors that are returned without being thrown
    // E.g. cbor.decodeFirst(Buffer.from([])) === cbor.Decoder.NOT_FOUND
    return decodeFirst(metadataPayload);
}
exports.decodeSolcMetadata = decodeSolcMetadata;
function readSolcMetadataLength(bytecode) {
    return bytecode.slice(-exports.METADATA_LENGTH_SIZE).readUInt16BE(0);
}
exports.readSolcMetadataLength = readSolcMetadataLength;
//# sourceMappingURL=metadata.js.map