"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiRelayer = exports.RelayClient = exports.RelaySignerApiUrl = void 0;
const defender_base_client_1 = require("defender-base-client");
exports.RelaySignerApiUrl = () => process.env.DEFENDER_RELAY_SIGNER_API_URL || 'https://api.defender.openzeppelin.com/';
class RelayClient extends defender_base_client_1.BaseApiClient {
    getPoolId() {
        return process.env.DEFENDER_RELAY_POOL_ID || 'us-west-2_94f3puJWv';
    }
    getPoolClientId() {
        return process.env.DEFENDER_RELAY_POOL_CLIENT_ID || '40e58hbc7pktmnp9i26hh5nsav';
    }
    getApiUrl() {
        return process.env.DEFENDER_RELAY_API_URL || 'https://defender-api.openzeppelin.com/relayer/';
    }
    async get(relayerId) {
        return this.apiCall(async (api) => {
            return await api.get(`/relayers/${relayerId}`);
        });
    }
    async list() {
        return this.apiCall(async (api) => {
            return await api.get('/relayers/summary');
        });
    }
    async create(relayer) {
        return this.apiCall(async (api) => {
            return await api.post('/relayers', relayer);
        });
    }
    async update(relayerId, relayerUpdateParams) {
        const currentRelayer = await this.get(relayerId);
        if (relayerUpdateParams.policies) {
            const updatedRelayer = await this.updatePolicies(relayerId, {
                ...currentRelayer.policies,
                ...relayerUpdateParams.policies,
            });
            // if policies are the only update, return
            if (Object.keys(relayerUpdateParams).length === 1)
                return updatedRelayer;
        }
        return this.apiCall(async (api) => {
            return await api.put(`/relayers`, {
                ...currentRelayer,
                ...relayerUpdateParams,
            });
        });
    }
    async updatePolicies(relayerId, relayerPolicies) {
        return this.apiCall(async (api) => {
            return await api.put(`/relayers/${relayerId}`, relayerPolicies);
        });
    }
    async createKey(relayerId, stackResourceId) {
        return this.apiCall(async (api) => {
            return await api.post(`/relayers/${relayerId}/keys`, { stackResourceId });
        });
    }
    async listKeys(relayerId) {
        return this.apiCall(async (api) => {
            return await api.get(`/relayers/${relayerId}/keys`);
        });
    }
    async deleteKey(relayerId, keyId) {
        return this.apiCall(async (api) => {
            return await api.delete(`/relayers/${relayerId}/keys/${keyId}`);
        });
    }
}
exports.RelayClient = RelayClient;
class ApiRelayer extends defender_base_client_1.BaseApiClient {
    constructor(params) {
        super(params);
        this.jsonRpcRequestNextId = 1;
    }
    getPoolId() {
        return process.env.DEFENDER_RELAY_SIGNER_POOL_ID || 'us-west-2_iLmIggsiy';
    }
    getPoolClientId() {
        return process.env.DEFENDER_RELAY_SIGNER_POOL_CLIENT_ID || '1bpd19lcr33qvg5cr3oi79rdap';
    }
    getApiUrl() {
        return exports.RelaySignerApiUrl();
    }
    async getRelayer() {
        return this.apiCall(async (api) => {
            return (await api.get('/relayer'));
        });
    }
    async sendTransaction(payload) {
        return this.apiCall(async (api) => {
            return (await api.post('/txs', payload));
        });
    }
    async replaceTransactionById(id, payload) {
        return this.apiCall(async (api) => {
            return (await api.put(`/txs/${id}`, payload));
        });
    }
    async replaceTransactionByNonce(nonce, payload) {
        return this.apiCall(async (api) => {
            return (await api.put(`/txs/${nonce}`, payload));
        });
    }
    async signTypedData(payload) {
        return this.apiCall(async (api) => {
            return (await api.post('/sign-typed-data', payload));
        });
    }
    async sign(payload) {
        return this.apiCall(async (api) => {
            return (await api.post('/sign', payload));
        });
    }
    async query(id) {
        return this.apiCall(async (api) => {
            return (await api.get(`txs/${id}`));
        });
    }
    async list(criteria) {
        return this.apiCall(async (api) => {
            return (await api.get(`txs`, { params: criteria !== null && criteria !== void 0 ? criteria : {} }));
        });
    }
    async call(method, params) {
        return this.apiCall(async (api) => {
            return (await api.post(`/relayer/jsonrpc`, {
                method,
                params,
                jsonrpc: '2.0',
                id: this.jsonRpcRequestNextId++,
            }));
        });
    }
}
exports.ApiRelayer = ApiRelayer;
