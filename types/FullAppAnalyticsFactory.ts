/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { FullAppAnalytics } from "./FullAppAnalytics";

export class FullAppAnalyticsFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    pool: string,
    user: string,
    overrides?: Overrides
  ): Promise<FullAppAnalytics> {
    return super.deploy(
      pool,
      user,
      overrides || {}
    ) as Promise<FullAppAnalytics>;
  }
  getDeployTransaction(
    pool: string,
    user: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(pool, user, overrides || {});
  }
  attach(address: string): FullAppAnalytics {
    return super.attach(address) as FullAppAnalytics;
  }
  connect(signer: Signer): FullAppAnalyticsFactory {
    return super.connect(signer) as FullAppAnalyticsFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FullAppAnalytics {
    return new Contract(address, _abi, signerOrProvider) as FullAppAnalytics;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getType",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161024338038061024383398101604081905261002f91610126565b60008054604051632c360a2160e11b81526001600160a01b039091169063586c144290610060908690600401610218565b60006040518083038186803b15801561007857600080fd5b505afa15801561008c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100b49190810190610158565b6000815181106100d457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816040516020016100f19190610218565b6040516020818303038152906040529050805181602001f35b80516001600160a01b038116811461012157600080fd5b919050565b60008060408385031215610138578182fd5b6101418361010a565b915061014f6020840161010a565b90509250929050565b6000602080838503121561016a578182fd5b82516001600160401b0380821115610180578384fd5b818501915085601f830112610193578384fd5b8151818111156101a5576101a561022c565b838102604051858282010181811085821117156101c4576101c461022c565b604052828152858101935084860182860187018a10156101e2578788fd5b8795505b8386101561020b576101f78161010a565b8552600195909501949386019386016101e6565b5098975050505050505050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fdfe";
