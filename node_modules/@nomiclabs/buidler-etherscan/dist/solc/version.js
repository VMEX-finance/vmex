"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugins_1 = require("@nomiclabs/buidler/plugins");
const semver_1 = __importDefault(require("semver"));
const pluginContext_1 = require("../pluginContext");
const metadata_1 = require("./metadata");
const COMPILERS_LIST_URL = "https://raw.githubusercontent.com/ethereum/solc-bin/gh-pages/bin/list.json";
class SolcVersionNumber {
    constructor(major, minor, patch) {
        this.major = major;
        this.minor = minor;
        this.patch = patch;
    }
    async getLongVersion() {
        const shortVersion = `${this.major}.${this.minor}.${this.patch}`;
        const versions = await getVersions();
        const fullVersion = versions.releases[shortVersion];
        if (fullVersion === undefined || fullVersion === "") {
            throw new plugins_1.NomicLabsBuidlerPluginError(pluginContext_1.pluginName, "Given solc version doesn't exist");
        }
        return fullVersion.replace(/(soljson-)(.*)(.js)/, "$2");
    }
    toString() {
        return `${this.major}.${this.minor}.${this.patch}`;
    }
}
exports.SolcVersionNumber = SolcVersionNumber;
var InferralType;
(function (InferralType) {
    InferralType[InferralType["EXACT"] = 0] = "EXACT";
    InferralType[InferralType["METADATA_PRESENT_VERSION_ABSENT"] = 1] = "METADATA_PRESENT_VERSION_ABSENT";
    InferralType[InferralType["METADATA_ABSENT"] = 2] = "METADATA_ABSENT";
})(InferralType = exports.InferralType || (exports.InferralType = {}));
function getVersionNumber(shortVersion) {
    const [major, minor, patch] = shortVersion
        .split(".", 3)
        .map((value) => parseInt(value, 10));
    return new SolcVersionNumber(major, minor, patch);
}
exports.getVersionNumber = getVersionNumber;
async function inferSolcVersion(bytecode) {
    let solcVersionMetadata;
    try {
        solcVersionMetadata = await metadata_1.readSolcVersion(bytecode);
    }
    catch (error) {
        // We want to provide our best inference here.
        // We can infer that some solidity compiler releases couldn't have produced this bytecode.
        // Solc v0.4.7 was the first compiler to introduce metadata into the generated bytecode.
        // See https://solidity.readthedocs.io/en/v0.4.7/miscellaneous.html#contract-metadata
        // Solc v0.4.26, the last release for the v0.4 series, does not feature the compiler version in its emitted metadata.
        // See https://solidity.readthedocs.io/en/v0.4.26/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
        // Solc v0.5.9 was the first compiler to introduce its version into the metadata.
        // See https://solidity.readthedocs.io/en/v0.5.9/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
        // Solc v0.6.0 features compiler version metadata.
        // See https://solidity.readthedocs.io/en/v0.6.0/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
        if (error instanceof metadata_1.VersionNotFoundError) {
            // The embedded metadata was successfully decoded but there was no solc version in it.
            const range = {
                isIncluded(version) {
                    return semver_1.default.satisfies(version.toString(), this.range);
                },
                range: "0.4.7 - 0.5.8",
                inferralType: InferralType.METADATA_PRESENT_VERSION_ABSENT,
                toString() {
                    return this.range.toString();
                },
            };
            return range;
        }
        if (error instanceof metadata_1.MetadataAbsentError) {
            // The decoding failed. Unfortunately, our only option is to assume that this bytecode was emitted by an old version.
            const range = {
                isIncluded(version) {
                    return semver_1.default.satisfies(version.toString(), this.range);
                },
                range: "<0.4.7",
                inferralType: InferralType.METADATA_ABSENT,
                toString() {
                    return this.range.toString();
                },
            };
            return range;
        }
        // Should be unreachable.
        throw error;
    }
    return {
        isIncluded: (version) => {
            return (version.major === solcVersionMetadata.major &&
                version.minor === solcVersionMetadata.minor &&
                version.patch === solcVersionMetadata.patch);
        },
        inferralType: InferralType.EXACT,
        toString: () => {
            return `${solcVersionMetadata.major}.${solcVersionMetadata.minor}.${solcVersionMetadata.patch}`;
        },
    };
}
exports.inferSolcVersion = inferSolcVersion;
async function getVersions() {
    try {
        const { default: fetch } = await Promise.resolve().then(() => __importStar(require("node-fetch")));
        // It would be better to query an etherscan API to get this list but there's no such API yet.
        const compilersURL = new URL(COMPILERS_LIST_URL);
        const response = await fetch(compilersURL);
        if (!response.ok) {
            const responseText = await response.text();
            throw new plugins_1.NomicLabsBuidlerPluginError(pluginContext_1.pluginName, `HTTP response is not ok. Status code: ${response.status} Response text: ${responseText}`);
        }
        return response.json();
    }
    catch (error) {
        throw new plugins_1.NomicLabsBuidlerPluginError(pluginContext_1.pluginName, `Failed to obtain list of solc versions. Reason: ${error.message}`, error);
    }
}
exports.getVersions = getVersions;
//# sourceMappingURL=version.js.map