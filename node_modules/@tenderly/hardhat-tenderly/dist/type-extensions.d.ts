import "hardhat/types/config";
import "hardhat/types/runtime";
import { TenderlyConfig } from "./tenderly/types";
import { TenderlyNetwork } from "./TenderlyNetwork";
declare module "hardhat/types/runtime" {
    interface HardhatRuntimeEnvironment {
        tenderly: {
            verify: (...contracts: any[]) => Promise<void>;
            push: (...contracts: any[]) => Promise<void>;
            persistArtifacts: (...contracts: any[]) => Promise<void>;
            network: () => TenderlyNetwork;
        };
        tenderlyNetwork: {
            send: (request: {
                method: string;
                params?: any[];
            }, callback: (error: any, response: any) => void) => void;
            verify: (...contracts: any[]) => Promise<void>;
            resetFork: () => string | undefined;
            getHead: () => string | undefined;
            setHead: (head: string | undefined) => void;
            getFork: () => string | undefined;
            setFork: (fork: string | undefined) => void;
            initializeFork: () => Promise<void>;
        };
    }
}
declare module "hardhat/types/config" {
    interface HardhatUserConfig {
        tenderly?: TenderlyConfig;
    }
    interface HardhatConfig {
        tenderly: TenderlyConfig;
    }
}
//# sourceMappingURL=type-extensions.d.ts.map