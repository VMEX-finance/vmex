/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICurveVotingEscrowInterface extends ethers.utils.Interface {
  functions: {
    "create_lock(uint256,uint256)": FunctionFragment;
    "increase_amount(uint256)": FunctionFragment;
    "increase_unlock_time(uint256)": FunctionFragment;
    "locked(address)": FunctionFragment;
    "locked__end(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_unlock_time",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "locked", values: [string]): string;
  encodeFunctionData(functionFragment: "locked__end", values: [string]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "locked__end",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class ICurveVotingEscrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICurveVotingEscrowInterface;

  functions: {
    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increase_amount(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increase_amount(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increase_unlock_time(uint256)"(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "locked(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    locked__end(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "locked__end(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  create_lock(
    _value: BigNumberish,
    _unlock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create_lock(uint256,uint256)"(
    _value: BigNumberish,
    _unlock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increase_amount(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increase_amount(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increase_unlock_time(
    _unlock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increase_unlock_time(uint256)"(
    _unlock_time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  locked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    end: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "locked(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    end: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  locked__end(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "locked__end(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_amount(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increase_amount(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increase_unlock_time(uint256)"(
      _unlock_time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "locked(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      end: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    locked__end(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "locked__end(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increase_amount(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increase_amount(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increase_unlock_time(uint256)"(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    locked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "locked(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked__end(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "locked__end(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    create_lock(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create_lock(uint256,uint256)"(
      _value: BigNumberish,
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increase_amount(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increase_amount(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increase_unlock_time(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increase_unlock_time(uint256)"(
      _unlock_time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    locked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked__end(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked__end(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
