/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AnalyticsUtilities } from "./AnalyticsUtilities";

export class AnalyticsUtilitiesFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<AnalyticsUtilities> {
    return super.deploy(overrides || {}) as Promise<AnalyticsUtilities>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AnalyticsUtilities {
    return super.attach(address) as AnalyticsUtilities;
  }
  connect(signer: Signer): AnalyticsUtilitiesFactory {
    return super.connect(signer) as AnalyticsUtilitiesFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnalyticsUtilities {
    return new Contract(address, _abi, signerOrProvider) as AnalyticsUtilities;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracle",
        type: "address",
      },
    ],
    name: "getTokenOraclePrice",
    outputs: [
      {
        internalType: "uint256[22]",
        name: "",
        type: "uint256[22]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6105cc61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80631289f5cd14610045578063f7888aec1461006e575b600080fd5b6100586100533660046104b7565b61008e565b604051610065919061052f565b60405180910390f35b61008161007c3660046104d1565b6101a0565b6040516100659190610561565b610096610481565b60006100a0610226565b90506100aa610481565b60005b60168160ff16101561019657846001600160a01b031663b3596f07848360ff16601681106100eb57634e487b7160e01b600052603260045260246000fd5b60200201516040518263ffffffff1660e01b815260040161010c919061051b565b60206040518083038186803b15801561012457600080fd5b505afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c9190610503565b828260ff166016811061017f57634e487b7160e01b600052603260045260246000fd5b60200201528061018e8161056a565b9150506100ad565b509150505b919050565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906101cf90869060040161051b565b60206040518083038186803b1580156101e757600080fd5b505afa1580156101fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021f9190610503565b9392505050565b61022e610481565b50604080516102c081018252737fc66500c84a76ad7e9c93437bfc5ac33e2ddae98152730d8775f648430679a709e98d2b0cb6250d2887ef6020820152734fabb145d64652a948d72533023f6e7a623c7c5391810191909152736b175474e89094c44da98b954eedeac495271d0f606082015273f629cbd94d3791c9250152bd8dfbdf380e2a3b9c608082015273dd974d5c2e2928dea5f71b9825b8b646686bd20060a082015273514910771af9ca656af840dff83e8264ecf986ca60c0820152730f5d2fb29fb7d3cfee444a200298f468908cc94260e0820152739f8f72aa9304c8b593d555f12ef6589cc3a579a261010082015273408e41876cccdc0f92210600ef50372656052a3861012082015273c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f6101408201527357ab1ec28d129707052df4df418d58a2d46d5f516101608201526e085d4780b73119b644ae5ecd22b376610180820152731f9840a85d5af5bf1d1762f925bdaddc4201f9846101a082015273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486101c082015273dac17f958d2ee523a2206206994597c13d831ec76101e0820152732260fac5e5542a773aa44fbcfedf7c193bc2c59961020082015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610220820152730bc529c00c6401aef6d220be8c6ea1667f6ad93e61024082015273e41d2489571d322189246dafa5ebde1f4699f498610260820152738798249c2e607446efb7ad49ec89dd1865ff427261028082015273c4ad29ba4b3c580e6d59105fff484999997675ff6102a082015290565b604051806102c001604052806016906020820280368337509192915050565b80356001600160a01b038116811461019b57600080fd5b6000602082840312156104c8578081fd5b61021f826104a0565b600080604083850312156104e3578081fd5b6104ec836104a0565b91506104fa602084016104a0565b90509250929050565b600060208284031215610514578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6102c08101818360005b6016811015610558578151835260209283019290910190600101610539565b50505092915050565b90815260200190565b600060ff821660ff81141561058d57634e487b7160e01b82526011600452602482fd5b6001019291505056fea2646970667358221220fd29764e959d293921187aa388256bc8f37f47484defa160eeda58a3a217320064736f6c63430008000033";
