/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendingPoolAddressesProviderInterface extends ethers.utils.Interface {
  functions: {
    "addEmergencyAdmin(address,uint64)": FunctionFragment;
    "addPoolAdmin(address,uint64)": FunctionFragment;
    "addWhitelistedAddress(address,bool)": FunctionFragment;
    "getATokenAndRatesHelper()": FunctionFragment;
    "getAavePriceOracle()": FunctionFragment;
    "getAddress(bytes32)": FunctionFragment;
    "getAddressTranche(bytes32,uint64)": FunctionFragment;
    "getCurvePriceOracle()": FunctionFragment;
    "getCurvePriceOracleWrapper()": FunctionFragment;
    "getEmergencyAdmin(uint64)": FunctionFragment;
    "getGlobalAdmin()": FunctionFragment;
    "getLendingPool()": FunctionFragment;
    "getLendingPoolCollateralManager()": FunctionFragment;
    "getLendingPoolConfigurator()": FunctionFragment;
    "getLendingRateOracle()": FunctionFragment;
    "getMarketId()": FunctionFragment;
    "getPoolAdmin(uint64)": FunctionFragment;
    "getPriceOracle(uint8)": FunctionFragment;
    "isWhitelistedAddress(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setATokenAndRatesHelper(address)": FunctionFragment;
    "setAavePriceOracle(address)": FunctionFragment;
    "setAddress(bytes32,address)": FunctionFragment;
    "setAddressAsProxy(bytes32,address)": FunctionFragment;
    "setCurvePriceOracle(address)": FunctionFragment;
    "setCurvePriceOracleWrapper(address)": FunctionFragment;
    "setEmergencyAdmin(address,uint64)": FunctionFragment;
    "setGlobalAdmin(address)": FunctionFragment;
    "setLendingPoolCollateralManager(address)": FunctionFragment;
    "setLendingPoolConfiguratorImpl(address)": FunctionFragment;
    "setLendingPoolImpl(address)": FunctionFragment;
    "setLendingRateOracle(address)": FunctionFragment;
    "setMarketId(string)": FunctionFragment;
    "setPermissionlessTranches(bool)": FunctionFragment;
    "setPoolAdmin(address,uint64)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addEmergencyAdmin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolAdmin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getATokenAndRatesHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAavePriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressTranche",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurvePriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurvePriceOracleWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolCollateralManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingRateOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setATokenAndRatesHelper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAavePriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressAsProxy",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurvePriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurvePriceOracleWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyAdmin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolCollateralManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolConfiguratorImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingRateOracle",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMarketId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPermissionlessTranches",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolAdmin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getATokenAndRatesHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAavePriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurvePriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurvePriceOracleWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolCollateralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setATokenAndRatesHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavePriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddressAsProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurvePriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurvePriceOracleWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolCollateralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolConfiguratorImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionlessTranches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ATokensAndRatesHelperUpdated(address)": EventFragment;
    "AddressSet(bytes32,address,bool)": EventFragment;
    "ConfigurationAdminUpdated(address,uint64)": EventFragment;
    "CurveAddressProviderUpdated(address)": EventFragment;
    "CurvePriceOracleUpdated(address)": EventFragment;
    "CurvePriceOracleWrapperUpdated(address)": EventFragment;
    "EmergencyAdminUpdated(address,uint64)": EventFragment;
    "LendingPoolCollateralManagerUpdated(address)": EventFragment;
    "LendingPoolConfiguratorUpdated(address)": EventFragment;
    "LendingPoolUpdated(address)": EventFragment;
    "LendingRateOracleUpdated(address)": EventFragment;
    "MarketIdSet(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceOracleUpdated(address)": EventFragment;
    "ProxyCreated(bytes32,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ATokensAndRatesHelperUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigurationAdminUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CurveAddressProviderUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurvePriceOracleUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CurvePriceOracleWrapperUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyAdminUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LendingPoolCollateralManagerUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LendingPoolConfiguratorUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendingPoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendingRateOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketIdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyCreated"): EventFragment;
}

export class LendingPoolAddressesProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolAddressesProviderInterface;

  functions: {
    addEmergencyAdmin(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addEmergencyAdmin(address,uint64)"(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPoolAdmin(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPoolAdmin(address,uint64)"(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addWhitelistedAddress(
      ad: string,
      _val: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addWhitelistedAddress(address,bool)"(
      ad: string,
      _val: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getATokenAndRatesHelper(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getATokenAndRatesHelper()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getAavePriceOracle(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getAavePriceOracle()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getAddress(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAddress(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getAddressTranche(
      id: BytesLike,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAddressTranche(bytes32,uint64)"(
      id: BytesLike,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getCurvePriceOracle(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getCurvePriceOracle()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getCurvePriceOracleWrapper(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getCurvePriceOracleWrapper()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getEmergencyAdmin(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getEmergencyAdmin(uint64)"(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getGlobalAdmin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getGlobalAdmin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getLendingPool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getLendingPool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getLendingPoolCollateralManager(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getLendingPoolCollateralManager()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getLendingPoolConfigurator(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getLendingPoolConfigurator()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getLendingRateOracle(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getLendingRateOracle()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getMarketId(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getMarketId()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPoolAdmin(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getPoolAdmin(uint64)"(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPriceOracle(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getPriceOracle(uint8)"(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isWhitelistedAddress(
      ad: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isWhitelistedAddress(address)"(
      ad: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setATokenAndRatesHelper(
      newAdd: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setATokenAndRatesHelper(address)"(
      newAdd: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAavePriceOracle(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAavePriceOracle(address)"(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAddress(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAddress(bytes32,address)"(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAddressAsProxy(
      id: BytesLike,
      implementationAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAddressAsProxy(bytes32,address)"(
      id: BytesLike,
      implementationAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCurvePriceOracle(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCurvePriceOracle(address)"(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCurvePriceOracleWrapper(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCurvePriceOracleWrapper(address)"(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEmergencyAdmin(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEmergencyAdmin(address,uint64)"(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGlobalAdmin(
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGlobalAdmin(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendingPoolCollateralManager(
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendingPoolCollateralManager(address)"(
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendingPoolConfiguratorImpl(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendingPoolConfiguratorImpl(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendingPoolImpl(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendingPoolImpl(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLendingRateOracle(
      lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendingRateOracle(address)"(
      lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMarketId(
      marketId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMarketId(string)"(
      marketId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPermissionlessTranches(
      _val: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPermissionlessTranches(bool)"(
      _val: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolAdmin(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolAdmin(address,uint64)"(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addEmergencyAdmin(
    emergencyAdmin: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addEmergencyAdmin(address,uint64)"(
    emergencyAdmin: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPoolAdmin(
    admin: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPoolAdmin(address,uint64)"(
    admin: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addWhitelistedAddress(
    ad: string,
    _val: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addWhitelistedAddress(address,bool)"(
    ad: string,
    _val: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getATokenAndRatesHelper(overrides?: CallOverrides): Promise<string>;

  "getATokenAndRatesHelper()"(overrides?: CallOverrides): Promise<string>;

  getAavePriceOracle(overrides?: CallOverrides): Promise<string>;

  "getAavePriceOracle()"(overrides?: CallOverrides): Promise<string>;

  getAddress(id: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getAddress(bytes32)"(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddressTranche(
    id: BytesLike,
    trancheId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAddressTranche(bytes32,uint64)"(
    id: BytesLike,
    trancheId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurvePriceOracle(overrides?: CallOverrides): Promise<string>;

  "getCurvePriceOracle()"(overrides?: CallOverrides): Promise<string>;

  getCurvePriceOracleWrapper(overrides?: CallOverrides): Promise<string>;

  "getCurvePriceOracleWrapper()"(overrides?: CallOverrides): Promise<string>;

  getEmergencyAdmin(
    trancheId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEmergencyAdmin(uint64)"(
    trancheId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getGlobalAdmin(overrides?: CallOverrides): Promise<string>;

  "getGlobalAdmin()"(overrides?: CallOverrides): Promise<string>;

  getLendingPool(overrides?: CallOverrides): Promise<string>;

  "getLendingPool()"(overrides?: CallOverrides): Promise<string>;

  getLendingPoolCollateralManager(overrides?: CallOverrides): Promise<string>;

  "getLendingPoolCollateralManager()"(
    overrides?: CallOverrides
  ): Promise<string>;

  getLendingPoolConfigurator(overrides?: CallOverrides): Promise<string>;

  "getLendingPoolConfigurator()"(overrides?: CallOverrides): Promise<string>;

  getLendingRateOracle(overrides?: CallOverrides): Promise<string>;

  "getLendingRateOracle()"(overrides?: CallOverrides): Promise<string>;

  getMarketId(overrides?: CallOverrides): Promise<string>;

  "getMarketId()"(overrides?: CallOverrides): Promise<string>;

  getPoolAdmin(
    trancheId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPoolAdmin(uint64)"(
    trancheId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPriceOracle(
    assetType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPriceOracle(uint8)"(
    assetType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isWhitelistedAddress(ad: string, overrides?: CallOverrides): Promise<boolean>;

  "isWhitelistedAddress(address)"(
    ad: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setATokenAndRatesHelper(
    newAdd: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setATokenAndRatesHelper(address)"(
    newAdd: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAavePriceOracle(
    priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAavePriceOracle(address)"(
    priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAddress(
    id: BytesLike,
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAddress(bytes32,address)"(
    id: BytesLike,
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAddressAsProxy(
    id: BytesLike,
    implementationAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAddressAsProxy(bytes32,address)"(
    id: BytesLike,
    implementationAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCurvePriceOracle(
    priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCurvePriceOracle(address)"(
    priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCurvePriceOracleWrapper(
    priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCurvePriceOracleWrapper(address)"(
    priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEmergencyAdmin(
    emergencyAdmin: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEmergencyAdmin(address,uint64)"(
    emergencyAdmin: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGlobalAdmin(
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGlobalAdmin(address)"(
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendingPoolCollateralManager(
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendingPoolCollateralManager(address)"(
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendingPoolConfiguratorImpl(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendingPoolConfiguratorImpl(address)"(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendingPoolImpl(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendingPoolImpl(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLendingRateOracle(
    lendingRateOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendingRateOracle(address)"(
    lendingRateOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMarketId(
    marketId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMarketId(string)"(
    marketId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPermissionlessTranches(
    _val: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPermissionlessTranches(bool)"(
    _val: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolAdmin(
    admin: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolAdmin(address,uint64)"(
    admin: string,
    trancheId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addEmergencyAdmin(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addEmergencyAdmin(address,uint64)"(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addPoolAdmin(
      admin: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPoolAdmin(address,uint64)"(
      admin: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhitelistedAddress(
      ad: string,
      _val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addWhitelistedAddress(address,bool)"(
      ad: string,
      _val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getATokenAndRatesHelper(overrides?: CallOverrides): Promise<string>;

    "getATokenAndRatesHelper()"(overrides?: CallOverrides): Promise<string>;

    getAavePriceOracle(overrides?: CallOverrides): Promise<string>;

    "getAavePriceOracle()"(overrides?: CallOverrides): Promise<string>;

    getAddress(id: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getAddress(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddressTranche(
      id: BytesLike,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAddressTranche(bytes32,uint64)"(
      id: BytesLike,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurvePriceOracle(overrides?: CallOverrides): Promise<string>;

    "getCurvePriceOracle()"(overrides?: CallOverrides): Promise<string>;

    getCurvePriceOracleWrapper(overrides?: CallOverrides): Promise<string>;

    "getCurvePriceOracleWrapper()"(overrides?: CallOverrides): Promise<string>;

    getEmergencyAdmin(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEmergencyAdmin(uint64)"(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getGlobalAdmin(overrides?: CallOverrides): Promise<string>;

    "getGlobalAdmin()"(overrides?: CallOverrides): Promise<string>;

    getLendingPool(overrides?: CallOverrides): Promise<string>;

    "getLendingPool()"(overrides?: CallOverrides): Promise<string>;

    getLendingPoolCollateralManager(overrides?: CallOverrides): Promise<string>;

    "getLendingPoolCollateralManager()"(
      overrides?: CallOverrides
    ): Promise<string>;

    getLendingPoolConfigurator(overrides?: CallOverrides): Promise<string>;

    "getLendingPoolConfigurator()"(overrides?: CallOverrides): Promise<string>;

    getLendingRateOracle(overrides?: CallOverrides): Promise<string>;

    "getLendingRateOracle()"(overrides?: CallOverrides): Promise<string>;

    getMarketId(overrides?: CallOverrides): Promise<string>;

    "getMarketId()"(overrides?: CallOverrides): Promise<string>;

    getPoolAdmin(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPoolAdmin(uint64)"(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPriceOracle(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPriceOracle(uint8)"(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isWhitelistedAddress(
      ad: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelistedAddress(address)"(
      ad: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setATokenAndRatesHelper(
      newAdd: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setATokenAndRatesHelper(address)"(
      newAdd: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAavePriceOracle(
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAavePriceOracle(address)"(
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddress(
      id: BytesLike,
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAddress(bytes32,address)"(
      id: BytesLike,
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddressAsProxy(
      id: BytesLike,
      implementationAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAddressAsProxy(bytes32,address)"(
      id: BytesLike,
      implementationAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurvePriceOracle(
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurvePriceOracle(address)"(
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurvePriceOracleWrapper(
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurvePriceOracleWrapper(address)"(
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyAdmin(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEmergencyAdmin(address,uint64)"(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalAdmin(admin: string, overrides?: CallOverrides): Promise<void>;

    "setGlobalAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolCollateralManager(
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendingPoolCollateralManager(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolConfiguratorImpl(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendingPoolConfiguratorImpl(address)"(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolImpl(pool: string, overrides?: CallOverrides): Promise<void>;

    "setLendingPoolImpl(address)"(
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingRateOracle(
      lendingRateOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendingRateOracle(address)"(
      lendingRateOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketId(marketId: string, overrides?: CallOverrides): Promise<void>;

    "setMarketId(string)"(
      marketId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionlessTranches(
      _val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPermissionlessTranches(bool)"(
      _val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolAdmin(
      admin: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolAdmin(address,uint64)"(
      admin: string,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ATokensAndRatesHelperUpdated(newAddress: string | null): EventFilter;

    AddressSet(
      id: null,
      newAddress: string | null,
      hasProxy: null
    ): EventFilter;

    ConfigurationAdminUpdated(
      newAddress: string | null,
      trancheId: null
    ): EventFilter;

    CurveAddressProviderUpdated(newAddress: string | null): EventFilter;

    CurvePriceOracleUpdated(newAddress: string | null): EventFilter;

    CurvePriceOracleWrapperUpdated(newAddress: string | null): EventFilter;

    EmergencyAdminUpdated(
      newAddress: string | null,
      trancheId: null
    ): EventFilter;

    LendingPoolCollateralManagerUpdated(newAddress: string | null): EventFilter;

    LendingPoolConfiguratorUpdated(newAddress: string | null): EventFilter;

    LendingPoolUpdated(newAddress: string | null): EventFilter;

    LendingRateOracleUpdated(newAddress: string | null): EventFilter;

    MarketIdSet(newMarketId: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PriceOracleUpdated(newAddress: string | null): EventFilter;

    ProxyCreated(id: null, newAddress: string | null): EventFilter;
  };

  estimateGas: {
    addEmergencyAdmin(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addEmergencyAdmin(address,uint64)"(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPoolAdmin(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPoolAdmin(address,uint64)"(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addWhitelistedAddress(
      ad: string,
      _val: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addWhitelistedAddress(address,bool)"(
      ad: string,
      _val: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getATokenAndRatesHelper(overrides?: CallOverrides): Promise<BigNumber>;

    "getATokenAndRatesHelper()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAavePriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getAavePriceOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAddress(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getAddress(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressTranche(
      id: BytesLike,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAddressTranche(bytes32,uint64)"(
      id: BytesLike,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurvePriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurvePriceOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurvePriceOracleWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurvePriceOracleWrapper()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmergencyAdmin(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEmergencyAdmin(uint64)"(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getGlobalAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    "getLendingPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingPoolCollateralManager(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLendingPoolCollateralManager()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLendingPoolConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    "getLendingPoolConfigurator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLendingRateOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getLendingRateOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketId(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAdmin(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolAdmin(uint64)"(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceOracle(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceOracle(uint8)"(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedAddress(
      ad: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelistedAddress(address)"(
      ad: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setATokenAndRatesHelper(
      newAdd: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setATokenAndRatesHelper(address)"(
      newAdd: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAavePriceOracle(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAavePriceOracle(address)"(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAddress(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAddress(bytes32,address)"(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAddressAsProxy(
      id: BytesLike,
      implementationAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAddressAsProxy(bytes32,address)"(
      id: BytesLike,
      implementationAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCurvePriceOracle(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCurvePriceOracle(address)"(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCurvePriceOracleWrapper(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCurvePriceOracleWrapper(address)"(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEmergencyAdmin(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEmergencyAdmin(address,uint64)"(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGlobalAdmin(admin: string, overrides?: Overrides): Promise<BigNumber>;

    "setGlobalAdmin(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendingPoolCollateralManager(
      manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendingPoolCollateralManager(address)"(
      manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendingPoolConfiguratorImpl(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendingPoolConfiguratorImpl(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendingPoolImpl(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "setLendingPoolImpl(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLendingRateOracle(
      lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendingRateOracle(address)"(
      lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMarketId(marketId: string, overrides?: Overrides): Promise<BigNumber>;

    "setMarketId(string)"(
      marketId: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPermissionlessTranches(
      _val: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPermissionlessTranches(bool)"(
      _val: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolAdmin(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolAdmin(address,uint64)"(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEmergencyAdmin(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addEmergencyAdmin(address,uint64)"(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPoolAdmin(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPoolAdmin(address,uint64)"(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addWhitelistedAddress(
      ad: string,
      _val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addWhitelistedAddress(address,bool)"(
      ad: string,
      _val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getATokenAndRatesHelper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getATokenAndRatesHelper()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAavePriceOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAavePriceOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddress(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddress(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressTranche(
      id: BytesLike,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddressTranche(bytes32,uint64)"(
      id: BytesLike,
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurvePriceOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurvePriceOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurvePriceOracleWrapper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurvePriceOracleWrapper()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmergencyAdmin(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEmergencyAdmin(uint64)"(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGlobalAdmin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLendingPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingPoolCollateralManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLendingPoolCollateralManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingPoolConfigurator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLendingPoolConfigurator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingRateOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLendingRateOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMarketId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolAdmin(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolAdmin(uint64)"(
      trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOracle(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceOracle(uint8)"(
      assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedAddress(
      ad: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelistedAddress(address)"(
      ad: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setATokenAndRatesHelper(
      newAdd: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setATokenAndRatesHelper(address)"(
      newAdd: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAavePriceOracle(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAavePriceOracle(address)"(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAddress(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAddress(bytes32,address)"(
      id: BytesLike,
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAddressAsProxy(
      id: BytesLike,
      implementationAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAddressAsProxy(bytes32,address)"(
      id: BytesLike,
      implementationAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCurvePriceOracle(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCurvePriceOracle(address)"(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCurvePriceOracleWrapper(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCurvePriceOracleWrapper(address)"(
      priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEmergencyAdmin(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEmergencyAdmin(address,uint64)"(
      emergencyAdmin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGlobalAdmin(
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGlobalAdmin(address)"(
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendingPoolCollateralManager(
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendingPoolCollateralManager(address)"(
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendingPoolConfiguratorImpl(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendingPoolConfiguratorImpl(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendingPoolImpl(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendingPoolImpl(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLendingRateOracle(
      lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendingRateOracle(address)"(
      lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMarketId(
      marketId: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMarketId(string)"(
      marketId: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPermissionlessTranches(
      _val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPermissionlessTranches(bool)"(
      _val: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolAdmin(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolAdmin(address,uint64)"(
      admin: string,
      trancheId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
