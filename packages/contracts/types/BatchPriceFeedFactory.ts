/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { BatchPriceFeed } from "./BatchPriceFeed";

export class BatchPriceFeedFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_tokens: string[][], overrides?: Overrides): Promise<BatchPriceFeed> {
    return super.deploy(_tokens, overrides || {}) as Promise<BatchPriceFeed>;
  }
  getDeployTransaction(
    _tokens: string[][],
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_tokens, overrides || {});
  }
  attach(address: string): BatchPriceFeed {
    return super.attach(address) as BatchPriceFeed;
  }
  connect(signer: Signer): BatchPriceFeedFactory {
    return super.connect(signer) as BatchPriceFeedFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchPriceFeed {
    return new Contract(address, _abi, signerOrProvider) as BatchPriceFeed;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address[][]",
        name: "_tokens",
        type: "address[][]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161052c38038061052c83398101604081905261002f91610324565b6000806100458361007760201b6100091760201c565b915091506000828260405160200161005e929190610474565b6040516020818303038152906040529050805181602001f35b606080600083516001600160401b038111156100a357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156100cc578160200160208202803683370190505b509050600084516001600160401b038111156100f857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610121578160200160208202803683370190505b50905060005b85518110156103195785818151811061015057634e487b7160e01b600052603260045260246000fd5b602002602001015160008151811061017857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b857600080fd5b505afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f09190610422565b83828151811061021057634e487b7160e01b600052603260045260246000fd5b60200260200101818152505085818151811061023c57634e487b7160e01b600052603260045260246000fd5b602002602001015160018151811061026457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190610422565b8282815181106102fc57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610311816104ee565b915050610127565b509092509050915091565b60006020808385031215610336578182fd5b82516001600160401b0381111561034b578283fd5b8301601f8101851361035b578283fd5b805161036e610369826104cb565b6104a2565b81815283810190838501865b8481101561041457815186018a603f820112610394578889fd5b8781015160406103a6610369836104cb565b808382528b820191508285018f848e870288010111156103c4578d8efd5b8d95505b848610156103fd57805193506001600160a01b03841684146103e8578d8efd5b83835260019590950194918c01918c016103c8565b50885250505093870193509086019060010161037a565b509098975050505050505050565b600060208284031215610433578081fd5b5051919050565b6000815180845260208085019450808401835b838110156104695781518752958201959082019060010161044d565b509495945050505050565b600060408252610487604083018561043a565b8281036020840152610499818561043a565b95945050505050565b6040518181016001600160401b03811182821017156104c3576104c3610515565b604052919050565b60006001600160401b038211156104e4576104e4610515565b5060209081020190565b600060001982141561050e57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfe";
