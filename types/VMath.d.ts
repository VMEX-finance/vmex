/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VMathInterface extends ethers.utils.Interface {
  functions: {
    "geometric_mean(uint8,uint256)": FunctionFragment;
    "min(uint256[])": FunctionFragment;
    "product(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "geometric_mean",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "min", values: [BigNumberish[]]): string;
  encodeFunctionData(
    functionFragment: "product",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "geometric_mean",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "min", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "product", data: BytesLike): Result;

  events: {};
}

export class VMath extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VMathInterface;

  functions: {
    geometric_mean(
      n: BigNumberish,
      product: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "geometric_mean(uint8,uint256)"(
      n: BigNumberish,
      product: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    min(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "min(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    product(
      nums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "product(uint256[])"(
      nums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  geometric_mean(
    n: BigNumberish,
    product: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "geometric_mean(uint8,uint256)"(
    n: BigNumberish,
    product: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  min(array: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

  "min(uint256[])"(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  product(nums: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

  "product(uint256[])"(
    nums: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    geometric_mean(
      n: BigNumberish,
      product: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "geometric_mean(uint8,uint256)"(
      n: BigNumberish,
      product: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    min(array: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    "min(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    product(
      nums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "product(uint256[])"(
      nums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    geometric_mean(
      n: BigNumberish,
      product: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "geometric_mean(uint8,uint256)"(
      n: BigNumberish,
      product: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    min(array: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    "min(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    product(
      nums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "product(uint256[])"(
      nums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    geometric_mean(
      n: BigNumberish,
      product: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "geometric_mean(uint8,uint256)"(
      n: BigNumberish,
      product: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    min(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "min(uint256[])"(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    product(
      nums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "product(uint256[])"(
      nums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
