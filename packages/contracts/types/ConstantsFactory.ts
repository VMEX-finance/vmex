/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Constants } from "./Constants";

export class ConstantsFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Constants> {
    return super.deploy(overrides || {}) as Promise<Constants>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Constants {
    return super.attach(address) as Constants;
  }
  connect(signer: Signer): ConstantsFactory {
    return super.connect(signer) as ConstantsFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Constants {
    return new Contract(address, _abi, signerOrProvider) as Constants;
  }
}

const _abi = [
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address[20]",
        name: "",
        type: "address[20]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenNames",
    outputs: [
      {
        internalType: "string[20]",
        name: "",
        type: "string[20]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61062361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063188e785214610045578063fc0c546a14610063575b600080fd5b61004d610078565b60405161005a9190610568565b60405180910390f35b61006b6102c1565b60405161005a919061052d565b6100806104e6565b50604080516102c08101825260046102808201818152634141564560e01b6102a084015282528251808401845260038082526210905560ea1b602083810191909152808501929092528451808601865283815263109554d160e21b8184015284860152845180860186528181526244414960e81b818401526060850152845180860186528181526222a72560e91b81840152608085015284518086018652818152624b4e4360e81b8184015260a085015284518086018652838152634c494e4b60e01b8184015260c085015284518086018652838152634d414e4160e01b8184015260e0850152845180860186528181526226a5a960e91b8184015261010085015284518086018652818152622922a760e91b8184015261012085015284518086018652818152620a69cb60eb1b81840152610140850152845180860186528381526314d554d160e21b818401526101608501528451808601865283815263151554d160e21b818401526101808501528451808601865281815262554e4960e81b818401526101a085015284518086018652838152635553444360e01b818401526101c085015284518086018652838152631554d11560e21b818401526101e085015284518086018652928352635742544360e01b83830152610200840192909252835180850185528281526259464960e81b8183015261022084015283518085018552918252620b4a4b60eb1b828201526102408301919091528251808401909352600683526578535553484960d01b9083015261026081019190915290565b6102c961050e565b506040805161028081018252737fc66500c84a76ad7e9c93437bfc5ac33e2ddae98152730d8775f648430679a709e98d2b0cb6250d2887ef6020820152734fabb145d64652a948d72533023f6e7a623c7c5391810191909152736b175474e89094c44da98b954eedeac495271d0f606082015273f629cbd94d3791c9250152bd8dfbdf380e2a3b9c608082015273defa4e8a7bcba345f687a2f1456f5edd9ce9720260a082015273514910771af9ca656af840dff83e8264ecf986ca60c0820152730f5d2fb29fb7d3cfee444a200298f468908cc94260e0820152739f8f72aa9304c8b593d555f12ef6589cc3a579a261010082015273408e41876cccdc0f92210600ef50372656052a3861012082015273c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f6101408201527357ab1ec28d129707052df4df418d58a2d46d5f516101608201526e085d4780b73119b644ae5ecd22b376610180820152731f9840a85d5af5bf1d1762f925bdaddc4201f9846101a082015273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486101c082015273dac17f958d2ee523a2206206994597c13d831ec76101e0820152732260fac5e5542a773aa44fbcfedf7c193bc2c599610200820152730bc529c00c6401aef6d220be8c6ea1667f6ad93e61022082015273e41d2489571d322189246dafa5ebde1f4699f49861024082015273f256cc7847e919fac9b808cc216cac87ccf2f47a61026082015290565b6040518061028001604052806014905b60608152602001906001900390816104f65790505090565b6040518061028001604052806014906020820280368337509192915050565b6102808101818360005b601481101561055f5781516001600160a01b0316835260209283019290910190600101610537565b50505092915050565b60208082526000906102a0830183820185845b60148110156105e157601f198088860301845282518051808752885b818110156105b2578281018901518882018a01528801610597565b818111156105c2578989838a0101525b50601f019091169490940185019350918401919084019060010161057b565b5091969550505050505056fea26469706673582212203016ff87a784cc7ae22d663a7ada5b813cbbfdb73ff43ff9deb7743852eb6add64736f6c63430008000033";
