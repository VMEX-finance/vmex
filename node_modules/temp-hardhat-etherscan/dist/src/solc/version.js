"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVersions = exports.getLongVersion = exports.inferSolcVersion = exports.InferralType = void 0;
const plugins_1 = require("hardhat/plugins");
const pluginContext_1 = require("../pluginContext");
const metadata_1 = require("./metadata");
const COMPILERS_LIST_URL = "https://solc-bin.ethereum.org/bin/list.json";
var InferralType;
(function (InferralType) {
    InferralType[InferralType["EXACT"] = 0] = "EXACT";
    InferralType[InferralType["METADATA_PRESENT_VERSION_ABSENT"] = 1] = "METADATA_PRESENT_VERSION_ABSENT";
    InferralType[InferralType["METADATA_ABSENT"] = 2] = "METADATA_ABSENT";
})(InferralType = exports.InferralType || (exports.InferralType = {}));
async function inferSolcVersion(bytecode) {
    let solcVersionMetadata;
    try {
        solcVersionMetadata = await metadata_1.readSolcVersion(bytecode);
    }
    catch (error) {
        // We want to provide our best inference here.
        // We can infer that some solidity compiler releases couldn't have produced this bytecode.
        // Solc v0.4.7 was the first compiler to introduce metadata into the generated bytecode.
        // See https://solidity.readthedocs.io/en/v0.4.7/miscellaneous.html#contract-metadata
        // Solc v0.4.26, the last release for the v0.4 series, does not feature the compiler version in its emitted metadata.
        // See https://solidity.readthedocs.io/en/v0.4.26/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
        // Solc v0.5.9 was the first compiler to introduce its version into the metadata.
        // See https://solidity.readthedocs.io/en/v0.5.9/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
        // Solc v0.6.0 features compiler version metadata.
        // See https://solidity.readthedocs.io/en/v0.6.0/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
        if (error instanceof metadata_1.VersionNotFoundError) {
            // The embedded metadata was successfully decoded but there was no solc version in it.
            return {
                range: "0.4.7 - 0.5.8",
                inferralType: InferralType.METADATA_PRESENT_VERSION_ABSENT,
            };
        }
        if (error instanceof metadata_1.MetadataAbsentError) {
            // The decoding failed. Unfortunately, our only option is to assume that this bytecode was emitted by an old version.
            return {
                range: "<0.4.7",
                inferralType: InferralType.METADATA_ABSENT,
            };
        }
        // Should be unreachable.
        throw error;
    }
    const range = {
        inferralType: InferralType.EXACT,
        range: solcVersionMetadata,
    };
    return range;
}
exports.inferSolcVersion = inferSolcVersion;
// TODO: this could be retrieved from the hardhat config instead.
async function getLongVersion(shortVersion) {
    const versions = await getVersions();
    const fullVersion = versions.releases[shortVersion];
    if (fullVersion === undefined || fullVersion === "") {
        throw new plugins_1.NomicLabsHardhatPluginError(pluginContext_1.pluginName, "Given solc version doesn't exist");
    }
    return fullVersion.replace(/(soljson-)(.*)(.js)/, "$2");
}
exports.getLongVersion = getLongVersion;
async function getVersions() {
    try {
        const { default: fetch } = await Promise.resolve().then(() => __importStar(require("node-fetch")));
        // It would be better to query an etherscan API to get this list but there's no such API yet.
        const response = await fetch(COMPILERS_LIST_URL);
        if (!response.ok) {
            const responseText = await response.text();
            throw new plugins_1.NomicLabsHardhatPluginError(pluginContext_1.pluginName, `HTTP response is not ok. Status code: ${response.status} Response text: ${responseText}`);
        }
        return response.json();
    }
    catch (error) {
        throw new plugins_1.NomicLabsHardhatPluginError(pluginContext_1.pluginName, `Failed to obtain list of solc versions. Reason: ${error.message}`, error);
    }
}
exports.getVersions = getVersions;
//# sourceMappingURL=version.js.map