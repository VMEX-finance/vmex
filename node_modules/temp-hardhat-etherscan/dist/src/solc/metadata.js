"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readSolcMetadataLength = exports.decodeSolcMetadata = exports.readSolcVersion = exports.MetadataAbsentError = exports.VersionNotFoundError = exports.METADATA_LENGTH_SIZE = void 0;
const plugins_1 = require("hardhat/plugins");
const pluginContext_1 = require("../pluginContext");
exports.METADATA_LENGTH_SIZE = 2;
// Instances of these errors are not supposed to be seen by the task.
class VersionNotFoundError extends plugins_1.NomicLabsHardhatPluginError {
    constructor(message) {
        super(pluginContext_1.pluginName, message, undefined, true);
        Object.setPrototypeOf(this, VersionNotFoundError.prototype);
    }
}
exports.VersionNotFoundError = VersionNotFoundError;
class MetadataAbsentError extends plugins_1.NomicLabsHardhatPluginError {
    constructor(message) {
        super(pluginContext_1.pluginName, message, undefined, true);
        Object.setPrototypeOf(this, MetadataAbsentError.prototype);
    }
}
exports.MetadataAbsentError = MetadataAbsentError;
async function readSolcVersion(bytecode) {
    let solcMetadata;
    try {
        solcMetadata = (await decodeSolcMetadata(bytecode)).solc;
    }
    catch (error) {
        throw new MetadataAbsentError("Could not decode metadata.");
    }
    if (solcMetadata instanceof Buffer) {
        const [major, minor, patch] = solcMetadata;
        return `${major}.${minor}.${patch}`;
    }
    throw new VersionNotFoundError("Could not find solc version in metadata.");
}
exports.readSolcVersion = readSolcVersion;
async function decodeSolcMetadata(bytecode) {
    const metadataLength = readSolcMetadataLength(bytecode);
    // The metadata and its length are in the last few bytes.
    const metadataPayload = bytecode.slice(-metadataLength - exports.METADATA_LENGTH_SIZE, -exports.METADATA_LENGTH_SIZE);
    const { decodeFirst } = await Promise.resolve().then(() => __importStar(require("cbor")));
    // The documentation for decodeFirst mentions the `required` option even though
    // the type information is missing it.
    // See http://hildjj.github.io/node-cbor/Decoder.html#.decodeFirst
    const options = { required: true };
    return decodeFirst(metadataPayload, options);
}
exports.decodeSolcMetadata = decodeSolcMetadata;
function readSolcMetadataLength(bytecode) {
    return bytecode.slice(-exports.METADATA_LENGTH_SIZE).readUInt16BE(0);
}
exports.readSolcMetadataLength = readSolcMetadataLength;
//# sourceMappingURL=metadata.js.map