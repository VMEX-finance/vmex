/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { FullAppAnalytics } from "./FullAppAnalytics";

export class FullAppAnalyticsFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    pool: string,
    user: string,
    overrides?: Overrides
  ): Promise<FullAppAnalytics> {
    return super.deploy(
      pool,
      user,
      overrides || {}
    ) as Promise<FullAppAnalytics>;
  }
  getDeployTransaction(
    pool: string,
    user: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(pool, user, overrides || {});
  }
  attach(address: string): FullAppAnalytics {
    return super.attach(address) as FullAppAnalytics;
  }
  connect(signer: Signer): FullAppAnalyticsFactory {
    return super.connect(signer) as FullAppAnalyticsFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FullAppAnalytics {
    return new Contract(address, _abi, signerOrProvider) as FullAppAnalytics;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getType",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161032a38038061032a83398101604081905261002f91610218565b60006100448361007260201b6100531760201c565b9050600081604051602001610059919061030a565b6040516020818303038152906040529050805181602001f35b600080826001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100ae57600080fd5b505afa1580156100c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e691906101f7565b90506000836001600160a01b031663f139dc816040518163ffffffff1660e01b815260040160206040518083038186803b15801561012357600080fd5b505afa158015610137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015b91906101f7565b90506000826001600160a01b031663d1946dbc6040518163ffffffff1660e01b815260040160006040518083038186803b15801561019857600080fd5b505afa1580156101ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d4919081019061024a565b5193505050505b919050565b80516001600160a01b03811681146101db57600080fd5b600060208284031215610208578081fd5b610211826101e0565b9392505050565b6000806040838503121561022a578081fd5b610233836101e0565b9150610241602084016101e0565b90509250929050565b6000602080838503121561025c578182fd5b82516001600160401b0380821115610272578384fd5b818501915085601f830112610285578384fd5b81518181111561029757610297610313565b838102604051858282010181811085821117156102b6576102b6610313565b604052828152858101935084860182860187018a10156102d4578788fd5b8795505b838610156102fd576102e9816101e0565b8552600195909501949386019386016102d8565b5098975050505050505050565b90815260200190565b634e487b7160e01b600052604160045260246000fdfe";
