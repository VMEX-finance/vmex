import { Provider, TransactionRequest, TransactionResponse } from '@ethersproject/abstract-provider';
import { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from '@ethersproject/abstract-signer';
import { Bytes } from '@ethersproject/bytes';
import { Deferrable } from '@ethersproject/properties';
import { Relayer, Speed, RelayerParams } from '../relayer';
declare type GasOptions = Pick<TransactionRequest, 'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'>;
export declare type DefenderTransactionRequest = TransactionRequest & Partial<{
    speed: Speed;
    validUntil: Date | string;
}>;
export declare type DefenderRelaySignerOptions = Partial<GasOptions & {
    speed: Speed;
    validForSeconds: number;
}>;
export declare class DefenderRelaySigner extends Signer implements TypedDataSigner {
    readonly relayerCredentials: RelayerParams | Relayer;
    readonly provider: Provider;
    readonly options: DefenderRelaySignerOptions;
    private readonly relayer;
    private address?;
    constructor(relayerCredentials: RelayerParams | Relayer, provider: Provider, options?: DefenderRelaySignerOptions);
    getAddress(): Promise<string>;
    signMessage(message: string | Bytes): Promise<string>;
    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;
    connect(provider: Provider): Signer;
    sendTransaction(transaction: Deferrable<DefenderTransactionRequest>): Promise<TransactionResponse>;
    populateTransaction(transaction: Deferrable<DefenderTransactionRequest>): Promise<DefenderTransactionRequest>;
    checkTransaction(transaction: Deferrable<DefenderTransactionRequest>): Deferrable<DefenderTransactionRequest>;
    /**
     * Signs the typed data value with types data structure for domain using the EIP-712 specification.
     * https://eips.ethereum.org/EIPS/eip-712
     *
     * @param domain EIP712Domain containing name, version, chainId, verifyingContract and salt. All optional
     * @param types set of all types encompassed by struct
     * @param value typed data to sign matching provided types
     * @returns typed data signature
     */
    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;
}
export {};
//# sourceMappingURL=signer.d.ts.map