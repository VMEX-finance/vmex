import { RunTaskFunction } from "@nomiclabs/buidler/types";
import { InferralType } from "./version";
export declare function lookupMatchingBytecode(contractFiles: CompilerOutput["contracts"], deployedBytecode: string, inferralType: InferralType): Promise<{
    immutableValues: ImmutableValues;
    libraryLinks: ResolvedLinks;
    normalizedBytecode: string;
    contractFilename: string;
    contractName: string;
    contract: {
        abi: any;
        evm: {
            bytecode: CompilerOutputBytecode;
            deployedBytecode: CompilerOutputBytecode;
        };
    };
}[]>;
declare type BytecodeComparison = {
    match: false;
} | {
    match: true;
    contractInformation: BytecodeExtractedData;
};
interface BytecodeExtractedData {
    immutableValues: ImmutableValues;
    libraryLinks: ResolvedLinks;
    normalizedBytecode: string;
}
export declare function compareBytecode(deployedBytecode: string, runtimeBytecodeSymbols: CompilerOutputBytecode, inferralType: InferralType): Promise<BytecodeComparison>;
interface ResolvedLinks {
    [libraryFileGlobalName: string]: {
        [libraryName: string]: string;
    };
}
interface ImmutableValues {
    [key: string]: string;
}
export declare function normalizeBytecode(bytecode: string, symbols: CompilerOutputBytecode): Promise<{
    libraryLinks: ResolvedLinks;
    immutableValues: ImmutableValues;
    normalizedBytecode: string;
}>;
export declare function zeroOutSlices(code: string, slices: Array<{
    start: number;
    length: number;
}>): string;
export interface CompilerInput {
    language: "Solidity";
    sources: {
        [fileGlobalName: string]: {
            content: string;
        };
    };
    settings: {
        optimizer: {
            runs: number;
            enabled: boolean;
        };
        evmVersion?: string;
        libraries?: ResolvedLinks;
    };
}
export interface CompilerOutput {
    contracts: {
        [globalName: string]: {
            [contractName: string]: {
                abi: any;
                evm: {
                    bytecode: CompilerOutputBytecode;
                    deployedBytecode: CompilerOutputBytecode;
                };
            };
        };
    };
}
export interface CompilerOutputBytecode {
    object: string;
    linkReferences: {
        [libraryFileGlobalName: string]: {
            [libraryName: string]: Array<{
                start: number;
                length: 20;
            }>;
        };
    };
    immutableReferences?: {
        [key: string]: Array<{
            start: number;
            length: number;
        }>;
    };
}
export declare function compile(taskRun: RunTaskFunction): Promise<{
    compilerInput: CompilerInput;
    compilerOutput: CompilerOutput;
}>;
export {};
//# sourceMappingURL=bytecode.d.ts.map