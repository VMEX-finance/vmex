"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Relayer = exports.isRelayer = exports.isEIP1559Tx = exports.isLegacyTx = void 0;
const api_1 = require("./api");
function isAutotaskCredentials(credentials) {
    const autotaskCredentials = credentials;
    return !!autotaskCredentials.credentials;
}
function isApiCredentials(credentials) {
    const apiCredentials = credentials;
    return !!apiCredentials.apiKey && !!apiCredentials.apiSecret;
}
// If a tx-like object is representing a legacy transaction (type 0)
function isLegacyTx(tx) {
    // Consider that an EIP1559 tx may have `gasPrice` after
    // https://github.com/OpenZeppelin/defender/pull/2838
    // that's why the !isEIP1559Tx check
    return 'gasPrice' in tx && !isEIP1559Tx(tx);
}
exports.isLegacyTx = isLegacyTx;
// If a tx-like object is representing a EIP1559 transaction (type 2)
function isEIP1559Tx(tx) {
    return 'maxPriorityFeePerGas' in tx && 'maxFeePerGas' in tx;
}
exports.isEIP1559Tx = isEIP1559Tx;
function validatePayload(payload) {
    if (isEIP1559Tx(payload) && BigInt(payload.maxFeePerGas) < BigInt(payload.maxPriorityFeePerGas)) {
        throw new Error('maxFeePerGas should be greater or equal to maxPriorityFeePerGas');
    }
    if (payload.validUntil && new Date(payload.validUntil).getTime() < new Date().getTime()) {
        throw new Error('The validUntil time cannot be in the past');
    }
    if (!payload.to && !payload.data) {
        throw new Error('Both txs `to` and `data` fields are missing. At least one of them has to be set.');
    }
    return payload;
}
function isRelayer(params) {
    return typeof params === 'object' && !!params.getRelayer;
}
exports.isRelayer = isRelayer;
class Relayer {
    constructor(credentials) {
        if (isAutotaskCredentials(credentials)) {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const { AutotaskRelayer } = require('./autotask');
            this.relayer = new AutotaskRelayer(credentials);
        }
        else if (isApiCredentials(credentials)) {
            this.relayer = new api_1.ApiRelayer(credentials);
        }
        else {
            throw new Error(`Missing credentials for creating a Relayer instance. If you are running this code in an Autotask, make sure you pass the "credentials" parameter from the handler to the Relayer constructor. If you are running this on your own process, then pass an object with the "apiKey" and "apiSecret" generated by the relayer.`);
        }
    }
    getRelayer() {
        return this.relayer.getRelayer();
    }
    sign(payload) {
        return this.relayer.sign(payload);
    }
    signTypedData(payload) {
        return this.relayer.signTypedData(payload);
    }
    sendTransaction(payload) {
        validatePayload(payload);
        return this.relayer.sendTransaction(payload);
    }
    replaceTransactionById(id, payload) {
        validatePayload(payload);
        return this.relayer.replaceTransactionById(id, payload);
    }
    replaceTransactionByNonce(nonce, payload) {
        validatePayload(payload);
        return this.relayer.replaceTransactionByNonce(nonce, payload);
    }
    query(id) {
        return this.relayer.query(id);
    }
    list(criteria) {
        return this.relayer.list(criteria);
    }
    call(method, params) {
        return this.relayer.call(method, params);
    }
}
exports.Relayer = Relayer;
